{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator/index.js","../node_modules/streamlit-component-lib/node_modules/react/index.js","../../src/event.mjs","../../src/event-target.mjs","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/AwaitValue.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/awaitAsyncGenerator.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/AsyncGenerator.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/wrapAsyncGenerator.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncGeneratorDelegate.js","../node_modules/flatbuffers/js/flatbuffers.mjs","../node_modules/text-encoding-utf-8/lib/encoding.lib.mjs","../util/utf8.ts","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/isNativeReflectConstruct.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/typeof.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper.js","../io/interfaces.ts","../util/compat.ts","../util/buffer.ts","../io/adapters.ts","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/superPropBase.js","../vector.ts","../fb/Schema.ts","../fb/Message.ts","../enum.ts","../util/bit.ts","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","../visitor.ts","../visitor/typecomparator.ts","../type.ts","../data.ts","../util/pretty.ts","../builder/valid.ts","../builder/buffer.ts","../builder.ts","../builder/bool.ts","../builder/null.ts","../builder/date.ts","../builder/decimal.ts","../builder/dictionary.ts","../builder/fixedsizebinary.ts","../util/math.ts","../builder/float.ts","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/construct.js","../util/bn.ts","../builder/int.ts","../builder/time.ts","../builder/timestamp.ts","../builder/interval.ts","../builder/binary.ts","../builder/utf8.ts","../builder/run.ts","../vector/row.ts","../util/vector.ts","../vector/chunked.ts","../column.ts","../util/args.ts","../schema.ts","../builder/list.ts","../builder/fixedsizelist.ts","../builder/map.ts","../builder/struct.ts","../builder/union.ts","../visitor/set.ts","../fb/File.ts","../visitor/builderctor.ts","../builder/index.ts","../ipc/metadata/file.ts","../io/stream.ts","../io/file.ts","../util/int.ts","../visitor/vectorloader.ts","../visitor/typeassembler.ts","../ipc/metadata/json.ts","../ipc/metadata/message.ts","../ipc/message.ts","../visitor/vectorassembler.ts","../ipc/writer.ts","../util/recordbatch.ts","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","../vector/base.ts","../vector/binary.ts","../vector/bool.ts","../vector/date.ts","../vector/decimal.ts","../vector/dictionary.ts","../vector/fixedsizebinary.ts","../vector/fixedsizelist.ts","../vector/float.ts","../vector/interval.ts","../vector/int.ts","../vector/list.ts","../vector/map.ts","../vector/null.ts","../vector/struct.ts","../vector/timestamp.ts","../vector/time.ts","../vector/union.ts","../vector/utf8.ts","../util/fn.ts","../visitor/get.ts","../visitor/indexof.ts","../visitor/iterator.ts","../visitor/toarray.ts","../visitor/bytewidth.ts","../visitor/vectorctor.ts","../vector/index.ts","../table.ts","../recordbatch.ts","../ipc/reader.ts","../io/whatwg/builder.ts","../compute/predicate.ts","../compute/dataframe.ts","../Arrow.ts","../Arrow.dom.ts","../io/whatwg/iterable.ts","../io/whatwg/reader.ts","../io/whatwg/writer.ts","../node_modules/streamlit-component-lib/dist/ArrowTable.js","../node_modules/streamlit-component-lib/dist/streamlit.js","../node_modules/streamlit-component-lib/dist/StreamlitReact.js","../node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js","../node_modules/hoist-non-react-statics/node_modules/react-is/index.js","../node_modules/hoist-non-react-statics/node_modules/react-is/cjs/react-is.production.min.js","../node_modules/streamlit-component-lib/node_modules/react/cjs/react.production.min.js","../node_modules/object-assign/index.js","../node_modules/regenerator-runtime/runtime.js"],"names":["_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","Constructor","protoProps","staticProps","prototype","_classCallCheck","instance","TypeError","module","exports","require","privateData","WeakMap","wrappers","pd","event","retv","get","console","assert","setCancelFlag","data","passiveListener","cancelable","canceled","preventDefault","error","Event","eventTarget","set","this","eventPhase","currentTarget","stopped","immediateStopped","timeStamp","Date","now","value","keys","defineRedirectDescriptor","defineCallDescriptor","apply","arguments","getWrapper","proto","wrapper","BaseEvent","CustomEvent","call","create","constructor","isFunc","getOwnPropertyDescriptor","defineWrapper","getPrototypeOf","isStopped","setPassiveListener","type","composedPath","stopPropagation","stopImmediatePropagation","Boolean","bubbles","composed","cancelBubble","initEvent","window","setPrototypeOf","listenersMap","isObject","x","getListeners","listeners","defineEventAttribute","eventTargetPrototype","eventName","node","listenerType","listener","next","prev","delete","newNode","passive","once","defineEventAttributeDescriptor","defineCustomEventTarget","eventNames","CustomEventTarget","EventTarget","Array","isArray","types","Map","addEventListener","options","optionsIsObj","capture","undefined","removeEventListener","dispatchEvent","wrappedEvent","wrapEvent","err","handleEvent","setEventPhase","setCurrentTarget","defaultPrevented","_arrayLikeToArray","arr","len","arr2","_unsupportedIterableToArray","o","minLen","n","toString","slice","name","from","test","_createForOfIteratorHelper","Symbol","iterator","F","s","done","e","_e","f","it","normalCompletion","didErr","step","_e2","asyncGeneratorStep","gen","resolve","reject","_next","_throw","arg","info","Promise","then","_asyncToGenerator","fn","self","args","_slicedToArray","_arr","_n","_d","_s","_i","push","_AwaitValue","wrapped","_awaitAsyncGenerator","AsyncGenerator","front","back","resume","result","wrappedAwait","settle","_invoke","request","_wrapAsyncGenerator","_asyncGeneratorDelegate","inner","awaitWrap","iter","waiting","pump","asyncIterator","flatbuffers","inRange","a","min","max","ToDictionary","Offset","Table","SIZEOF_SHORT","SIZEOF_INT","FILE_IDENTIFIER_LENGTH","Encoding","UTF8_BYTES","UTF16_STRING","int32","Int32Array","float32","Float32Array","buffer","float64","Float64Array","isLittleEndian","Uint16Array","Uint8Array","Long","low","high","ZERO","toFloat64","equals","other","Builder","opt_initial_size","initial_size","bb","ByteBuffer","allocate","space","minalign","vtable","vtable_in_use","isNested","object_start","vtables","vector_num_elems","force_defaults","clear","capacity","forceDefaults","dataBuffer","asUint8Array","bytes","subarray","position","offset","prep","size","additional_bytes","align_size","old_buf_size","growByteBuffer","pad","byte_size","writeInt8","writeInt16","writeInt32","writeInt64","writeFloat32","writeFloat64","addInt8","addInt16","addInt32","addInt64","addFloat32","addFloat64","addFieldInt8","voffset","defaultValue","slot","addFieldInt16","addFieldInt32","addFieldInt64","addFieldFloat32","addFieldFloat64","addFieldOffset","addOffset","addFieldStruct","nested","obj","Error","notNested","new_buf_size","nbb","setPosition","startObject","numfields","endObject","vtableloc","trimmed_size","existing_vtable","vt1","outer_loop","vt2","readInt16","j","finish","root_table","opt_file_identifier","file_identifier","charCodeAt","requiredField","table","field","table_start","vtable_start","readInt32","startVector","elem_size","num_elems","alignment","endVector","createString","utf8","codePoint","createLong","bytes_","position_","readInt8","readUint8","readUint16","readUint32","readInt64","readUint64","readFloat32","readFloat64","writeUint8","writeUint16","writeUint32","writeUint64","getBufferIdentifier","String","fromCharCode","__offset","bb_pos","vtable_offset","__union","t","__string","opt_encoding","b","c","__indirect","__vector","__vector_len","__has_identifier","ident","Stream","tokens","endOfStream","read","shift","prepend","token","unshift","pop","decoderError","fatal","opt_code_point","TextDecoder","encoding","toLowerCase","_streaming","_BOMseen","_decoder","_fatal","_ignoreBOM","TextEncoder","_encoder","_options","UTF8Decoder","utf8_code_point","utf8_bytes_seen","utf8_bytes_needed","utf8_lower_boundary","utf8_upper_boundary","handler","stream","bite","code_point","UTF8Encoder","count","temp","decode","input","ArrayBuffer","byteOffset","byteLength","input_stream","code_points","indexOf","cp","codePointsToString","encode","opt_string","string","u","d","stringToCodePoints","_Buffer","Buffer","useNativeEncoders","decodeUtf8","decoder","toUint8Array","TextDecoderPolyfill","encodeUtf8","encoder","TextEncoderPolyfill","_setPrototypeOf","p","__proto__","_inherits","subClass","superClass","_getPrototypeOf","_isNativeReflectConstruct","Reflect","construct","sham","Proxy","_typeof","_assertThisInitialized","ReferenceError","_possibleConstructorReturn","_createSuper","Derived","Super","NewTarget","ITERATOR_DONE","freeze","ArrowJSON","_json","ReadableInterop","_getDOMStream","tee","_getNodeStream","pipe","pipeTo","duplex","pipeThrough","_DOMStream","toDOMStream","_nodeStream","toNodeStream","AsyncQueue","_values","resolvers","_closedPromise","r","_closedPromiseResolve","reason","return","_ensureOpen","_error","streamAdapters","_","abort","close","BigIntUnavailableError","BigIntUnavailable","asIntN","asUintN","BigInt","BigIntCtor","BigIntAvailable","BigInt64ArrayUnavailableError","BigInt64Array","BigInt64ArrayCtor","BigUint64ArrayUnavailableError","BigUint64Array","BigUint64ArrayCtor","isNumber","isBoolean","isFunction","isPromise","isIterable","isAsyncIterable","isArrowJSON","isIteratorResult","isFileHandle","isFetchResponse","isReadableDOMStream","isWritableDOMStream","isWritableNodeStream","isReadableNodeStream","toArrayBufferViewIterator","SharedArrayBuf","SharedArrayBuffer","memcpy","source","targetByteOffset","sourceByteLength","targetByteLength","dst","src","Math","joinUint8Arrays","chunks","sliced","xOffset","yOffset","xLen","yLen","y","collapseContiguousByteRanges","reduce","index","Infinity","toArrayBufferView","ArrayBufferViewCtor","isView","BYTES_PER_ELEMENT","toInt8Array","Int8Array","toInt16Array","Int16Array","toInt32Array","toBigInt64Array","toUint16Array","toUint32Array","Uint32Array","toBigUint64Array","toFloat32Array","toFloat64Array","toUint8ClampedArray","Uint8ClampedArray","ArrayCtor","wrap","buffers","toInt8ArrayIterator","toInt16ArrayIterator","toInt32ArrayIterator","toUint8ArrayIterator","toUint16ArrayIterator","toUint32ArrayIterator","toFloat32ArrayIterator","toFloat64ArrayIterator","toUint8ClampedArrayIterator","toArrayBufferViewAsyncIterator","emit","toInt8ArrayAsyncIterator","toInt16ArrayAsyncIterator","toInt32ArrayAsyncIterator","toUint8ArrayAsyncIterator","toUint16ArrayAsyncIterator","toUint32ArrayAsyncIterator","toFloat32ArrayAsyncIterator","toFloat64ArrayAsyncIterator","toUint8ClampedArrayAsyncIterator","rebaseValueOffsets","valueOffsets","compareArrayLike","fromIterable","fromAsyncIterable","fromDOMStream","fromNodeStream","byteRange","cmd","bufferLength","threw","isNaN","throw","AdaptiveByteReader","releaseLock","byobReader","defaultReader","supportsBYOB","reader","getBYOBReader","getDefaultReader","catch","readFromBYOBReader","mode","readInto","onEvent","cleanup","events","evt","destroy","race","map","isFinite","_defineProperty","object","enumerableOnly","getOwnPropertySymbols","symbols","filter","sym","_objectSpread2","forEach","getOwnPropertyDescriptors","defineProperties","property","receiver","base","hasOwnProperty","desc","org","flatbuf","arrow","apache","AbstractVector","MetadataVersion","UnionMode","Precision","DateUnit","TimeUnit","IntervalUnit","Type","Endianness","Null","__init","builder","startNull","endNull","Struct_","startStruct_","endStruct_","List","startList","endList","LargeList","startLargeList","endLargeList","FixedSizeList","listSize","startFixedSizeList","addListSize","endFixedSizeList","keysSorted","startMap","addKeysSorted","endMap","Union","Sparse","typeIdsOffset","numElems","startUnion","addMode","addTypeIds","endUnion","Int","bitWidth","isSigned","startInt","addBitWidth","addIsSigned","endInt","FloatingPoint","HALF","precision","startFloatingPoint","addPrecision","endFloatingPoint","Utf8","startUtf8","endUtf8","Binary","startBinary","endBinary","LargeUtf8","startLargeUtf8","endLargeUtf8","LargeBinary","startLargeBinary","endLargeBinary","FixedSizeBinary","byteWidth","startFixedSizeBinary","addByteWidth","endFixedSizeBinary","Bool","startBool","endBool","Decimal","scale","startDecimal","addScale","endDecimal","MILLISECOND","unit","startDate","addUnit","endDate","Time","startTime","endTime","Timestamp","SECOND","optionalEncoding","timezoneOffset","startTimestamp","addTimezone","endTimestamp","Interval","YEAR_MONTH","startInterval","endInterval","Duration","startDuration","endDuration","KeyValue","keyOffset","valueOffset","startKeyValue","addKey","addValue","endKeyValue","DictionaryEncoding","id","indexTypeOffset","isOrdered","startDictionaryEncoding","addId","addIndexType","addIsOrdered","endDictionaryEncoding","Field","NONE","nameOffset","nullable","typeType","typeOffset","dictionaryOffset","childrenOffset","customMetadataOffset","startField","addName","addNullable","addTypeType","addType","addDictionary","addChildren","addCustomMetadata","endField","Schema","Little","endianness","fieldsOffset","startSchema","addEndianness","addFields","endSchema","NS7624605610262437867","MessageHeader","FieldNode","null_count","RecordBatch","nodesOffset","buffersOffset","startRecordBatch","addLength","addNodes","addBuffers","endRecordBatch","DictionaryBatch","dataOffset","isDelta","startDictionaryBatch","addData","addIsDelta","endDictionaryBatch","Message","V1","version","headerType","headerOffset","bodyLength","startMessage","addVersion","addHeaderType","addHeader","addBodyLength","endMessage","Schema_","BufferType","Message_","iterateBits","getBool","_data","_index","byte","bit","getBit","setBool","truncateBitmap","bitmap","alignedSize","packBools","values","xs","begin","context","byteIndex","remaining","popcnt_bit_range","lhs","rhs","sum","rhsInside","lhsInside","popcnt_array","cnt","pos","view","DataView","popcnt_uint32","getUint32","getUint16","getUint8","uint32","_toConsumableArray","Visitor","nodes","visit","getVisitFn","throwIfNotFound","_node","visitor","dtype","Data","Vector","inferDType","DataType","visitNull","visitBool","visitInt","Int8","visitInt8","Int16","visitInt16","Int32","visitInt32","Int64","visitInt64","Uint8","visitUint8","Uint16","visitUint16","Uint32","visitUint32","Uint64","visitUint64","Float","visitFloat","Float16","visitFloat16","Float32","visitFloat32","Float64","visitFloat64","visitUtf8","visitBinary","visitFixedSizeBinary","visitDate","DateDay","visitDateDay","DateMillisecond","visitDateMillisecond","visitTimestamp","TimestampSecond","visitTimestampSecond","TimestampMillisecond","visitTimestampMillisecond","TimestampMicrosecond","visitTimestampMicrosecond","TimestampNanosecond","visitTimestampNanosecond","visitTime","TimeSecond","visitTimeSecond","TimeMillisecond","visitTimeMillisecond","TimeMicrosecond","visitTimeMicrosecond","TimeNanosecond","visitTimeNanosecond","visitDecimal","visitList","Struct","visitStruct","visitUnion","DenseUnion","visitDenseUnion","SparseUnion","visitSparseUnion","Dictionary","visitDictionary","visitInterval","IntervalDayTime","visitIntervalDayTime","IntervalYearMonth","visitIntervalYearMonth","visitFixedSizeList","visitMap","typeId","SINGLE","DOUBLE","MICROSECOND","NANOSECOND","DAY","DAY_TIME","Dense","TypeComparator","schema","compareFields","fields","others","every","compareField","compareConstructor","compareAny","compareInt","compareFloat","compareDate","compareTimestamp","timezone","compareTime","compareUnion","typeIds","children","compareInterval","indices","dictionary","comparer","toStringTag","ArrayType","Int_","Date_","Time_","Timestamp_","Interval_","child","valueType","join","Union_","typeIdToChildIndex","idx","Map_","atomicDictionaryId","getId","strideForType","nullCount","childData","floor","_nullCount","stride","nullBitmap","childStride","_sliceBuffers","clone","_sliceChildren","newLength","fill","VALIDITY","TYPE","OFFSET","DATA","valueOffsetsOrChildren","valueToString","toPrimitive","JSON","stringify","createIsValidFunction","nullValues","fnBody","noNaNs","valueToCase","Function","roundLengthUpToNearest64Bytes","BPE","sliceOrExtendArray","BufferBuilder","_resize","extra","reserved","array","DataBufferBuilder","reserve","BitmapBufferBuilder","numValid","val","cur","OffsetsBufferBuilder","WideBufferBuilder","_ArrayType64","buffer64","ArrayType64","nulls","finished","_nulls","_isValid","new","flush","numInvalid","_offsets","_typeIds","reservedLength","reservedByteLength","setValid","isValid","setValue","_setValue","valid","numChildren","offsets","last","queueingStrategy","highWaterMark","sizeProperty","numChunks","append","toVector","throughIterable","throughAsyncIterable","FixedWidthBuilder","opts","VariableWidthBuilder","_pendingLength","pending","_pending","current","_flush","pendingLength","_flushPending","BoolBuilder","NullBuilder","DateBuilder","DateDayBuilder","DateMillisecondBuilder","DecimalBuilder","DictionaryBuilder","hashFn","_dictionaryOffset","_keysToIndices","valueToKey","keysToIndices","_dictionary","curr","concat","FixedSizeBinaryBuilder","f64","u32","uint16ToFloat64","h","expo","sigf","sign","NaN","float64ToUint16","FloatBuilder","Float16Builder","Float32Builder","Float64Builder","Parent","Class","bind","bignumToString","bignumToBigInt","isArrowBigNumSymbol","for","BigNum","SignedBigNum","UnsignedBigNum","DecimalBigNum","bignumToNumber","bn","hi","lo","signed","words","number","decimalToString","digits","base64","base32","checks","reverse","toJSON","valueOf","hint","assign","memo","BN","num","IntBuilder","Int8Builder","Int16Builder","Int32Builder","Int64Builder","toBigInt","Uint8Builder","Uint16Builder","Uint32Builder","Uint64Builder","TimeBuilder","TimeSecondBuilder","TimeMillisecondBuilder","TimeMicrosecondBuilder","TimeNanosecondBuilder","TimestampBuilder","TimestampSecondBuilder","TimestampMillisecondBuilder","TimestampMicrosecondBuilder","TimestampNanosecondBuilder","IntervalBuilder","IntervalDayTimeBuilder","IntervalYearMonthBuilder","BinaryBuilder","Utf8Builder","Run","kParent","kRowIndex","kKeyToIdx","kIdxToVal","kCustomInspect","Row","parent","numKeys","ktoi","itov","getValue","getIndex","ki","vi","kr","vr","k","v","has","callbackfn","thisArg","callback","m","str","MapRow","createRowProxy","getChildAt","StructRow","defineRowProxyProperties","findIndex","tmp","row","getter","setter","getKey","RowProxyHandler","isExtensible","deleteProperty","preventExtensions","ownKeys","clampIndex","adjust","clampRange","end","big0","isNaNFast","createElementComparator","search","typeofSearch","valueOfSearch","comparators","createSubElementsComparator","creatMapComparator","createArrayLikeComparator","createVectorComparator","createObjectComparator","compareArray","compareObject","vec","compareVector","lKeyItr","rKeyItr","rValItr","rVal","lKey","rKey","Chunked","calculateOffsets","_type","_chunks","_chunkOffsets","_length","_numChildren","chunk","isDictionary","_indices","flatten","_sliceInternal","columns","_children","vector","mid","isValidInternal","getInternal","element","indexOfInternal","toArray","arraySet","typedSet","chunkIndex","fromIndex","start","found","slices","chunkOffsets","chunkLength","chunkOffset","to","vectors","selectChunkArgs","Column","_field","SingleChunkColumn","metadata","column","rest","some","_chunk","selectArgs","Ctor","vals","_selectArgs","selectColumnArgs","_selectFieldArgs","selectFieldArgs","_selectChunkArgs","res","selectVectorChildrenArgs","_selectVectorChildrenArgs","toKeysAndValues","ret","entries","fieldIndex","valueIndex","dictionaries","generateDictionaryMap","compareSchemas","columnNames","names","columnIndices","curFields","mergeMaps","newFields","f2","newDictionaries","m1","m2","ListBuilder","_run","run","FixedSizeListBuilder","childIndex","MapBuilder","StructBuilder","UnionBuilder","_valueToChildTypeId","childTypeId","SparseUnionBuilder","DenseUnionBuilder","SetVisitor","setEpochMsToMillisecondsLong","epochMs","setVariableWidthBytes","setDateDay","setEpochMsToDays","setDateMillisecond","setNumeric","setFloat16","setNumericX2","values64","long","setTimestampSecond","setTimestampMillisecond","setTimestampMicrosecond","setEpochMsToMicrosecondsLong","setTimestampNanosecond","setEpochMsToNanosecondsLong","setTimeSecond","setTimeMillisecond","setTimeMicrosecond","setTimeNanosecond","setDenseUnion","setSparseUnion","setIntervalDayTime","setIntervalYearMonth","itr","_setStructVectorValue","_setStructArrayValue","_setStructObjectValue","newBuilder","getBuilderConstructor","defaultOptions","getChildOptions","T","setVisitor","Footer","Block","schemaOffset","dictionariesOffset","recordBatchesOffset","startFooter","addSchema","addDictionaries","addRecordBatches","endFooter","metaDataLength","_Block","File_","_Footer","Footer_","V4","recordBatches","dictionaryBatches","_recordBatches","_dictionaryBatches","numRecordBatches","block","getRecordBatch","numDictionaries","getDictionaryBatch","buf","footer","getRootAsFooter","OffHeapFooter","startRecordBatchesVector","rb","FileBlock","startDictionariesVector","db","dictionaryBatchesOffset","finishFooterBuffer","_footer","recordBatchesLength","dictionariesLength","fileBlock","createBlock","AsyncByteQueue","sync","ByteStream","ByteStreamSource","peek","AsyncByteStream","AsyncByteStreamSource","body","closed","cancel","RandomAccessFile","readAt","getInt32","nBytes","AsyncRandomAccessFile","file","_handle","stat","bytesRead","intAsHex","kPowersOfTen","BaseInt64","L","R","product","lessThan","_times","_plus","out_buffer","fromString","out","posn","group","parseInt","substr","multiple","times","plus","left","right","this_high","other_high","negate","startsWith","Int128","L0","L1","L2","L3","R0","R1","R2","R3","multiply","sums","VectorLoader","nodesIndex","buffersIndex","nextFieldNode","readNullBitmap","readData","readOffsets","visitMany","readTypeIds","readDictionary","nextBufferRange","JSONVectorLoader","sources","isTimestamp","isInt","isTime","isDate","convertArray","isDecimal","isBinary","isFixedSizeBinary","binaryDataFromJSON","isBool","isUtf8","joined","startTypeIdsVector","createTypeIdsVector","indexType","recordBatchFromJSON","fieldNodesFromJSON","fieldNodes","validity","buffersFromJSON","BufferRegion","schemaFieldsFromJSON","_schema","fromJSON","fieldChildrenFromJSON","customMetadataFromJSON","_metadata","indexTypeFromJSON","typeFromJSON","_Field","_Schema","_Message","_KeyValue","_FieldNode","_Endianness","_RecordBatch","_DictionaryBatch","header","_version","_headerType","_createHeader","_bodyLength","msg","message","messageHeaderFromJSON","_message","getRootAsMessage","decodeMessageHeader","isSchema","isRecordBatch","isDictionaryBatch","finishMessageBuffer","_nodes","_buffers","_isDelta","_id","decodeFieldNodes","batch","nodesLength","decodeBuffers","bufferRegions","buffersLength","decodeSchemaFields","fieldsLength","decodeFieldChildren","childrenLength","decodeCustomMetadata","entry","customMetadataLength","customMetadata","decodeIndexType","decodeFieldType","typeIdsArray","typeAssembler","childOffsets","childrenVectorOffset","createChildrenVector","metadataOffset","createCustomMetadataVector","dictType","dictMeta","fieldOffsets","startFieldsVector","fieldsVectorOffset","createFieldsVector","platformIsLittleEndian","Big","recordBatch","startNodesVector","nodesVectorOffset","startBuffersVector","b_","buffersVectorOffset","dictionaryBatch","createFieldNode","createBuffer","setInt16","invalidMessageType","nullMessage","invalidMessageMetadata","expected","actual","invalidMessageBodyLength","MessageReader","readMetadataLength","readMetadata","throwIfNull","readMessage","PADDING","metadataLength","AsyncMessageReader","JSONMessageReader","_body","_batchIndex","_dictionaryIndex","batches","flattenDataSources","MAGIC","checkForMagicArrowString","magicLength","magicAndPadding","magicX2AndPadding","VectorAssembler","_byteLength","_bufferRegions","RangeError","isNull","addBuffer","_nullV","assembler","vectorChildren","assembleResult","assembleFlatVector","assembleFlatListVector","firstOffset","lastOffset","assembleListVector","assembleNestedVector","maxChildTypeId","childLengths","shiftedOffsets","unshiftedOffsets","childLength","RecordBatchWriter","_position","_started","_sink","_dictionaryBlocks","_recordBatchBlocks","_dictionaryDeltaOffsets","autoDestroy","writeLegacyIpcFormat","_autoDestroy","_writeLegacyIpcFormat","writeAll","writeAllAsync","reset","sink","objectMode","_writeFooter","compareTo","_writeSchema","payload","_InternalEmptyPlaceholderRecordBatch","_writeRecordBatch","flatbufferSize","prefixSize","nPaddingBytes","_write","of","_writePadding","write","_writeMessage","assemble","_writeDictionaries","_writeBodyBuffers","padding","_writeDictionaryBatch","writableStrategy","readableStrategy","RecordBatchStreamWriter","writer","RecordBatchFileWriter","_writeMagic","noopBuf","nullBufs","bitmapLength","ensureSameLengthData","batchLength","l","batchData","_changeLengthAndBackfillNullBitmap","distributeColumnsIntoRecordBatches","distributeVectorsIntoRecordBatches","vecs","batchArgs","numBatches","numColumns","Number","POSITIVE_INFINITY","distributeChildData","uniformlyDistributeChunksAcrossRecordBatches","_objectWithoutProperties","excluded","sourceKeys","sourceSymbolKeys","propertyIsEnumerable","BaseVector","_bindDataAccessors","VectorName","isConcatSpreadable","BinaryVector","BoolVector","vectorFromValuesWithType","DateVector","DateDayVector","DateMillisecondVector","DecimalVector","DictionaryVector","FixedSizeBinaryVector","FixedSizeListVector","FloatVector","ArrowType","vectorTypeToDataType","InputType","arrayTypeToDataType","convertTo16Bit","Float16Vector","Float32Vector","Float64Vector","typeCtor","dataCtor","ctor","IntervalVector","IntervalDayTimeVector","IntervalYearMonthVector","IntVector","is64bit","convert32To64Bit","Int8Vector","Int16Vector","Int32Vector","Int64Vector","_values64","Uint8Vector","Uint16Vector","Uint32Vector","Uint64Vector","ListVector","MapVector","NullVector","StructVector","_row","bound","TimestampVector","TimestampSecondVector","TimestampMillisecondVector","TimestampMicrosecondVector","TimestampNanosecondVector","TimeVector","TimeSecondVector","TimeMillisecondVector","TimeMicrosecondVector","TimeNanosecondVector","UnionVector","DenseUnionVector","SparseUnionVector","Utf8Vector","partial0","partial2","GetVisitor","epochMillisecondsLongToMs","epochMillisecondsToDate","getVariableWidthBytes","getDateDay","epochDaysToMs","epochDaysToDate","getDateMillisecond","epochMillisecondsLongToDate","getNumeric","getFloat16","getBigInts","getTimestampSecond","getTimestampMillisecond","getTimestampMicrosecond","epochMicrosecondsLongToMs","getTimestampNanosecond","epochNanosecondsLongToMs","getTimeSecond","getTimeMillisecond","getTimeMicrosecond","getTimeNanosecond","getDenseUnion","getSparseUnion","getIntervalDayTime","getIntervalYearMonth","interval","int32s","_vector","decimal","IndexOfVisitor","indexOfValue","searchElement","indexOfNull","compare","indexOfUnion","IteratorVisitor","vectorIterator","getFn","getVisitor","nullByte","nullBit","nullableIterator","ToArrayVisitor","arrayOfVector","iteratorVisitor","variableWidthColumnErrorMessage","____","visitFields","newDataType","getVectorConstructor","transform","indexOfVisitor","toArrayVisitor","getByteWidth","byteWidthVisitor","wrapNullableSet","VectorCtor","partialType0","getColumnAt","getColumnIndex","Writer","nameToIndex","selectAt","columnName","newIdx","oldToNew","_f","_fs","empty","fromStruct","tableFromIterable","tableFromAsyncIterable","RecordBatchReader","isSync","open","opening","cols","_dictionaries","DictionaryCollector","collect","fs","vs","readAllSync","impl","_impl","isFile","isAsync","isStream","readRecordBatch","RecordBatchStreamReader","RecordBatchJSONReaderImpl","fromArrowJSON","fromFileHandle","fromAsyncByteStream","RecordBatchFileReader","RecordBatchFileReaderImpl","RecordBatchStreamReaderImpl","fromByteStream","readAllAsync","AsyncRecordBatchStreamReader","AsyncRecordBatchFileReader","RecordBatchReaderImpl","_recordBatchIndex","_loadVectors","_reader","shouldAutoDestroy","readSchema","_readNextMessageAndValidate","readMessageBody","_loadRecordBatch","_loadDictionaryBatch","AsyncRecordBatchStreamReaderImpl","_readFooter","_readDictionaryBatch","seek","AsyncRecordBatchFileReaderImpl","BuilderTransform","_numChunks","_finished","_bufferedSize","builderOptions","_controller","_builder","_getSize","chunkByteLength","readableHighWaterMark","writableHighWaterMark","ReadableStream","_maybeFlush","WritableStream","_writeValueAndReturnChunkSize","bufferedSize","controller","desiredSize","_enqueue","enqueue","Value","Literal","Equals","LTeq","GTeq","Not","ge","le","eq","Col","colidx","Predicate","expr","And","Or","ComparisonPredicate","_bindLitLit","_bindLitCol","_bindColLit","_bindColCol","CombinationPredicate","accum","_batch","rtrn","left_func","right_func","col","lit","col_func","lastDictionary","reverseLookup","lastKey","func","countBy","DataFrame","scan","scanReverse","predicate","FilteredDataFrame","batchIndex","numRows","count_by","countByteLength","ceil","log","counts","CountByResult","_predicate","isBound","and","util_bn_","util_int_","util_bit_","util_math_","util_buffer_","util_vector_","bm","hwm","pull","asyncIterableAsReadableDOMStream","iterableAsReadableDOMStream","queue","readable","ComponentMessageType","ArrowTable","indexBuffer","columnsBuffer","styler","_this","getCell","rowIndex","columnIndex","isBlankCell","headerRows","headerColumns","isIndexCell","isColumnsCell","classNames","content","dataColumnIndex","getContent","columnsTable","dataRowIndex","uuid","indexTable","displayValuesTable","dataTable","getColumnTypeId","nanosToDate","caption","displayValues","styles","numCols","rows","dataRows","dataColumns","serialize","nanos","__assign","Streamlit","API_VERSION","RENDER_EVENT","registeredMessageListener","setComponentReady","onMessageEvent","sendBackMsg","COMPONENT_READY","apiVersion","setFrameHeight","height","document","scrollHeight","lastFrameHeight","SET_FRAME_HEIGHT","setComponentValue","dataType","isBigIntArray","isTypedArray","SET_COMPONENT_VALUE","onRenderMessage","dataframeArgs","argsDataframeToObject","disabled","theme","_injectTheme","eventData","detail","argsDataframe","argsDataframeArrow","_a","toArrowTable","fromEntries","df","postMessage","isStreamlitMessage","style","createElement","head","appendChild","innerHTML","primaryColor","backgroundColor","secondaryBackgroundColor","textColor","font","__extends","extendStatics","__","_super","StreamlitComponentBase","componentDidMount","componentDidUpdate","React","PureComponent","reactIs","REACT_STATICS","childContextTypes","contextType","contextTypes","defaultProps","displayName","getDefaultProps","getDerivedStateFromError","getDerivedStateFromProps","mixins","propTypes","KNOWN_STATICS","caller","callee","arity","MEMO_STATICS","TYPE_STATICS","getStatics","component","isMemo","ForwardRef","render","Memo","getOwnPropertyNames","objectPrototype","hoistNonReactStatics","targetComponent","sourceComponent","blacklist","inheritedComponent","targetStatics","sourceStatics","g","q","w","z","$$typeof","A","AsyncMode","ConcurrentMode","ContextConsumer","ContextProvider","Element","Fragment","Lazy","Portal","Profiler","StrictMode","Suspense","isAsyncMode","isConcurrentMode","isContextConsumer","isContextProvider","isElement","isForwardRef","isFragment","isLazy","isPortal","isProfiler","isStrictMode","isSuspense","isValidElementType","typeOf","B","C","encodeURIComponent","D","isMounted","enqueueForceUpdate","enqueueReplaceState","enqueueSetState","E","refs","updater","G","H","isReactComponent","setState","forceUpdate","I","isPureReactComponent","J","K","ref","__self","__source","M","_owner","O","P","Q","keyPrefix","S","V","U","replace","escape","W","aa","X","N","Y","Z","ba","ReactCurrentDispatcher","ReactCurrentBatchConfig","suspense","ReactCurrentOwner","IsSomeRendererActing","Children","only","Component","__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED","cloneElement","createContext","_calculateChangedBits","_currentValue","_currentValue2","_threadCount","Provider","Consumer","_context","createFactory","createRef","forwardRef","isValidElement","lazy","_ctor","_status","_result","useCallback","useContext","useDebugValue","useEffect","useImperativeHandle","useLayoutEffect","useMemo","useReducer","useRef","useState","propIsEnumerable","toObject","test1","test2","test3","split","letter","shouldUseNative","runtime","Op","hasOwn","$Symbol","iteratorSymbol","asyncIteratorSymbol","toStringTagSymbol","define","innerFn","outerFn","tryLocsList","protoGenerator","Generator","generator","Context","state","method","doneResult","delegate","delegateResult","maybeInvokeDelegate","ContinueSentinel","sent","_sent","dispatchException","abrupt","record","tryCatch","makeInvokeMethod","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","getProto","NativeIteratorPrototype","Gp","defineIteratorMethods","AsyncIterator","PromiseImpl","previousPromise","callInvokeWithMethodAndArg","invoke","__await","unwrapped","resultName","nextLoc","pushTryEntry","locs","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","resetTryEntry","completion","iterable","iteratorMethod","isGeneratorFunction","genFun","mark","awrap","async","skipTempReset","charAt","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","thrown","delegateYield","regeneratorRuntime","accidentalStrictMode","globalThis"],"mappings":"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","file":"static/js/2.6cbb97da.chunk.js","sourcesContent":["function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nexport default function _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}","export default function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}","module.exports = require(\"regenerator-runtime\");\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react.production.min.js');\n} else {\n  module.exports = require('./cjs/react.development.js');\n}\n","/**\n * @typedef {object} PrivateData\n * @property {EventTarget} eventTarget The event target.\n * @property {{type:string}} event The original event object.\n * @property {number} eventPhase The current event phase.\n * @property {EventTarget|null} currentTarget The current event target.\n * @property {boolean} canceled The flag to prevent default.\n * @property {boolean} stopped The flag to stop propagation.\n * @property {boolean} immediateStopped The flag to stop propagation immediately.\n * @property {Function|null} passiveListener The listener if the current listener is passive. Otherwise this is null.\n * @property {number} timeStamp The unix time.\n * @private\n */\n\n/**\n * Private data for event wrappers.\n * @type {WeakMap<Event, PrivateData>}\n * @private\n */\nconst privateData = new WeakMap()\n\n/**\n * Cache for wrapper classes.\n * @type {WeakMap<Object, Function>}\n * @private\n */\nconst wrappers = new WeakMap()\n\n/**\n * Get private data.\n * @param {Event} event The event object to get private data.\n * @returns {PrivateData} The private data of the event.\n * @private\n */\nfunction pd(event) {\n    const retv = privateData.get(event)\n    console.assert(\n        retv != null,\n        \"'this' is expected an Event object, but got\",\n        event\n    )\n    return retv\n}\n\n/**\n * https://dom.spec.whatwg.org/#set-the-canceled-flag\n * @param data {PrivateData} private data.\n */\nfunction setCancelFlag(data) {\n    if (data.passiveListener != null) {\n        if (\n            typeof console !== \"undefined\" &&\n            typeof console.error === \"function\"\n        ) {\n            console.error(\n                \"Unable to preventDefault inside passive event listener invocation.\",\n                data.passiveListener\n            )\n        }\n        return\n    }\n    if (!data.event.cancelable) {\n        return\n    }\n\n    data.canceled = true\n    if (typeof data.event.preventDefault === \"function\") {\n        data.event.preventDefault()\n    }\n}\n\n/**\n * @see https://dom.spec.whatwg.org/#interface-event\n * @private\n */\n/**\n * The event wrapper.\n * @constructor\n * @param {EventTarget} eventTarget The event target of this dispatching.\n * @param {Event|{type:string}} event The original event to wrap.\n */\nfunction Event(eventTarget, event) {\n    privateData.set(this, {\n        eventTarget,\n        event,\n        eventPhase: 2,\n        currentTarget: eventTarget,\n        canceled: false,\n        stopped: false,\n        immediateStopped: false,\n        passiveListener: null,\n        timeStamp: event.timeStamp || Date.now(),\n    })\n\n    // https://heycam.github.io/webidl/#Unforgeable\n    Object.defineProperty(this, \"isTrusted\", { value: false, enumerable: true })\n\n    // Define accessors\n    const keys = Object.keys(event)\n    for (let i = 0; i < keys.length; ++i) {\n        const key = keys[i]\n        if (!(key in this)) {\n            Object.defineProperty(this, key, defineRedirectDescriptor(key))\n        }\n    }\n}\n\n// Should be enumerable, but class methods are not enumerable.\nEvent.prototype = {\n    /**\n     * The type of this event.\n     * @type {string}\n     */\n    get type() {\n        return pd(this).event.type\n    },\n\n    /**\n     * The target of this event.\n     * @type {EventTarget}\n     */\n    get target() {\n        return pd(this).eventTarget\n    },\n\n    /**\n     * The target of this event.\n     * @type {EventTarget}\n     */\n    get currentTarget() {\n        return pd(this).currentTarget\n    },\n\n    /**\n     * @returns {EventTarget[]} The composed path of this event.\n     */\n    composedPath() {\n        const currentTarget = pd(this).currentTarget\n        if (currentTarget == null) {\n            return []\n        }\n        return [currentTarget]\n    },\n\n    /**\n     * Constant of NONE.\n     * @type {number}\n     */\n    get NONE() {\n        return 0\n    },\n\n    /**\n     * Constant of CAPTURING_PHASE.\n     * @type {number}\n     */\n    get CAPTURING_PHASE() {\n        return 1\n    },\n\n    /**\n     * Constant of AT_TARGET.\n     * @type {number}\n     */\n    get AT_TARGET() {\n        return 2\n    },\n\n    /**\n     * Constant of BUBBLING_PHASE.\n     * @type {number}\n     */\n    get BUBBLING_PHASE() {\n        return 3\n    },\n\n    /**\n     * The target of this event.\n     * @type {number}\n     */\n    get eventPhase() {\n        return pd(this).eventPhase\n    },\n\n    /**\n     * Stop event bubbling.\n     * @returns {void}\n     */\n    stopPropagation() {\n        const data = pd(this)\n\n        data.stopped = true\n        if (typeof data.event.stopPropagation === \"function\") {\n            data.event.stopPropagation()\n        }\n    },\n\n    /**\n     * Stop event bubbling.\n     * @returns {void}\n     */\n    stopImmediatePropagation() {\n        const data = pd(this)\n\n        data.stopped = true\n        data.immediateStopped = true\n        if (typeof data.event.stopImmediatePropagation === \"function\") {\n            data.event.stopImmediatePropagation()\n        }\n    },\n\n    /**\n     * The flag to be bubbling.\n     * @type {boolean}\n     */\n    get bubbles() {\n        return Boolean(pd(this).event.bubbles)\n    },\n\n    /**\n     * The flag to be cancelable.\n     * @type {boolean}\n     */\n    get cancelable() {\n        return Boolean(pd(this).event.cancelable)\n    },\n\n    /**\n     * Cancel this event.\n     * @returns {void}\n     */\n    preventDefault() {\n        setCancelFlag(pd(this))\n    },\n\n    /**\n     * The flag to indicate cancellation state.\n     * @type {boolean}\n     */\n    get defaultPrevented() {\n        return pd(this).canceled\n    },\n\n    /**\n     * The flag to be composed.\n     * @type {boolean}\n     */\n    get composed() {\n        return Boolean(pd(this).event.composed)\n    },\n\n    /**\n     * The unix time of this event.\n     * @type {number}\n     */\n    get timeStamp() {\n        return pd(this).timeStamp\n    },\n\n    /**\n     * The target of this event.\n     * @type {EventTarget}\n     * @deprecated\n     */\n    get srcElement() {\n        return pd(this).eventTarget\n    },\n\n    /**\n     * The flag to stop event bubbling.\n     * @type {boolean}\n     * @deprecated\n     */\n    get cancelBubble() {\n        return pd(this).stopped\n    },\n    set cancelBubble(value) {\n        if (!value) {\n            return\n        }\n        const data = pd(this)\n\n        data.stopped = true\n        if (typeof data.event.cancelBubble === \"boolean\") {\n            data.event.cancelBubble = true\n        }\n    },\n\n    /**\n     * The flag to indicate cancellation state.\n     * @type {boolean}\n     * @deprecated\n     */\n    get returnValue() {\n        return !pd(this).canceled\n    },\n    set returnValue(value) {\n        if (!value) {\n            setCancelFlag(pd(this))\n        }\n    },\n\n    /**\n     * Initialize this event object. But do nothing under event dispatching.\n     * @param {string} type The event type.\n     * @param {boolean} [bubbles=false] The flag to be possible to bubble up.\n     * @param {boolean} [cancelable=false] The flag to be possible to cancel.\n     * @deprecated\n     */\n    initEvent() {\n        // Do nothing.\n    },\n}\n\n// `constructor` is not enumerable.\nObject.defineProperty(Event.prototype, \"constructor\", {\n    value: Event,\n    configurable: true,\n    writable: true,\n})\n\n// Ensure `event instanceof window.Event` is `true`.\nif (typeof window !== \"undefined\" && typeof window.Event !== \"undefined\") {\n    Object.setPrototypeOf(Event.prototype, window.Event.prototype)\n\n    // Make association for wrappers.\n    wrappers.set(window.Event.prototype, Event)\n}\n\n/**\n * Get the property descriptor to redirect a given property.\n * @param {string} key Property name to define property descriptor.\n * @returns {PropertyDescriptor} The property descriptor to redirect the property.\n * @private\n */\nfunction defineRedirectDescriptor(key) {\n    return {\n        get() {\n            return pd(this).event[key]\n        },\n        set(value) {\n            pd(this).event[key] = value\n        },\n        configurable: true,\n        enumerable: true,\n    }\n}\n\n/**\n * Get the property descriptor to call a given method property.\n * @param {string} key Property name to define property descriptor.\n * @returns {PropertyDescriptor} The property descriptor to call the method property.\n * @private\n */\nfunction defineCallDescriptor(key) {\n    return {\n        value() {\n            const event = pd(this).event\n            return event[key].apply(event, arguments)\n        },\n        configurable: true,\n        enumerable: true,\n    }\n}\n\n/**\n * Define new wrapper class.\n * @param {Function} BaseEvent The base wrapper class.\n * @param {Object} proto The prototype of the original event.\n * @returns {Function} The defined wrapper class.\n * @private\n */\nfunction defineWrapper(BaseEvent, proto) {\n    const keys = Object.keys(proto)\n    if (keys.length === 0) {\n        return BaseEvent\n    }\n\n    /** CustomEvent */\n    function CustomEvent(eventTarget, event) {\n        BaseEvent.call(this, eventTarget, event)\n    }\n\n    CustomEvent.prototype = Object.create(BaseEvent.prototype, {\n        constructor: { value: CustomEvent, configurable: true, writable: true },\n    })\n\n    // Define accessors.\n    for (let i = 0; i < keys.length; ++i) {\n        const key = keys[i]\n        if (!(key in BaseEvent.prototype)) {\n            const descriptor = Object.getOwnPropertyDescriptor(proto, key)\n            const isFunc = typeof descriptor.value === \"function\"\n            Object.defineProperty(\n                CustomEvent.prototype,\n                key,\n                isFunc\n                    ? defineCallDescriptor(key)\n                    : defineRedirectDescriptor(key)\n            )\n        }\n    }\n\n    return CustomEvent\n}\n\n/**\n * Get the wrapper class of a given prototype.\n * @param {Object} proto The prototype of the original event to get its wrapper.\n * @returns {Function} The wrapper class.\n * @private\n */\nfunction getWrapper(proto) {\n    if (proto == null || proto === Object.prototype) {\n        return Event\n    }\n\n    let wrapper = wrappers.get(proto)\n    if (wrapper == null) {\n        wrapper = defineWrapper(getWrapper(Object.getPrototypeOf(proto)), proto)\n        wrappers.set(proto, wrapper)\n    }\n    return wrapper\n}\n\n/**\n * Wrap a given event to management a dispatching.\n * @param {EventTarget} eventTarget The event target of this dispatching.\n * @param {Object} event The event to wrap.\n * @returns {Event} The wrapper instance.\n * @private\n */\nexport function wrapEvent(eventTarget, event) {\n    const Wrapper = getWrapper(Object.getPrototypeOf(event))\n    return new Wrapper(eventTarget, event)\n}\n\n/**\n * Get the immediateStopped flag of a given event.\n * @param {Event} event The event to get.\n * @returns {boolean} The flag to stop propagation immediately.\n * @private\n */\nexport function isStopped(event) {\n    return pd(event).immediateStopped\n}\n\n/**\n * Set the current event phase of a given event.\n * @param {Event} event The event to set current target.\n * @param {number} eventPhase New event phase.\n * @returns {void}\n * @private\n */\nexport function setEventPhase(event, eventPhase) {\n    pd(event).eventPhase = eventPhase\n}\n\n/**\n * Set the current target of a given event.\n * @param {Event} event The event to set current target.\n * @param {EventTarget|null} currentTarget New current target.\n * @returns {void}\n * @private\n */\nexport function setCurrentTarget(event, currentTarget) {\n    pd(event).currentTarget = currentTarget\n}\n\n/**\n * Set a passive listener of a given event.\n * @param {Event} event The event to set current target.\n * @param {Function|null} passiveListener New passive listener.\n * @returns {void}\n * @private\n */\nexport function setPassiveListener(event, passiveListener) {\n    pd(event).passiveListener = passiveListener\n}\n","import {\n    isStopped,\n    setCurrentTarget,\n    setEventPhase,\n    setPassiveListener,\n    wrapEvent,\n} from \"./event.mjs\"\n\n/**\n * @typedef {object} ListenerNode\n * @property {Function} listener\n * @property {1|2|3} listenerType\n * @property {boolean} passive\n * @property {boolean} once\n * @property {ListenerNode|null} next\n * @private\n */\n\n/**\n * @type {WeakMap<object, Map<string, ListenerNode>>}\n * @private\n */\nconst listenersMap = new WeakMap()\n\n// Listener types\nconst CAPTURE = 1\nconst BUBBLE = 2\nconst ATTRIBUTE = 3\n\n/**\n * Check whether a given value is an object or not.\n * @param {any} x The value to check.\n * @returns {boolean} `true` if the value is an object.\n */\nfunction isObject(x) {\n    return x !== null && typeof x === \"object\" //eslint-disable-line no-restricted-syntax\n}\n\n/**\n * Get listeners.\n * @param {EventTarget} eventTarget The event target to get.\n * @returns {Map<string, ListenerNode>} The listeners.\n * @private\n */\nfunction getListeners(eventTarget) {\n    const listeners = listenersMap.get(eventTarget)\n    if (listeners == null) {\n        throw new TypeError(\n            \"'this' is expected an EventTarget object, but got another value.\"\n        )\n    }\n    return listeners\n}\n\n/**\n * Get the property descriptor for the event attribute of a given event.\n * @param {string} eventName The event name to get property descriptor.\n * @returns {PropertyDescriptor} The property descriptor.\n * @private\n */\nfunction defineEventAttributeDescriptor(eventName) {\n    return {\n        get() {\n            const listeners = getListeners(this)\n            let node = listeners.get(eventName)\n            while (node != null) {\n                if (node.listenerType === ATTRIBUTE) {\n                    return node.listener\n                }\n                node = node.next\n            }\n            return null\n        },\n\n        set(listener) {\n            if (typeof listener !== \"function\" && !isObject(listener)) {\n                listener = null // eslint-disable-line no-param-reassign\n            }\n            const listeners = getListeners(this)\n\n            // Traverse to the tail while removing old value.\n            let prev = null\n            let node = listeners.get(eventName)\n            while (node != null) {\n                if (node.listenerType === ATTRIBUTE) {\n                    // Remove old value.\n                    if (prev !== null) {\n                        prev.next = node.next\n                    } else if (node.next !== null) {\n                        listeners.set(eventName, node.next)\n                    } else {\n                        listeners.delete(eventName)\n                    }\n                } else {\n                    prev = node\n                }\n\n                node = node.next\n            }\n\n            // Add new value.\n            if (listener !== null) {\n                const newNode = {\n                    listener,\n                    listenerType: ATTRIBUTE,\n                    passive: false,\n                    once: false,\n                    next: null,\n                }\n                if (prev === null) {\n                    listeners.set(eventName, newNode)\n                } else {\n                    prev.next = newNode\n                }\n            }\n        },\n        configurable: true,\n        enumerable: true,\n    }\n}\n\n/**\n * Define an event attribute (e.g. `eventTarget.onclick`).\n * @param {Object} eventTargetPrototype The event target prototype to define an event attrbite.\n * @param {string} eventName The event name to define.\n * @returns {void}\n */\nfunction defineEventAttribute(eventTargetPrototype, eventName) {\n    Object.defineProperty(\n        eventTargetPrototype,\n        `on${eventName}`,\n        defineEventAttributeDescriptor(eventName)\n    )\n}\n\n/**\n * Define a custom EventTarget with event attributes.\n * @param {string[]} eventNames Event names for event attributes.\n * @returns {EventTarget} The custom EventTarget.\n * @private\n */\nfunction defineCustomEventTarget(eventNames) {\n    /** CustomEventTarget */\n    function CustomEventTarget() {\n        EventTarget.call(this)\n    }\n\n    CustomEventTarget.prototype = Object.create(EventTarget.prototype, {\n        constructor: {\n            value: CustomEventTarget,\n            configurable: true,\n            writable: true,\n        },\n    })\n\n    for (let i = 0; i < eventNames.length; ++i) {\n        defineEventAttribute(CustomEventTarget.prototype, eventNames[i])\n    }\n\n    return CustomEventTarget\n}\n\n/**\n * EventTarget.\n *\n * - This is constructor if no arguments.\n * - This is a function which returns a CustomEventTarget constructor if there are arguments.\n *\n * For example:\n *\n *     class A extends EventTarget {}\n *     class B extends EventTarget(\"message\") {}\n *     class C extends EventTarget(\"message\", \"error\") {}\n *     class D extends EventTarget([\"message\", \"error\"]) {}\n */\nfunction EventTarget() {\n    /*eslint-disable consistent-return */\n    if (this instanceof EventTarget) {\n        listenersMap.set(this, new Map())\n        return\n    }\n    if (arguments.length === 1 && Array.isArray(arguments[0])) {\n        return defineCustomEventTarget(arguments[0])\n    }\n    if (arguments.length > 0) {\n        const types = new Array(arguments.length)\n        for (let i = 0; i < arguments.length; ++i) {\n            types[i] = arguments[i]\n        }\n        return defineCustomEventTarget(types)\n    }\n    throw new TypeError(\"Cannot call a class as a function\")\n    /*eslint-enable consistent-return */\n}\n\n// Should be enumerable, but class methods are not enumerable.\nEventTarget.prototype = {\n    /**\n     * Add a given listener to this event target.\n     * @param {string} eventName The event name to add.\n     * @param {Function} listener The listener to add.\n     * @param {boolean|{capture?:boolean,passive?:boolean,once?:boolean}} [options] The options for this listener.\n     * @returns {void}\n     */\n    addEventListener(eventName, listener, options) {\n        if (listener == null) {\n            return\n        }\n        if (typeof listener !== \"function\" && !isObject(listener)) {\n            throw new TypeError(\"'listener' should be a function or an object.\")\n        }\n\n        const listeners = getListeners(this)\n        const optionsIsObj = isObject(options)\n        const capture = optionsIsObj\n            ? Boolean(options.capture)\n            : Boolean(options)\n        const listenerType = capture ? CAPTURE : BUBBLE\n        const newNode = {\n            listener,\n            listenerType,\n            passive: optionsIsObj && Boolean(options.passive),\n            once: optionsIsObj && Boolean(options.once),\n            next: null,\n        }\n\n        // Set it as the first node if the first node is null.\n        let node = listeners.get(eventName)\n        if (node === undefined) {\n            listeners.set(eventName, newNode)\n            return\n        }\n\n        // Traverse to the tail while checking duplication..\n        let prev = null\n        while (node != null) {\n            if (\n                node.listener === listener &&\n                node.listenerType === listenerType\n            ) {\n                // Should ignore duplication.\n                return\n            }\n            prev = node\n            node = node.next\n        }\n\n        // Add it.\n        prev.next = newNode\n    },\n\n    /**\n     * Remove a given listener from this event target.\n     * @param {string} eventName The event name to remove.\n     * @param {Function} listener The listener to remove.\n     * @param {boolean|{capture?:boolean,passive?:boolean,once?:boolean}} [options] The options for this listener.\n     * @returns {void}\n     */\n    removeEventListener(eventName, listener, options) {\n        if (listener == null) {\n            return\n        }\n\n        const listeners = getListeners(this)\n        const capture = isObject(options)\n            ? Boolean(options.capture)\n            : Boolean(options)\n        const listenerType = capture ? CAPTURE : BUBBLE\n\n        let prev = null\n        let node = listeners.get(eventName)\n        while (node != null) {\n            if (\n                node.listener === listener &&\n                node.listenerType === listenerType\n            ) {\n                if (prev !== null) {\n                    prev.next = node.next\n                } else if (node.next !== null) {\n                    listeners.set(eventName, node.next)\n                } else {\n                    listeners.delete(eventName)\n                }\n                return\n            }\n\n            prev = node\n            node = node.next\n        }\n    },\n\n    /**\n     * Dispatch a given event.\n     * @param {Event|{type:string}} event The event to dispatch.\n     * @returns {boolean} `false` if canceled.\n     */\n    dispatchEvent(event) {\n        if (event == null || typeof event.type !== \"string\") {\n            throw new TypeError('\"event.type\" should be a string.')\n        }\n\n        // If listeners aren't registered, terminate.\n        const listeners = getListeners(this)\n        const eventName = event.type\n        let node = listeners.get(eventName)\n        if (node == null) {\n            return true\n        }\n\n        // Since we cannot rewrite several properties, so wrap object.\n        const wrappedEvent = wrapEvent(this, event)\n\n        // This doesn't process capturing phase and bubbling phase.\n        // This isn't participating in a tree.\n        let prev = null\n        while (node != null) {\n            // Remove this listener if it's once\n            if (node.once) {\n                if (prev !== null) {\n                    prev.next = node.next\n                } else if (node.next !== null) {\n                    listeners.set(eventName, node.next)\n                } else {\n                    listeners.delete(eventName)\n                }\n            } else {\n                prev = node\n            }\n\n            // Call this listener\n            setPassiveListener(\n                wrappedEvent,\n                node.passive ? node.listener : null\n            )\n            if (typeof node.listener === \"function\") {\n                try {\n                    node.listener.call(this, wrappedEvent)\n                } catch (err) {\n                    if (\n                        typeof console !== \"undefined\" &&\n                        typeof console.error === \"function\"\n                    ) {\n                        console.error(err)\n                    }\n                }\n            } else if (\n                node.listenerType !== ATTRIBUTE &&\n                typeof node.listener.handleEvent === \"function\"\n            ) {\n                node.listener.handleEvent(wrappedEvent)\n            }\n\n            // Break if `event.stopImmediatePropagation` was called.\n            if (isStopped(wrappedEvent)) {\n                break\n            }\n\n            node = node.next\n        }\n        setPassiveListener(wrappedEvent, null)\n        setEventPhase(wrappedEvent, 0)\n        setCurrentTarget(wrappedEvent, null)\n\n        return !wrappedEvent.defaultPrevented\n    },\n}\n\n// `constructor` is not enumerable.\nObject.defineProperty(EventTarget.prototype, \"constructor\", {\n    value: EventTarget,\n    configurable: true,\n    writable: true,\n})\n\n// Ensure `eventTarget instanceof window.EventTarget` is `true`.\nif (\n    typeof window !== \"undefined\" &&\n    typeof window.EventTarget !== \"undefined\"\n) {\n    Object.setPrototypeOf(EventTarget.prototype, window.EventTarget.prototype)\n}\n\nexport { defineEventAttribute, EventTarget }\nexport default EventTarget\n","export default function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}","import arrayLikeToArray from \"./arrayLikeToArray\";\nexport default function _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(n);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}","import unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nexport default function _createForOfIteratorHelper(o) {\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (o = unsupportedIterableToArray(o))) {\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var it,\n      normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = o[Symbol.iterator]();\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}","import arrayWithHoles from \"./arrayWithHoles\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nimport nonIterableRest from \"./nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","export default function _AwaitValue(value) {\n  this.wrapped = value;\n}","import AwaitValue from \"./AwaitValue\";\nexport default function _awaitAsyncGenerator(value) {\n  return new AwaitValue(value);\n}","import AwaitValue from \"./AwaitValue\";\nexport default function AsyncGenerator(gen) {\n  var front, back;\n\n  function send(key, arg) {\n    return new Promise(function (resolve, reject) {\n      var request = {\n        key: key,\n        arg: arg,\n        resolve: resolve,\n        reject: reject,\n        next: null\n      };\n\n      if (back) {\n        back = back.next = request;\n      } else {\n        front = back = request;\n        resume(key, arg);\n      }\n    });\n  }\n\n  function resume(key, arg) {\n    try {\n      var result = gen[key](arg);\n      var value = result.value;\n      var wrappedAwait = value instanceof AwaitValue;\n      Promise.resolve(wrappedAwait ? value.wrapped : value).then(function (arg) {\n        if (wrappedAwait) {\n          resume(key === \"return\" ? \"return\" : \"next\", arg);\n          return;\n        }\n\n        settle(result.done ? \"return\" : \"normal\", arg);\n      }, function (err) {\n        resume(\"throw\", err);\n      });\n    } catch (err) {\n      settle(\"throw\", err);\n    }\n  }\n\n  function settle(type, value) {\n    switch (type) {\n      case \"return\":\n        front.resolve({\n          value: value,\n          done: true\n        });\n        break;\n\n      case \"throw\":\n        front.reject(value);\n        break;\n\n      default:\n        front.resolve({\n          value: value,\n          done: false\n        });\n        break;\n    }\n\n    front = front.next;\n\n    if (front) {\n      resume(front.key, front.arg);\n    } else {\n      back = null;\n    }\n  }\n\n  this._invoke = send;\n\n  if (typeof gen[\"return\"] !== \"function\") {\n    this[\"return\"] = undefined;\n  }\n}\n\nif (typeof Symbol === \"function\" && Symbol.asyncIterator) {\n  AsyncGenerator.prototype[Symbol.asyncIterator] = function () {\n    return this;\n  };\n}\n\nAsyncGenerator.prototype.next = function (arg) {\n  return this._invoke(\"next\", arg);\n};\n\nAsyncGenerator.prototype[\"throw\"] = function (arg) {\n  return this._invoke(\"throw\", arg);\n};\n\nAsyncGenerator.prototype[\"return\"] = function (arg) {\n  return this._invoke(\"return\", arg);\n};","import AsyncGenerator from \"./AsyncGenerator\";\nexport default function _wrapAsyncGenerator(fn) {\n  return function () {\n    return new AsyncGenerator(fn.apply(this, arguments));\n  };\n}","export default function _asyncGeneratorDelegate(inner, awaitWrap) {\n  var iter = {},\n      waiting = false;\n\n  function pump(key, value) {\n    waiting = true;\n    value = new Promise(function (resolve) {\n      resolve(inner[key](value));\n    });\n    return {\n      done: false,\n      value: awaitWrap(value)\n    };\n  }\n\n  ;\n\n  if (typeof Symbol === \"function\" && Symbol.iterator) {\n    iter[Symbol.iterator] = function () {\n      return this;\n    };\n  }\n\n  iter.next = function (value) {\n    if (waiting) {\n      waiting = false;\n      return value;\n    }\n\n    return pump(\"next\", value);\n  };\n\n  if (typeof inner[\"throw\"] === \"function\") {\n    iter[\"throw\"] = function (value) {\n      if (waiting) {\n        waiting = false;\n        throw value;\n      }\n\n      return pump(\"throw\", value);\n    };\n  }\n\n  if (typeof inner[\"return\"] === \"function\") {\n    iter[\"return\"] = function (value) {\n      if (waiting) {\n        waiting = false;\n        return value;\n      }\n\n      return pump(\"return\", value);\n    };\n  }\n\n  return iter;\n}","/// @file\n/// @addtogroup flatbuffers_javascript_api\n/// @{\n/// @cond FLATBUFFERS_INTERNAL\n\n/**\n * @fileoverview\n *\n * Need to suppress 'global this' error so the Node.js export line doesn't cause\n * closure compile to error out.\n * @suppress {globalThis}\n */\n\n/**\n * @const\n * @namespace\n */\nvar flatbuffers = {};\n\n/**\n * @typedef {number}\n */\nflatbuffers.Offset;\n\n/**\n * @typedef {{\n *   bb: flatbuffers.ByteBuffer,\n *   bb_pos: number\n * }}\n */\nflatbuffers.Table;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZEOF_SHORT = 2;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZEOF_INT = 4;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.FILE_IDENTIFIER_LENGTH = 4;\n\n/**\n * @enum {number}\n */\nflatbuffers.Encoding = {\n  UTF8_BYTES: 1,\n  UTF16_STRING: 2\n};\n\n/**\n * @type {Int32Array}\n * @const\n */\nflatbuffers.int32 = new Int32Array(2);\n\n/**\n * @type {Float32Array}\n * @const\n */\nflatbuffers.float32 = new Float32Array(flatbuffers.int32.buffer);\n\n/**\n * @type {Float64Array}\n * @const\n */\nflatbuffers.float64 = new Float64Array(flatbuffers.int32.buffer);\n\n/**\n * @type {boolean}\n * @const\n */\nflatbuffers.isLittleEndian = new Uint16Array(new Uint8Array([1, 0]).buffer)[0] === 1;\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * @constructor\n * @param {number} low\n * @param {number} high\n */\nflatbuffers.Long = function(low, high) {\n  /**\n   * @type {number}\n   * @const\n   */\n  this.low = low | 0;\n\n  /**\n   * @type {number}\n   * @const\n   */\n  this.high = high | 0;\n};\n\n/**\n * @param {number} low\n * @param {number} high\n * @returns {flatbuffers.Long}\n */\nflatbuffers.Long.create = function(low, high) {\n  // Special-case zero to avoid GC overhead for default values\n  return low == 0 && high == 0 ? flatbuffers.Long.ZERO : new flatbuffers.Long(low, high);\n};\n\n/**\n * @returns {number}\n */\nflatbuffers.Long.prototype.toFloat64 = function() {\n  return (this.low >>> 0) + this.high * 0x100000000;\n};\n\n/**\n * @param {flatbuffers.Long} other\n * @returns {boolean}\n */\nflatbuffers.Long.prototype.equals = function(other) {\n  return this.low == other.low && this.high == other.high;\n};\n\n/**\n * @type {flatbuffers.Long}\n * @const\n */\nflatbuffers.Long.ZERO = new flatbuffers.Long(0, 0);\n\n/// @endcond\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Create a FlatBufferBuilder.\n *\n * @constructor\n * @param {number=} opt_initial_size\n */\nflatbuffers.Builder = function(opt_initial_size) {\n  if (!opt_initial_size) {\n    var initial_size = 1024;\n  } else {\n    var initial_size = opt_initial_size;\n  }\n\n  /**\n   * @type {flatbuffers.ByteBuffer}\n   * @private\n   */\n  this.bb = flatbuffers.ByteBuffer.allocate(initial_size);\n\n  /**\n   * Remaining space in the ByteBuffer.\n   *\n   * @type {number}\n   * @private\n   */\n  this.space = initial_size;\n\n  /**\n   * Minimum alignment encountered so far.\n   *\n   * @type {number}\n   * @private\n   */\n  this.minalign = 1;\n\n  /**\n   * The vtable for the current table.\n   *\n   * @type {Array.<number>}\n   * @private\n   */\n  this.vtable = null;\n\n  /**\n   * The amount of fields we're actually using.\n   *\n   * @type {number}\n   * @private\n   */\n  this.vtable_in_use = 0;\n\n  /**\n   * Whether we are currently serializing a table.\n   *\n   * @type {boolean}\n   * @private\n   */\n  this.isNested = false;\n\n  /**\n   * Starting offset of the current struct/table.\n   *\n   * @type {number}\n   * @private\n   */\n  this.object_start = 0;\n\n  /**\n   * List of offsets of all vtables.\n   *\n   * @type {Array.<number>}\n   * @private\n   */\n  this.vtables = [];\n\n  /**\n   * For the current vector being built.\n   *\n   * @type {number}\n   * @private\n   */\n  this.vector_num_elems = 0;\n\n  /**\n   * False omits default values from the serialized data\n   *\n   * @type {boolean}\n   * @private\n   */\n  this.force_defaults = false;\n};\n\nflatbuffers.Builder.prototype.clear = function() {\n  this.bb.clear();\n  this.space = this.bb.capacity();\n  this.minalign = 1;\n  this.vtable = null;\n  this.vtable_in_use = 0;\n  this.isNested = false;\n  this.object_start = 0;\n  this.vtables = [];\n  this.vector_num_elems = 0;\n  this.force_defaults = false;\n};\n\n/**\n * In order to save space, fields that are set to their default value\n * don't get serialized into the buffer. Forcing defaults provides a\n * way to manually disable this optimization.\n *\n * @param {boolean} forceDefaults true always serializes default values\n */\nflatbuffers.Builder.prototype.forceDefaults = function(forceDefaults) {\n  this.force_defaults = forceDefaults;\n};\n\n/**\n * Get the ByteBuffer representing the FlatBuffer. Only call this after you've\n * called finish(). The actual data starts at the ByteBuffer's current position,\n * not necessarily at 0.\n *\n * @returns {flatbuffers.ByteBuffer}\n */\nflatbuffers.Builder.prototype.dataBuffer = function() {\n  return this.bb;\n};\n\n/**\n * Get the bytes representing the FlatBuffer. Only call this after you've\n * called finish().\n *\n * @returns {Uint8Array}\n */\nflatbuffers.Builder.prototype.asUint8Array = function() {\n  return this.bb.bytes().subarray(this.bb.position(), this.bb.position() + this.offset());\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Prepare to write an element of `size` after `additional_bytes` have been\n * written, e.g. if you write a string, you need to align such the int length\n * field is aligned to 4 bytes, and the string data follows it directly. If all\n * you need to do is alignment, `additional_bytes` will be 0.\n *\n * @param {number} size This is the of the new element to write\n * @param {number} additional_bytes The padding size\n */\nflatbuffers.Builder.prototype.prep = function(size, additional_bytes) {\n  // Track the biggest thing we've ever aligned to.\n  if (size > this.minalign) {\n    this.minalign = size;\n  }\n\n  // Find the amount of alignment needed such that `size` is properly\n  // aligned after `additional_bytes`\n  var align_size = ((~(this.bb.capacity() - this.space + additional_bytes)) + 1) & (size - 1);\n\n  // Reallocate the buffer if needed.\n  while (this.space < align_size + size + additional_bytes) {\n    var old_buf_size = this.bb.capacity();\n    this.bb = flatbuffers.Builder.growByteBuffer(this.bb);\n    this.space += this.bb.capacity() - old_buf_size;\n  }\n\n  this.pad(align_size);\n};\n\n/**\n * @param {number} byte_size\n */\nflatbuffers.Builder.prototype.pad = function(byte_size) {\n  for (var i = 0; i < byte_size; i++) {\n    this.bb.writeInt8(--this.space, 0);\n  }\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt8 = function(value) {\n  this.bb.writeInt8(this.space -= 1, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt16 = function(value) {\n  this.bb.writeInt16(this.space -= 2, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt32 = function(value) {\n  this.bb.writeInt32(this.space -= 4, value);\n};\n\n/**\n * @param {flatbuffers.Long} value\n */\nflatbuffers.Builder.prototype.writeInt64 = function(value) {\n  this.bb.writeInt64(this.space -= 8, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeFloat32 = function(value) {\n  this.bb.writeFloat32(this.space -= 4, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeFloat64 = function(value) {\n  this.bb.writeFloat64(this.space -= 8, value);\n};\n/// @endcond\n\n/**\n * Add an `int8` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int8` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt8 = function(value) {\n  this.prep(1, 0);\n  this.writeInt8(value);\n};\n\n/**\n * Add an `int16` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int16` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt16 = function(value) {\n  this.prep(2, 0);\n  this.writeInt16(value);\n};\n\n/**\n * Add an `int32` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int32` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt32 = function(value) {\n  this.prep(4, 0);\n  this.writeInt32(value);\n};\n\n/**\n * Add an `int64` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {flatbuffers.Long} value The `int64` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt64 = function(value) {\n  this.prep(8, 0);\n  this.writeInt64(value);\n};\n\n/**\n * Add a `float32` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `float32` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addFloat32 = function(value) {\n  this.prep(4, 0);\n  this.writeFloat32(value);\n};\n\n/**\n * Add a `float64` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `float64` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addFloat64 = function(value) {\n  this.prep(8, 0);\n  this.writeFloat64(value);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt8 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt8(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt16 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt16(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt32 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt32(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {flatbuffers.Long} value\n * @param {flatbuffers.Long} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt64 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || !value.equals(defaultValue)) {\n    this.addInt64(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldFloat32 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addFloat32(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldFloat64 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addFloat64(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {flatbuffers.Offset} value\n * @param {flatbuffers.Offset} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldOffset = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addOffset(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * Structs are stored inline, so nothing additional is being added. `d` is always 0.\n *\n * @param {number} voffset\n * @param {flatbuffers.Offset} value\n * @param {flatbuffers.Offset} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldStruct = function(voffset, value, defaultValue) {\n  if (value != defaultValue) {\n    this.nested(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * Structures are always stored inline, they need to be created right\n * where they're used.  You'll get this assertion failure if you\n * created it elsewhere.\n *\n * @param {flatbuffers.Offset} obj The offset of the created object\n */\nflatbuffers.Builder.prototype.nested = function(obj) {\n  if (obj != this.offset()) {\n    throw new Error('FlatBuffers: struct must be serialized inline.');\n  }\n};\n\n/**\n * Should not be creating any other object, string or vector\n * while an object is being constructed\n */\nflatbuffers.Builder.prototype.notNested = function() {\n  if (this.isNested) {\n    throw new Error('FlatBuffers: object serialization must not be nested.');\n  }\n};\n\n/**\n * Set the current vtable at `voffset` to the current location in the buffer.\n *\n * @param {number} voffset\n */\nflatbuffers.Builder.prototype.slot = function(voffset) {\n  this.vtable[voffset] = this.offset();\n};\n\n/**\n * @returns {flatbuffers.Offset} Offset relative to the end of the buffer.\n */\nflatbuffers.Builder.prototype.offset = function() {\n  return this.bb.capacity() - this.space;\n};\n\n/**\n * Doubles the size of the backing ByteBuffer and copies the old data towards\n * the end of the new buffer (since we build the buffer backwards).\n *\n * @param {flatbuffers.ByteBuffer} bb The current buffer with the existing data\n * @returns {flatbuffers.ByteBuffer} A new byte buffer with the old data copied\n * to it. The data is located at the end of the buffer.\n *\n * uint8Array.set() formally takes {Array<number>|ArrayBufferView}, so to pass\n * it a uint8Array we need to suppress the type check:\n * @suppress {checkTypes}\n */\nflatbuffers.Builder.growByteBuffer = function(bb) {\n  var old_buf_size = bb.capacity();\n\n  // Ensure we don't grow beyond what fits in an int.\n  if (old_buf_size & 0xC0000000) {\n    throw new Error('FlatBuffers: cannot grow buffer beyond 2 gigabytes.');\n  }\n\n  var new_buf_size = old_buf_size << 1;\n  var nbb = flatbuffers.ByteBuffer.allocate(new_buf_size);\n  nbb.setPosition(new_buf_size - old_buf_size);\n  nbb.bytes().set(bb.bytes(), new_buf_size - old_buf_size);\n  return nbb;\n};\n/// @endcond\n\n/**\n * Adds on offset, relative to where it will be written.\n *\n * @param {flatbuffers.Offset} offset The offset to add.\n */\nflatbuffers.Builder.prototype.addOffset = function(offset) {\n  this.prep(flatbuffers.SIZEOF_INT, 0); // Ensure alignment is already done.\n  this.writeInt32(this.offset() - offset + flatbuffers.SIZEOF_INT);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Start encoding a new object in the buffer.  Users will not usually need to\n * call this directly. The FlatBuffers compiler will generate helper methods\n * that call this method internally.\n *\n * @param {number} numfields\n */\nflatbuffers.Builder.prototype.startObject = function(numfields) {\n  this.notNested();\n  if (this.vtable == null) {\n    this.vtable = [];\n  }\n  this.vtable_in_use = numfields;\n  for (var i = 0; i < numfields; i++) {\n    this.vtable[i] = 0; // This will push additional elements as needed\n  }\n  this.isNested = true;\n  this.object_start = this.offset();\n};\n\n/**\n * Finish off writing the object that is under construction.\n *\n * @returns {flatbuffers.Offset} The offset to the object inside `dataBuffer`\n */\nflatbuffers.Builder.prototype.endObject = function() {\n  if (this.vtable == null || !this.isNested) {\n    throw new Error('FlatBuffers: endObject called without startObject');\n  }\n\n  this.addInt32(0);\n  var vtableloc = this.offset();\n\n  // Trim trailing zeroes.\n  var i = this.vtable_in_use - 1;\n  for (; i >= 0 && this.vtable[i] == 0; i--) {}\n  var trimmed_size = i + 1;\n\n  // Write out the current vtable.\n  for (; i >= 0; i--) {\n    // Offset relative to the start of the table.\n    this.addInt16(this.vtable[i] != 0 ? vtableloc - this.vtable[i] : 0);\n  }\n\n  var standard_fields = 2; // The fields below:\n  this.addInt16(vtableloc - this.object_start);\n  var len = (trimmed_size + standard_fields) * flatbuffers.SIZEOF_SHORT;\n  this.addInt16(len);\n\n  // Search for an existing vtable that matches the current one.\n  var existing_vtable = 0;\n  var vt1 = this.space;\nouter_loop:\n  for (i = 0; i < this.vtables.length; i++) {\n    var vt2 = this.bb.capacity() - this.vtables[i];\n    if (len == this.bb.readInt16(vt2)) {\n      for (var j = flatbuffers.SIZEOF_SHORT; j < len; j += flatbuffers.SIZEOF_SHORT) {\n        if (this.bb.readInt16(vt1 + j) != this.bb.readInt16(vt2 + j)) {\n          continue outer_loop;\n        }\n      }\n      existing_vtable = this.vtables[i];\n      break;\n    }\n  }\n\n  if (existing_vtable) {\n    // Found a match:\n    // Remove the current vtable.\n    this.space = this.bb.capacity() - vtableloc;\n\n    // Point table to existing vtable.\n    this.bb.writeInt32(this.space, existing_vtable - vtableloc);\n  } else {\n    // No match:\n    // Add the location of the current vtable to the list of vtables.\n    this.vtables.push(this.offset());\n\n    // Point table to current vtable.\n    this.bb.writeInt32(this.bb.capacity() - vtableloc, this.offset() - vtableloc);\n  }\n\n  this.isNested = false;\n  return vtableloc;\n};\n/// @endcond\n\n/**\n * Finalize a buffer, poiting to the given `root_table`.\n *\n * @param {flatbuffers.Offset} root_table\n * @param {string=} opt_file_identifier\n */\nflatbuffers.Builder.prototype.finish = function(root_table, opt_file_identifier) {\n  if (opt_file_identifier) {\n    var file_identifier = opt_file_identifier;\n    this.prep(this.minalign, flatbuffers.SIZEOF_INT +\n      flatbuffers.FILE_IDENTIFIER_LENGTH);\n    if (file_identifier.length != flatbuffers.FILE_IDENTIFIER_LENGTH) {\n      throw new Error('FlatBuffers: file identifier must be length ' +\n        flatbuffers.FILE_IDENTIFIER_LENGTH);\n    }\n    for (var i = flatbuffers.FILE_IDENTIFIER_LENGTH - 1; i >= 0; i--) {\n      this.writeInt8(file_identifier.charCodeAt(i));\n    }\n  }\n  this.prep(this.minalign, flatbuffers.SIZEOF_INT);\n  this.addOffset(root_table);\n  this.bb.setPosition(this.space);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * This checks a required field has been set in a given table that has\n * just been constructed.\n *\n * @param {flatbuffers.Offset} table\n * @param {number} field\n */\nflatbuffers.Builder.prototype.requiredField = function(table, field) {\n  var table_start = this.bb.capacity() - table;\n  var vtable_start = table_start - this.bb.readInt32(table_start);\n  var ok = this.bb.readInt16(vtable_start + field) != 0;\n\n  // If this fails, the caller will show what field needs to be set.\n  if (!ok) {\n    throw new Error('FlatBuffers: field ' + field + ' must be set');\n  }\n};\n\n/**\n * Start a new array/vector of objects.  Users usually will not call\n * this directly. The FlatBuffers compiler will create a start/end\n * method for vector types in generated code.\n *\n * @param {number} elem_size The size of each element in the array\n * @param {number} num_elems The number of elements in the array\n * @param {number} alignment The alignment of the array\n */\nflatbuffers.Builder.prototype.startVector = function(elem_size, num_elems, alignment) {\n  this.notNested();\n  this.vector_num_elems = num_elems;\n  this.prep(flatbuffers.SIZEOF_INT, elem_size * num_elems);\n  this.prep(alignment, elem_size * num_elems); // Just in case alignment > int.\n};\n\n/**\n * Finish off the creation of an array and all its elements. The array must be\n * created with `startVector`.\n *\n * @returns {flatbuffers.Offset} The offset at which the newly created array\n * starts.\n */\nflatbuffers.Builder.prototype.endVector = function() {\n  this.writeInt32(this.vector_num_elems);\n  return this.offset();\n};\n/// @endcond\n\n/**\n * Encode the string `s` in the buffer using UTF-8. If a Uint8Array is passed\n * instead of a string, it is assumed to contain valid UTF-8 encoded data.\n *\n * @param {string|Uint8Array} s The string to encode\n * @return {flatbuffers.Offset} The offset in the buffer where the encoded string starts\n */\nflatbuffers.Builder.prototype.createString = function(s) {\n  if (s instanceof Uint8Array) {\n    var utf8 = s;\n  } else {\n    var utf8 = [];\n    var i = 0;\n\n    while (i < s.length) {\n      var codePoint;\n\n      // Decode UTF-16\n      var a = s.charCodeAt(i++);\n      if (a < 0xD800 || a >= 0xDC00) {\n        codePoint = a;\n      } else {\n        var b = s.charCodeAt(i++);\n        codePoint = (a << 10) + b + (0x10000 - (0xD800 << 10) - 0xDC00);\n      }\n\n      // Encode UTF-8\n      if (codePoint < 0x80) {\n        utf8.push(codePoint);\n      } else {\n        if (codePoint < 0x800) {\n          utf8.push(((codePoint >> 6) & 0x1F) | 0xC0);\n        } else {\n          if (codePoint < 0x10000) {\n            utf8.push(((codePoint >> 12) & 0x0F) | 0xE0);\n          } else {\n            utf8.push(\n              ((codePoint >> 18) & 0x07) | 0xF0,\n              ((codePoint >> 12) & 0x3F) | 0x80);\n          }\n          utf8.push(((codePoint >> 6) & 0x3F) | 0x80);\n        }\n        utf8.push((codePoint & 0x3F) | 0x80);\n      }\n    }\n  }\n\n  this.addInt8(0);\n  this.startVector(1, utf8.length, 1);\n  this.bb.setPosition(this.space -= utf8.length);\n  for (var i = 0, offset = this.space, bytes = this.bb.bytes(); i < utf8.length; i++) {\n    bytes[offset++] = utf8[i];\n  }\n  return this.endVector();\n};\n\n/**\n * A helper function to avoid generated code depending on this file directly.\n *\n * @param {number} low\n * @param {number} high\n * @returns {flatbuffers.Long}\n */\nflatbuffers.Builder.prototype.createLong = function(low, high) {\n  return flatbuffers.Long.create(low, high);\n};\n////////////////////////////////////////////////////////////////////////////////\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Create a new ByteBuffer with a given array of bytes (`Uint8Array`).\n *\n * @constructor\n * @param {Uint8Array} bytes\n */\nflatbuffers.ByteBuffer = function(bytes) {\n  /**\n   * @type {Uint8Array}\n   * @private\n   */\n  this.bytes_ = bytes;\n\n  /**\n   * @type {number}\n   * @private\n   */\n  this.position_ = 0;\n};\n\n/**\n * Create and allocate a new ByteBuffer with a given size.\n *\n * @param {number} byte_size\n * @returns {flatbuffers.ByteBuffer}\n */\nflatbuffers.ByteBuffer.allocate = function(byte_size) {\n  return new flatbuffers.ByteBuffer(new Uint8Array(byte_size));\n};\n\nflatbuffers.ByteBuffer.prototype.clear = function() {\n  this.position_ = 0;\n};\n\n/**\n * Get the underlying `Uint8Array`.\n *\n * @returns {Uint8Array}\n */\nflatbuffers.ByteBuffer.prototype.bytes = function() {\n  return this.bytes_;\n};\n\n/**\n * Get the buffer's position.\n *\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.position = function() {\n  return this.position_;\n};\n\n/**\n * Set the buffer's position.\n *\n * @param {number} position\n */\nflatbuffers.ByteBuffer.prototype.setPosition = function(position) {\n  this.position_ = position;\n};\n\n/**\n * Get the buffer's capacity.\n *\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.capacity = function() {\n  return this.bytes_.length;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt8 = function(offset) {\n  return this.readUint8(offset) << 24 >> 24;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint8 = function(offset) {\n  return this.bytes_[offset];\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt16 = function(offset) {\n  return this.readUint16(offset) << 16 >> 16;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint16 = function(offset) {\n  return this.bytes_[offset] | this.bytes_[offset + 1] << 8;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt32 = function(offset) {\n  return this.bytes_[offset] | this.bytes_[offset + 1] << 8 | this.bytes_[offset + 2] << 16 | this.bytes_[offset + 3] << 24;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint32 = function(offset) {\n  return this.readInt32(offset) >>> 0;\n};\n\n/**\n * @param {number} offset\n * @returns {flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.readInt64 = function(offset) {\n  return new flatbuffers.Long(this.readInt32(offset), this.readInt32(offset + 4));\n};\n\n/**\n * @param {number} offset\n * @returns {flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.readUint64 = function(offset) {\n  return new flatbuffers.Long(this.readUint32(offset), this.readUint32(offset + 4));\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readFloat32 = function(offset) {\n  flatbuffers.int32[0] = this.readInt32(offset);\n  return flatbuffers.float32[0];\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readFloat64 = function(offset) {\n  flatbuffers.int32[flatbuffers.isLittleEndian ? 0 : 1] = this.readInt32(offset);\n  flatbuffers.int32[flatbuffers.isLittleEndian ? 1 : 0] = this.readInt32(offset + 4);\n  return flatbuffers.float64[0];\n};\n\n/**\n * @param {number} offset\n * @param {number|boolean} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt8 = function(offset, value) {\n  this.bytes_[offset] = /** @type {number} */(value);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint8 = function(offset, value) {\n  this.bytes_[offset] = value;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt16 = function(offset, value) {\n  this.bytes_[offset] = value;\n  this.bytes_[offset + 1] = value >> 8;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint16 = function(offset, value) {\n    this.bytes_[offset] = value;\n    this.bytes_[offset + 1] = value >> 8;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt32 = function(offset, value) {\n  this.bytes_[offset] = value;\n  this.bytes_[offset + 1] = value >> 8;\n  this.bytes_[offset + 2] = value >> 16;\n  this.bytes_[offset + 3] = value >> 24;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint32 = function(offset, value) {\n    this.bytes_[offset] = value;\n    this.bytes_[offset + 1] = value >> 8;\n    this.bytes_[offset + 2] = value >> 16;\n    this.bytes_[offset + 3] = value >> 24;\n};\n\n/**\n * @param {number} offset\n * @param {flatbuffers.Long} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt64 = function(offset, value) {\n  this.writeInt32(offset, value.low);\n  this.writeInt32(offset + 4, value.high);\n};\n\n/**\n * @param {number} offset\n * @param {flatbuffers.Long} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint64 = function(offset, value) {\n    this.writeUint32(offset, value.low);\n    this.writeUint32(offset + 4, value.high);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeFloat32 = function(offset, value) {\n  flatbuffers.float32[0] = value;\n  this.writeInt32(offset, flatbuffers.int32[0]);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeFloat64 = function(offset, value) {\n  flatbuffers.float64[0] = value;\n  this.writeInt32(offset, flatbuffers.int32[flatbuffers.isLittleEndian ? 0 : 1]);\n  this.writeInt32(offset + 4, flatbuffers.int32[flatbuffers.isLittleEndian ? 1 : 0]);\n};\n\n/**\n * Return the file identifier.   Behavior is undefined for FlatBuffers whose\n * schema does not include a file_identifier (likely points at padding or the\n * start of a the root vtable).\n * @returns {string}\n */\nflatbuffers.ByteBuffer.prototype.getBufferIdentifier = function() {\n  if (this.bytes_.length < this.position_ + flatbuffers.SIZEOF_INT +\n      flatbuffers.FILE_IDENTIFIER_LENGTH) {\n    throw new Error(\n        'FlatBuffers: ByteBuffer is too short to contain an identifier.');\n  }\n  var result = \"\";\n  for (var i = 0; i < flatbuffers.FILE_IDENTIFIER_LENGTH; i++) {\n    result += String.fromCharCode(\n        this.readInt8(this.position_ + flatbuffers.SIZEOF_INT + i));\n  }\n  return result;\n};\n\n/**\n * Look up a field in the vtable, return an offset into the object, or 0 if the\n * field is not present.\n *\n * @param {number} bb_pos\n * @param {number} vtable_offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__offset = function(bb_pos, vtable_offset) {\n  var vtable = bb_pos - this.readInt32(bb_pos);\n  return vtable_offset < this.readInt16(vtable) ? this.readInt16(vtable + vtable_offset) : 0;\n};\n\n/**\n * Initialize any Table-derived type to point to the union at the given offset.\n *\n * @param {flatbuffers.Table} t\n * @param {number} offset\n * @returns {flatbuffers.Table}\n */\nflatbuffers.ByteBuffer.prototype.__union = function(t, offset) {\n  t.bb_pos = offset + this.readInt32(offset);\n  t.bb = this;\n  return t;\n};\n\n/**\n * Create a JavaScript string from UTF-8 data stored inside the FlatBuffer.\n * This allocates a new string and converts to wide chars upon each access.\n *\n * To avoid the conversion to UTF-16, pass flatbuffers.Encoding.UTF8_BYTES as\n * the \"optionalEncoding\" argument. This is useful for avoiding conversion to\n * and from UTF-16 when the data will just be packaged back up in another\n * FlatBuffer later on.\n *\n * @param {number} offset\n * @param {flatbuffers.Encoding=} opt_encoding Defaults to UTF16_STRING\n * @returns {string|Uint8Array}\n */\nflatbuffers.ByteBuffer.prototype.__string = function(offset, opt_encoding) {\n  offset += this.readInt32(offset);\n\n  var length = this.readInt32(offset);\n  var result = '';\n  var i = 0;\n\n  offset += flatbuffers.SIZEOF_INT;\n\n  if (opt_encoding === flatbuffers.Encoding.UTF8_BYTES) {\n    return this.bytes_.subarray(offset, offset + length);\n  }\n\n  while (i < length) {\n    var codePoint;\n\n    // Decode UTF-8\n    var a = this.readUint8(offset + i++);\n    if (a < 0xC0) {\n      codePoint = a;\n    } else {\n      var b = this.readUint8(offset + i++);\n      if (a < 0xE0) {\n        codePoint =\n          ((a & 0x1F) << 6) |\n          (b & 0x3F);\n      } else {\n        var c = this.readUint8(offset + i++);\n        if (a < 0xF0) {\n          codePoint =\n            ((a & 0x0F) << 12) |\n            ((b & 0x3F) << 6) |\n            (c & 0x3F);\n        } else {\n          var d = this.readUint8(offset + i++);\n          codePoint =\n            ((a & 0x07) << 18) |\n            ((b & 0x3F) << 12) |\n            ((c & 0x3F) << 6) |\n            (d & 0x3F);\n        }\n      }\n    }\n\n    // Encode UTF-16\n    if (codePoint < 0x10000) {\n      result += String.fromCharCode(codePoint);\n    } else {\n      codePoint -= 0x10000;\n      result += String.fromCharCode(\n        (codePoint >> 10) + 0xD800,\n        (codePoint & ((1 << 10) - 1)) + 0xDC00);\n    }\n  }\n\n  return result;\n};\n\n/**\n * Retrieve the relative offset stored at \"offset\"\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__indirect = function(offset) {\n  return offset + this.readInt32(offset);\n};\n\n/**\n * Get the start of data of a vector whose offset is stored at \"offset\" in this object.\n *\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__vector = function(offset) {\n  return offset + this.readInt32(offset) + flatbuffers.SIZEOF_INT; // data starts after the length\n};\n\n/**\n * Get the length of a vector whose offset is stored at \"offset\" in this object.\n *\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__vector_len = function(offset) {\n  return this.readInt32(offset + this.readInt32(offset));\n};\n\n/**\n * @param {string} ident\n * @returns {boolean}\n */\nflatbuffers.ByteBuffer.prototype.__has_identifier = function(ident) {\n  if (ident.length != flatbuffers.FILE_IDENTIFIER_LENGTH) {\n    throw new Error('FlatBuffers: file identifier must be length ' +\n                    flatbuffers.FILE_IDENTIFIER_LENGTH);\n  }\n  for (var i = 0; i < flatbuffers.FILE_IDENTIFIER_LENGTH; i++) {\n    if (ident.charCodeAt(i) != this.readInt8(this.position_ + flatbuffers.SIZEOF_INT + i)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * A helper function to avoid generated code depending on this file directly.\n *\n * @param {number} low\n * @param {number} high\n * @returns {flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.createLong = function(low, high) {\n  return flatbuffers.Long.create(low, high);\n};\n\n// Exports for Node.js and RequireJS\nexport { flatbuffers };\n\n/// @endcond\n/// @}\n","'use strict';\n\n// This is free and unencumbered software released into the public domain.\n// See LICENSE.md for more information.\n\n//\n// Utilities\n//\n\n/**\n * @param {number} a The number to test.\n * @param {number} min The minimum value in the range, inclusive.\n * @param {number} max The maximum value in the range, inclusive.\n * @return {boolean} True if a >= min and a <= max.\n */\nfunction inRange(a, min, max) {\n  return min <= a && a <= max;\n}\n\n/**\n * @param {*} o\n * @return {Object}\n */\nfunction ToDictionary(o) {\n  if (o === undefined) return {};\n  if (o === Object(o)) return o;\n  throw TypeError('Could not convert argument to dictionary');\n}\n\n/**\n * @param {string} string Input string of UTF-16 code units.\n * @return {!Array.<number>} Code points.\n */\nfunction stringToCodePoints(string) {\n  // https://heycam.github.io/webidl/#dfn-obtain-unicode\n\n  // 1. Let S be the DOMString value.\n  var s = String(string);\n\n  // 2. Let n be the length of S.\n  var n = s.length;\n\n  // 3. Initialize i to 0.\n  var i = 0;\n\n  // 4. Initialize U to be an empty sequence of Unicode characters.\n  var u = [];\n\n  // 5. While i < n:\n  while (i < n) {\n\n    // 1. Let c be the code unit in S at index i.\n    var c = s.charCodeAt(i);\n\n    // 2. Depending on the value of c:\n\n    // c < 0xD800 or c > 0xDFFF\n    if (c < 0xD800 || c > 0xDFFF) {\n      // Append to U the Unicode character with code point c.\n      u.push(c);\n    }\n\n    // 0xDC00 ≤ c ≤ 0xDFFF\n    else if (0xDC00 <= c && c <= 0xDFFF) {\n      // Append to U a U+FFFD REPLACEMENT CHARACTER.\n      u.push(0xFFFD);\n    }\n\n    // 0xD800 ≤ c ≤ 0xDBFF\n    else if (0xD800 <= c && c <= 0xDBFF) {\n      // 1. If i = n−1, then append to U a U+FFFD REPLACEMENT\n      // CHARACTER.\n      if (i === n - 1) {\n        u.push(0xFFFD);\n      }\n      // 2. Otherwise, i < n−1:\n      else {\n        // 1. Let d be the code unit in S at index i+1.\n        var d = string.charCodeAt(i + 1);\n\n        // 2. If 0xDC00 ≤ d ≤ 0xDFFF, then:\n        if (0xDC00 <= d && d <= 0xDFFF) {\n          // 1. Let a be c & 0x3FF.\n          var a = c & 0x3FF;\n\n          // 2. Let b be d & 0x3FF.\n          var b = d & 0x3FF;\n\n          // 3. Append to U the Unicode character with code point\n          // 2^16+2^10*a+b.\n          u.push(0x10000 + (a << 10) + b);\n\n          // 4. Set i to i+1.\n          i += 1;\n        }\n\n        // 3. Otherwise, d < 0xDC00 or d > 0xDFFF. Append to U a\n        // U+FFFD REPLACEMENT CHARACTER.\n        else  {\n          u.push(0xFFFD);\n        }\n      }\n    }\n\n    // 3. Set i to i+1.\n    i += 1;\n  }\n\n  // 6. Return U.\n  return u;\n}\n\n/**\n * @param {!Array.<number>} code_points Array of code points.\n * @return {string} string String of UTF-16 code units.\n */\nfunction codePointsToString(code_points) {\n  var s = '';\n  for (var i = 0; i < code_points.length; ++i) {\n    var cp = code_points[i];\n    if (cp <= 0xFFFF) {\n      s += String.fromCharCode(cp);\n    } else {\n      cp -= 0x10000;\n      s += String.fromCharCode((cp >> 10) + 0xD800,\n                               (cp & 0x3FF) + 0xDC00);\n    }\n  }\n  return s;\n}\n\n\n//\n// Implementation of Encoding specification\n// https://encoding.spec.whatwg.org/\n//\n\n//\n// 3. Terminology\n//\n\n/**\n * End-of-stream is a special token that signifies no more tokens\n * are in the stream.\n * @const\n */ var end_of_stream = -1;\n\n/**\n * A stream represents an ordered sequence of tokens.\n *\n * @constructor\n * @param {!(Array.<number>|Uint8Array)} tokens Array of tokens that provide the\n * stream.\n */\nfunction Stream(tokens) {\n  /** @type {!Array.<number>} */\n  this.tokens = [].slice.call(tokens);\n}\n\nStream.prototype = {\n  /**\n   * @return {boolean} True if end-of-stream has been hit.\n   */\n  endOfStream: function() {\n    return !this.tokens.length;\n  },\n\n  /**\n   * When a token is read from a stream, the first token in the\n   * stream must be returned and subsequently removed, and\n   * end-of-stream must be returned otherwise.\n   *\n   * @return {number} Get the next token from the stream, or\n   * end_of_stream.\n   */\n   read: function() {\n    if (!this.tokens.length)\n      return end_of_stream;\n     return this.tokens.shift();\n   },\n\n  /**\n   * When one or more tokens are prepended to a stream, those tokens\n   * must be inserted, in given order, before the first token in the\n   * stream.\n   *\n   * @param {(number|!Array.<number>)} token The token(s) to prepend to the stream.\n   */\n  prepend: function(token) {\n    if (Array.isArray(token)) {\n      var tokens = /**@type {!Array.<number>}*/(token);\n      while (tokens.length)\n        this.tokens.unshift(tokens.pop());\n    } else {\n      this.tokens.unshift(token);\n    }\n  },\n\n  /**\n   * When one or more tokens are pushed to a stream, those tokens\n   * must be inserted, in given order, after the last token in the\n   * stream.\n   *\n   * @param {(number|!Array.<number>)} token The tokens(s) to prepend to the stream.\n   */\n  push: function(token) {\n    if (Array.isArray(token)) {\n      var tokens = /**@type {!Array.<number>}*/(token);\n      while (tokens.length)\n        this.tokens.push(tokens.shift());\n    } else {\n      this.tokens.push(token);\n    }\n  }\n};\n\n//\n// 4. Encodings\n//\n\n// 4.1 Encoders and decoders\n\n/** @const */\nvar finished = -1;\n\n/**\n * @param {boolean} fatal If true, decoding errors raise an exception.\n * @param {number=} opt_code_point Override the standard fallback code point.\n * @return {number} The code point to insert on a decoding error.\n */\nfunction decoderError(fatal, opt_code_point) {\n  if (fatal)\n    throw TypeError('Decoder error');\n  return opt_code_point || 0xFFFD;\n}\n\n/** @interface */\nfunction Decoder() {}\nDecoder.prototype = {\n  /**\n   * @param {Stream} stream The stream of bytes being decoded.\n   * @param {number} bite The next byte read from the stream.\n   * @return {?(number|!Array.<number>)} The next code point(s)\n   *     decoded, or null if not enough data exists in the input\n   *     stream to decode a complete code point, or |finished|.\n   */\n  handler: function(stream, bite) {}\n};\n\n/** @interface */\nfunction Encoder() {}\nEncoder.prototype = {\n  /**\n   * @param {Stream} stream The stream of code points being encoded.\n   * @param {number} code_point Next code point read from the stream.\n   * @return {(number|!Array.<number>)} Byte(s) to emit, or |finished|.\n   */\n  handler: function(stream, code_point) {}\n};\n\n//\n// 7. API\n//\n\n/** @const */ var DEFAULT_ENCODING = 'utf-8';\n\n// 7.1 Interface TextDecoder\n\n/**\n * @constructor\n * @param {string=} encoding The label of the encoding;\n *     defaults to 'utf-8'.\n * @param {Object=} options\n */\nfunction TextDecoder(encoding, options) {\n  if (!(this instanceof TextDecoder)) {\n    return new TextDecoder(encoding, options);\n  }\n  encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;\n  if (encoding !== DEFAULT_ENCODING) {\n    throw new Error('Encoding not supported. Only utf-8 is supported');\n  }\n  options = ToDictionary(options);\n\n  /** @private @type {boolean} */\n  this._streaming = false;\n  /** @private @type {boolean} */\n  this._BOMseen = false;\n  /** @private @type {?Decoder} */\n  this._decoder = null;\n  /** @private @type {boolean} */\n  this._fatal = Boolean(options['fatal']);\n  /** @private @type {boolean} */\n  this._ignoreBOM = Boolean(options['ignoreBOM']);\n\n  Object.defineProperty(this, 'encoding', {value: 'utf-8'});\n  Object.defineProperty(this, 'fatal', {value: this._fatal});\n  Object.defineProperty(this, 'ignoreBOM', {value: this._ignoreBOM});\n}\n\nTextDecoder.prototype = {\n  /**\n   * @param {ArrayBufferView=} input The buffer of bytes to decode.\n   * @param {Object=} options\n   * @return {string} The decoded string.\n   */\n  decode: function decode(input, options) {\n    var bytes;\n    if (typeof input === 'object' && input instanceof ArrayBuffer) {\n      bytes = new Uint8Array(input);\n    } else if (typeof input === 'object' && 'buffer' in input &&\n               input.buffer instanceof ArrayBuffer) {\n      bytes = new Uint8Array(input.buffer,\n                             input.byteOffset,\n                             input.byteLength);\n    } else {\n      bytes = new Uint8Array(0);\n    }\n\n    options = ToDictionary(options);\n\n    if (!this._streaming) {\n      this._decoder = new UTF8Decoder({fatal: this._fatal});\n      this._BOMseen = false;\n    }\n    this._streaming = Boolean(options['stream']);\n\n    var input_stream = new Stream(bytes);\n\n    var code_points = [];\n\n    /** @type {?(number|!Array.<number>)} */\n    var result;\n\n    while (!input_stream.endOfStream()) {\n      result = this._decoder.handler(input_stream, input_stream.read());\n      if (result === finished)\n        break;\n      if (result === null)\n        continue;\n      if (Array.isArray(result))\n        code_points.push.apply(code_points, /**@type {!Array.<number>}*/(result));\n      else\n        code_points.push(result);\n    }\n    if (!this._streaming) {\n      do {\n        result = this._decoder.handler(input_stream, input_stream.read());\n        if (result === finished)\n          break;\n        if (result === null)\n          continue;\n        if (Array.isArray(result))\n          code_points.push.apply(code_points, /**@type {!Array.<number>}*/(result));\n        else\n          code_points.push(result);\n      } while (!input_stream.endOfStream());\n      this._decoder = null;\n    }\n\n    if (code_points.length) {\n      // If encoding is one of utf-8, utf-16be, and utf-16le, and\n      // ignore BOM flag and BOM seen flag are unset, run these\n      // subsubsteps:\n      if (['utf-8'].indexOf(this.encoding) !== -1 &&\n          !this._ignoreBOM && !this._BOMseen) {\n        // If token is U+FEFF, set BOM seen flag.\n        if (code_points[0] === 0xFEFF) {\n          this._BOMseen = true;\n          code_points.shift();\n        } else {\n          // Otherwise, if token is not end-of-stream, set BOM seen\n          // flag and append token to output.\n          this._BOMseen = true;\n        }\n      }\n    }\n\n    return codePointsToString(code_points);\n  }\n};\n\n// 7.2 Interface TextEncoder\n\n/**\n * @constructor\n * @param {string=} encoding The label of the encoding;\n *     defaults to 'utf-8'.\n * @param {Object=} options\n */\nfunction TextEncoder(encoding, options) {\n  if (!(this instanceof TextEncoder))\n    return new TextEncoder(encoding, options);\n  encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;\n  if (encoding !== DEFAULT_ENCODING) {\n    throw new Error('Encoding not supported. Only utf-8 is supported');\n  }\n  options = ToDictionary(options);\n\n  /** @private @type {boolean} */\n  this._streaming = false;\n  /** @private @type {?Encoder} */\n  this._encoder = null;\n  /** @private @type {{fatal: boolean}} */\n  this._options = {fatal: Boolean(options['fatal'])};\n\n  Object.defineProperty(this, 'encoding', {value: 'utf-8'});\n}\n\nTextEncoder.prototype = {\n  /**\n   * @param {string=} opt_string The string to encode.\n   * @param {Object=} options\n   * @return {Uint8Array} Encoded bytes, as a Uint8Array.\n   */\n  encode: function encode(opt_string, options) {\n    opt_string = opt_string ? String(opt_string) : '';\n    options = ToDictionary(options);\n\n    // NOTE: This option is nonstandard. None of the encodings\n    // permitted for encoding (i.e. UTF-8, UTF-16) are stateful,\n    // so streaming is not necessary.\n    if (!this._streaming)\n      this._encoder = new UTF8Encoder(this._options);\n    this._streaming = Boolean(options['stream']);\n\n    var bytes = [];\n    var input_stream = new Stream(stringToCodePoints(opt_string));\n    /** @type {?(number|!Array.<number>)} */\n    var result;\n    while (!input_stream.endOfStream()) {\n      result = this._encoder.handler(input_stream, input_stream.read());\n      if (result === finished)\n        break;\n      if (Array.isArray(result))\n        bytes.push.apply(bytes, /**@type {!Array.<number>}*/(result));\n      else\n        bytes.push(result);\n    }\n    if (!this._streaming) {\n      while (true) {\n        result = this._encoder.handler(input_stream, input_stream.read());\n        if (result === finished)\n          break;\n        if (Array.isArray(result))\n          bytes.push.apply(bytes, /**@type {!Array.<number>}*/(result));\n        else\n          bytes.push(result);\n      }\n      this._encoder = null;\n    }\n    return new Uint8Array(bytes);\n  }\n};\n\n//\n// 8. The encoding\n//\n\n// 8.1 utf-8\n\n/**\n * @constructor\n * @implements {Decoder}\n * @param {{fatal: boolean}} options\n */\nfunction UTF8Decoder(options) {\n  var fatal = options.fatal;\n\n  // utf-8's decoder's has an associated utf-8 code point, utf-8\n  // bytes seen, and utf-8 bytes needed (all initially 0), a utf-8\n  // lower boundary (initially 0x80), and a utf-8 upper boundary\n  // (initially 0xBF).\n  var /** @type {number} */ utf8_code_point = 0,\n      /** @type {number} */ utf8_bytes_seen = 0,\n      /** @type {number} */ utf8_bytes_needed = 0,\n      /** @type {number} */ utf8_lower_boundary = 0x80,\n      /** @type {number} */ utf8_upper_boundary = 0xBF;\n\n  /**\n   * @param {Stream} stream The stream of bytes being decoded.\n   * @param {number} bite The next byte read from the stream.\n   * @return {?(number|!Array.<number>)} The next code point(s)\n   *     decoded, or null if not enough data exists in the input\n   *     stream to decode a complete code point.\n   */\n  this.handler = function(stream, bite) {\n    // 1. If byte is end-of-stream and utf-8 bytes needed is not 0,\n    // set utf-8 bytes needed to 0 and return error.\n    if (bite === end_of_stream && utf8_bytes_needed !== 0) {\n      utf8_bytes_needed = 0;\n      return decoderError(fatal);\n    }\n\n    // 2. If byte is end-of-stream, return finished.\n    if (bite === end_of_stream)\n      return finished;\n\n    // 3. If utf-8 bytes needed is 0, based on byte:\n    if (utf8_bytes_needed === 0) {\n\n      // 0x00 to 0x7F\n      if (inRange(bite, 0x00, 0x7F)) {\n        // Return a code point whose value is byte.\n        return bite;\n      }\n\n      // 0xC2 to 0xDF\n      if (inRange(bite, 0xC2, 0xDF)) {\n        // Set utf-8 bytes needed to 1 and utf-8 code point to byte\n        // − 0xC0.\n        utf8_bytes_needed = 1;\n        utf8_code_point = bite - 0xC0;\n      }\n\n      // 0xE0 to 0xEF\n      else if (inRange(bite, 0xE0, 0xEF)) {\n        // 1. If byte is 0xE0, set utf-8 lower boundary to 0xA0.\n        if (bite === 0xE0)\n          utf8_lower_boundary = 0xA0;\n        // 2. If byte is 0xED, set utf-8 upper boundary to 0x9F.\n        if (bite === 0xED)\n          utf8_upper_boundary = 0x9F;\n        // 3. Set utf-8 bytes needed to 2 and utf-8 code point to\n        // byte − 0xE0.\n        utf8_bytes_needed = 2;\n        utf8_code_point = bite - 0xE0;\n      }\n\n      // 0xF0 to 0xF4\n      else if (inRange(bite, 0xF0, 0xF4)) {\n        // 1. If byte is 0xF0, set utf-8 lower boundary to 0x90.\n        if (bite === 0xF0)\n          utf8_lower_boundary = 0x90;\n        // 2. If byte is 0xF4, set utf-8 upper boundary to 0x8F.\n        if (bite === 0xF4)\n          utf8_upper_boundary = 0x8F;\n        // 3. Set utf-8 bytes needed to 3 and utf-8 code point to\n        // byte − 0xF0.\n        utf8_bytes_needed = 3;\n        utf8_code_point = bite - 0xF0;\n      }\n\n      // Otherwise\n      else {\n        // Return error.\n        return decoderError(fatal);\n      }\n\n      // Then (byte is in the range 0xC2 to 0xF4) set utf-8 code\n      // point to utf-8 code point << (6 × utf-8 bytes needed) and\n      // return continue.\n      utf8_code_point = utf8_code_point << (6 * utf8_bytes_needed);\n      return null;\n    }\n\n    // 4. If byte is not in the range utf-8 lower boundary to utf-8\n    // upper boundary, run these substeps:\n    if (!inRange(bite, utf8_lower_boundary, utf8_upper_boundary)) {\n\n      // 1. Set utf-8 code point, utf-8 bytes needed, and utf-8\n      // bytes seen to 0, set utf-8 lower boundary to 0x80, and set\n      // utf-8 upper boundary to 0xBF.\n      utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;\n      utf8_lower_boundary = 0x80;\n      utf8_upper_boundary = 0xBF;\n\n      // 2. Prepend byte to stream.\n      stream.prepend(bite);\n\n      // 3. Return error.\n      return decoderError(fatal);\n    }\n\n    // 5. Set utf-8 lower boundary to 0x80 and utf-8 upper boundary\n    // to 0xBF.\n    utf8_lower_boundary = 0x80;\n    utf8_upper_boundary = 0xBF;\n\n    // 6. Increase utf-8 bytes seen by one and set utf-8 code point\n    // to utf-8 code point + (byte − 0x80) << (6 × (utf-8 bytes\n    // needed − utf-8 bytes seen)).\n    utf8_bytes_seen += 1;\n    utf8_code_point += (bite - 0x80) << (6 * (utf8_bytes_needed - utf8_bytes_seen));\n\n    // 7. If utf-8 bytes seen is not equal to utf-8 bytes needed,\n    // continue.\n    if (utf8_bytes_seen !== utf8_bytes_needed)\n      return null;\n\n    // 8. Let code point be utf-8 code point.\n    var code_point = utf8_code_point;\n\n    // 9. Set utf-8 code point, utf-8 bytes needed, and utf-8 bytes\n    // seen to 0.\n    utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;\n\n    // 10. Return a code point whose value is code point.\n    return code_point;\n  };\n}\n\n/**\n * @constructor\n * @implements {Encoder}\n * @param {{fatal: boolean}} options\n */\nfunction UTF8Encoder(options) {\n  var fatal = options.fatal;\n  /**\n   * @param {Stream} stream Input stream.\n   * @param {number} code_point Next code point read from the stream.\n   * @return {(number|!Array.<number>)} Byte(s) to emit.\n   */\n  this.handler = function(stream, code_point) {\n    // 1. If code point is end-of-stream, return finished.\n    if (code_point === end_of_stream)\n      return finished;\n\n    // 2. If code point is in the range U+0000 to U+007F, return a\n    // byte whose value is code point.\n    if (inRange(code_point, 0x0000, 0x007f))\n      return code_point;\n\n    // 3. Set count and offset based on the range code point is in:\n    var count, offset;\n    // U+0080 to U+07FF:    1 and 0xC0\n    if (inRange(code_point, 0x0080, 0x07FF)) {\n      count = 1;\n      offset = 0xC0;\n    }\n    // U+0800 to U+FFFF:    2 and 0xE0\n    else if (inRange(code_point, 0x0800, 0xFFFF)) {\n      count = 2;\n      offset = 0xE0;\n    }\n    // U+10000 to U+10FFFF: 3 and 0xF0\n    else if (inRange(code_point, 0x10000, 0x10FFFF)) {\n      count = 3;\n      offset = 0xF0;\n    }\n\n    // 4.Let bytes be a byte sequence whose first byte is (code\n    // point >> (6 × count)) + offset.\n    var bytes = [(code_point >> (6 * count)) + offset];\n\n    // 5. Run these substeps while count is greater than 0:\n    while (count > 0) {\n\n      // 1. Set temp to code point >> (6 × (count − 1)).\n      var temp = code_point >> (6 * (count - 1));\n\n      // 2. Append to bytes 0x80 | (temp & 0x3F).\n      bytes.push(0x80 | (temp & 0x3F));\n\n      // 3. Decrease count by one.\n      count -= 1;\n    }\n\n    // 6. Return bytes bytes, in order.\n    return bytes;\n  };\n}\n\nexport {TextEncoder, TextDecoder};\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { toUint8Array } from './buffer';\nimport {\n    TextDecoder as TextDecoderPolyfill,\n    TextEncoder as TextEncoderPolyfill,\n} from 'text-encoding-utf-8';\n\n/** @ignore @suppress {missingRequire} */\nconst _Buffer = typeof Buffer === 'function' ? Buffer : null;\n/** @ignore */\nconst useNativeEncoders = typeof TextDecoder === 'function' && typeof TextEncoder === 'function';\n\n/** @ignore */\nexport const decodeUtf8 = ((TextDecoder) => {\n    if (useNativeEncoders || !_Buffer) {\n        const decoder = new TextDecoder('utf-8');\n        return (buffer?: ArrayBuffer | ArrayBufferView) => decoder.decode(buffer);\n    }\n    return (input: ArrayBufferLike | ArrayBufferView) => {\n        const { buffer, byteOffset, length } = toUint8Array(input);\n        return _Buffer.from(buffer, byteOffset, length).toString();\n    };\n})(typeof TextDecoder !== 'undefined' ? TextDecoder : TextDecoderPolyfill);\n\n/** @ignore */\nexport const encodeUtf8 = ((TextEncoder) => {\n    if (useNativeEncoders || !_Buffer) {\n        const encoder = new TextEncoder();\n        return (value?: string) => encoder.encode(value);\n    }\n    return (input = '') => toUint8Array(_Buffer.from(input, 'utf8'));\n})(typeof TextEncoder !== 'undefined' ? TextEncoder : TextEncoderPolyfill);\n","export default function _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}","import setPrototypeOf from \"./setPrototypeOf\";\nexport default function _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) setPrototypeOf(subClass, superClass);\n}","export default function _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}","export default function _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}","export default function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}","export default function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}","import _typeof from \"../../helpers/esm/typeof\";\nimport assertThisInitialized from \"./assertThisInitialized\";\nexport default function _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return assertThisInitialized(self);\n}","import getPrototypeOf from \"./getPrototypeOf\";\nimport isNativeReflectConstruct from \"./isNativeReflectConstruct\";\nimport possibleConstructorReturn from \"./possibleConstructorReturn\";\nexport default function _createSuper(Derived) {\n  return function () {\n    var Super = getPrototypeOf(Derived),\n        result;\n\n    if (isNativeReflectConstruct()) {\n      var NewTarget = getPrototypeOf(this).constructor;\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return possibleConstructorReturn(this, result);\n  };\n}","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport streamAdapters from './adapters';\n\n/** @ignore */\nexport const ITERATOR_DONE: any = Object.freeze({ done: true, value: void (0) });\n\n/** @ignore */\nexport type FileHandle = import('fs').promises.FileHandle;\n/** @ignore */\nexport type ArrowJSONLike = { schema: any; batches?: any[]; dictionaries?: any[]; };\n/** @ignore */\nexport type ReadableDOMStreamOptions = { type: 'bytes' | undefined, autoAllocateChunkSize?: number, highWaterMark?: number };\n\n/** @ignore */\nexport class ArrowJSON {\n    // @ts-ignore\n    constructor(private _json: ArrowJSONLike) {}\n    public get schema(): any { return this._json['schema']; }\n    public get batches(): any[] { return (this._json['batches'] || []) as any[]; }\n    public get dictionaries(): any[] { return (this._json['dictionaries'] || []) as any[]; }\n}\n\n/** @ignore */\nexport interface Readable<T> {\n\n    readonly closed: Promise<void>;\n    cancel(reason?: any): Promise<void>;\n\n    read(size?: number | null): Promise<T | null>;\n    peek(size?: number | null): Promise<T | null>;\n    throw(value?: any): Promise<IteratorResult<any>>;\n    return(value?: any): Promise<IteratorResult<any>>;\n    next(size?: number | null): Promise<IteratorResult<T>>;\n}\n\n/** @ignore */\nexport interface Writable<T> {\n    readonly closed: Promise<void>;\n    close(): void;\n    write(chunk: T): void;\n    abort(reason?: any): void;\n}\n\n/** @ignore */\nexport interface ReadableWritable<TReadable, TWritable> extends Readable<TReadable>, Writable<TWritable> {\n    [Symbol.asyncIterator](): AsyncIterableIterator<TReadable>;\n    toDOMStream(options?: ReadableDOMStreamOptions): ReadableStream<TReadable>;\n    toNodeStream(options?: import('stream').ReadableOptions): import('stream').Readable;\n}\n\n/** @ignore */\nexport abstract class ReadableInterop<T> {\n\n    public abstract toDOMStream(options?: ReadableDOMStreamOptions): ReadableStream<T>;\n    public abstract toNodeStream(options?: import('stream').ReadableOptions): import('stream').Readable;\n\n    public tee(): [ReadableStream<T>, ReadableStream<T>] {\n        return this._getDOMStream().tee();\n    }\n    public pipe<R extends NodeJS.WritableStream>(writable: R, options?: { end?: boolean; }) {\n        return this._getNodeStream().pipe(writable, options);\n    }\n    public pipeTo(writable: WritableStream<T>, options?: PipeOptions) { return this._getDOMStream().pipeTo(writable, options); }\n    public pipeThrough<R extends ReadableStream<any>>(duplex: { writable: WritableStream<T>, readable: R }, options?: PipeOptions) {\n        return this._getDOMStream().pipeThrough(duplex, options);\n    }\n\n    protected _DOMStream?: ReadableStream<T>;\n    private _getDOMStream() {\n        return this._DOMStream || (this._DOMStream = this.toDOMStream());\n    }\n\n    protected _nodeStream?: import('stream').Readable;\n    private _getNodeStream() {\n        return this._nodeStream || (this._nodeStream = this.toNodeStream());\n    }\n}\n\n/** @ignore */\ntype Resolution<T> = { resolve: (value?: T | PromiseLike<T>) => void; reject: (reason?: any) => void; };\n\n/** @ignore */\nexport class AsyncQueue<TReadable = Uint8Array, TWritable = TReadable> extends ReadableInterop<TReadable>\n    implements AsyncIterableIterator<TReadable>, ReadableWritable<TReadable, TWritable> {\n\n    protected _values: TWritable[] = [];\n    protected _error?: { error: any; };\n    protected _closedPromise: Promise<void>;\n    protected _closedPromiseResolve?: (value?: any) => void;\n    protected resolvers: Resolution<IteratorResult<TReadable>>[] = [];\n\n    constructor() {\n        super();\n        this._closedPromise = new Promise((r) => this._closedPromiseResolve = r);\n    }\n\n    public get closed(): Promise<void> { return this._closedPromise; }\n    public async cancel(reason?: any) { await this.return(reason); }\n    public write(value: TWritable) {\n        if (this._ensureOpen()) {\n            this.resolvers.length <= 0\n                ? (this._values.push(value))\n                : (this.resolvers.shift()!.resolve({ done: false, value } as any));\n        }\n    }\n    public abort(value?: any) {\n        if (this._closedPromiseResolve) {\n            this.resolvers.length <= 0\n                ? (this._error = { error: value })\n                : (this.resolvers.shift()!.reject({ done: true, value }));\n        }\n    }\n    public close() {\n        if (this._closedPromiseResolve) {\n            const { resolvers } = this;\n            while (resolvers.length > 0) {\n                resolvers.shift()!.resolve(ITERATOR_DONE);\n            }\n            this._closedPromiseResolve();\n            this._closedPromiseResolve = undefined;\n        }\n    }\n\n    public [Symbol.asyncIterator]() { return this; }\n    public toDOMStream(options?: ReadableDOMStreamOptions) {\n        return streamAdapters.toDOMStream(\n            (this._closedPromiseResolve || this._error)\n                ? (this as AsyncIterable<TReadable>)\n                : (this._values as any) as Iterable<TReadable>,\n            options);\n    }\n    public toNodeStream(options?: import('stream').ReadableOptions) {\n        return streamAdapters.toNodeStream(\n            (this._closedPromiseResolve || this._error)\n                ? (this as AsyncIterable<TReadable>)\n                : (this._values as any) as Iterable<TReadable>,\n            options);\n    }\n    public async throw(_?: any) { await this.abort(_); return ITERATOR_DONE; }\n    public async return(_?: any) { await this.close(); return ITERATOR_DONE; }\n\n    public async read(size?: number | null): Promise<TReadable | null> { return (await this.next(size, 'read')).value; }\n    public async peek(size?: number | null): Promise<TReadable | null> { return (await this.next(size, 'peek')).value; }\n    public next(..._args: any[]): Promise<IteratorResult<TReadable>> {\n        if (this._values.length > 0) {\n            return Promise.resolve({ done: false, value: this._values.shift()! } as any);\n        } else if (this._error) {\n            return Promise.reject({ done: true, value: this._error.error });\n        } else if (!this._closedPromiseResolve) {\n            return Promise.resolve(ITERATOR_DONE);\n        } else {\n            return new Promise<IteratorResult<TReadable>>((resolve, reject) => {\n                this.resolvers.push({ resolve, reject });\n            });\n        }\n    }\n\n    protected _ensureOpen() {\n        if (this._closedPromiseResolve) {\n            return true;\n        }\n        throw new Error(`${this} is closed`);\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { ReadableInterop, ArrowJSONLike } from '../io/interfaces';\n\n/** @ignore */\ntype FSReadStream = import('fs').ReadStream;\n/** @ignore */\ntype FileHandle = import('fs').promises.FileHandle;\n\n/** @ignore */\nexport interface Subscription {\n    unsubscribe: () => void;\n}\n\n/** @ignore */\nexport interface Observer<T> {\n    closed?: boolean;\n    next: (value: T) => void;\n    error: (err: any) => void;\n    complete: () => void;\n}\n\n/** @ignore */\nexport interface Observable<T> {\n    subscribe: (observer: Observer<T>) => Subscription;\n}\n\n/** @ignore */\nconst [BigIntCtor, BigIntAvailable] = (() => {\n    const BigIntUnavailableError = () => { throw new Error('BigInt is not available in this environment'); };\n    function BigIntUnavailable() { throw BigIntUnavailableError(); }\n    BigIntUnavailable.asIntN = () => { throw BigIntUnavailableError(); };\n    BigIntUnavailable.asUintN = () => { throw BigIntUnavailableError(); };\n    return typeof BigInt !== 'undefined' ? [BigInt, true] : [<any> BigIntUnavailable, false];\n})() as [BigIntConstructor, boolean];\n\n/** @ignore */\nconst [BigInt64ArrayCtor, BigInt64ArrayAvailable] = (() => {\n    const BigInt64ArrayUnavailableError = () => { throw new Error('BigInt64Array is not available in this environment'); };\n    class BigInt64ArrayUnavailable {\n        static get BYTES_PER_ELEMENT() { return 8; }\n        static of() { throw BigInt64ArrayUnavailableError(); }\n        static from() { throw BigInt64ArrayUnavailableError(); }\n        constructor() { throw BigInt64ArrayUnavailableError(); }\n    }\n    return typeof BigInt64Array !== 'undefined' ? [BigInt64Array, true] : [<any> BigInt64ArrayUnavailable, false];\n})() as [BigInt64ArrayConstructor, boolean];\n\n/** @ignore */\nconst [BigUint64ArrayCtor, BigUint64ArrayAvailable] = (() => {\n    const BigUint64ArrayUnavailableError = () => { throw new Error('BigUint64Array is not available in this environment'); };\n    class BigUint64ArrayUnavailable {\n        static get BYTES_PER_ELEMENT() { return 8; }\n        static of() { throw BigUint64ArrayUnavailableError(); }\n        static from() { throw BigUint64ArrayUnavailableError(); }\n        constructor() { throw BigUint64ArrayUnavailableError(); }\n    }\n    return typeof BigUint64Array !== 'undefined' ? [BigUint64Array, true] : [<any> BigUint64ArrayUnavailable, false];\n})() as [BigUint64ArrayConstructor, boolean];\n\nexport { BigIntCtor as BigInt, BigIntAvailable };\nexport { BigInt64ArrayCtor as BigInt64Array, BigInt64ArrayAvailable };\nexport { BigUint64ArrayCtor as BigUint64Array, BigUint64ArrayAvailable };\n\n/** @ignore */ const isNumber = (x: any) => typeof x === 'number';\n/** @ignore */ const isBoolean = (x: any) => typeof x === 'boolean';\n/** @ignore */ const isFunction = (x: any) => typeof x === 'function';\n/** @ignore */\nexport const isObject = (x: any): x is Object => x != null && Object(x) === x;\n\n/** @ignore */\nexport const isPromise = <T = any>(x: any): x is PromiseLike<T> => {\n    return isObject(x) && isFunction(x.then);\n};\n\n/** @ignore */\nexport const isObservable = <T = any>(x: any): x is Observable<T> => {\n    return isObject(x) && isFunction(x.subscribe);\n};\n\n/** @ignore */\nexport const isIterable = <T = any>(x: any): x is Iterable<T> => {\n    return isObject(x) && isFunction(x[Symbol.iterator]);\n};\n\n/** @ignore */\nexport const isAsyncIterable = <T = any>(x: any): x is AsyncIterable<T> => {\n    return isObject(x) && isFunction(x[Symbol.asyncIterator]);\n};\n\n/** @ignore */\nexport const isArrowJSON = (x: any): x is ArrowJSONLike  => {\n    return isObject(x) && isObject(x['schema']);\n};\n\n/** @ignore */\nexport const isArrayLike = <T = any>(x: any): x is ArrayLike<T> => {\n    return isObject(x) && isNumber(x['length']);\n};\n\n/** @ignore */\nexport const isIteratorResult = <T = any>(x: any): x is IteratorResult<T> => {\n    return isObject(x) && ('done' in x) && ('value' in x);\n};\n\n/** @ignore */\nexport const isUnderlyingSink = <T = any>(x: any): x is UnderlyingSink<T> => {\n    return isObject(x) &&\n        isFunction(x['abort']) &&\n        isFunction(x['close']) &&\n        isFunction(x['start']) &&\n        isFunction(x['write']);\n};\n\n/** @ignore */\nexport const isFileHandle = (x: any): x is FileHandle => {\n    return isObject(x) && isFunction(x['stat']) && isNumber(x['fd']);\n};\n\n/** @ignore */\nexport const isFSReadStream = (x: any): x is FSReadStream => {\n    return isReadableNodeStream(x) && isNumber((<any> x)['bytesRead']);\n};\n\n/** @ignore */\nexport const isFetchResponse = (x: any): x is Response => {\n    return isObject(x) && isReadableDOMStream(x['body']);\n};\n\n/** @ignore */\nexport const isWritableDOMStream = <T = any>(x: any): x is WritableStream<T> => {\n    return isObject(x) &&\n        isFunction(x['abort']) &&\n        isFunction(x['getWriter']) &&\n        !(x instanceof ReadableInterop);\n};\n\n/** @ignore */\nexport const isReadableDOMStream = <T = any>(x: any): x is ReadableStream<T> => {\n    return isObject(x) &&\n        isFunction(x['cancel']) &&\n        isFunction(x['getReader']) &&\n        !(x instanceof ReadableInterop);\n};\n\n/** @ignore */\nexport const isWritableNodeStream = (x: any): x is NodeJS.WritableStream => {\n    return isObject(x) &&\n        isFunction(x['end']) &&\n        isFunction(x['write']) &&\n        isBoolean(x['writable']) &&\n        !(x instanceof ReadableInterop);\n};\n\n/** @ignore */\nexport const isReadableNodeStream = (x: any): x is NodeJS.ReadableStream => {\n    return isObject(x) &&\n        isFunction(x['read']) &&\n        isFunction(x['pipe']) &&\n        isBoolean(x['readable']) &&\n        !(x instanceof ReadableInterop);\n};\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { flatbuffers } from 'flatbuffers';\nimport { encodeUtf8 } from '../util/utf8';\nimport ByteBuffer = flatbuffers.ByteBuffer;\nimport { TypedArray, TypedArrayConstructor } from '../interfaces';\nimport { BigIntArray, BigIntArrayConstructor } from '../interfaces';\nimport { isPromise, isIterable, isAsyncIterable, isIteratorResult, BigInt64Array, BigUint64Array } from './compat';\n\n/** @ignore */\nconst SharedArrayBuf = (typeof SharedArrayBuffer !== 'undefined' ? SharedArrayBuffer : ArrayBuffer);\n\n/** @ignore */\nfunction collapseContiguousByteRanges(chunks: Uint8Array[]) {\n    let result = chunks[0] ? [chunks[0]] : [];\n    let xOffset: number, yOffset: number, xLen: number, yLen: number;\n    for (let x, y, i = 0, j = 0, n = chunks.length; ++i < n;) {\n        x = result[j];\n        y = chunks[i];\n        // continue if x and y don't share the same underlying ArrayBuffer, or if x isn't before y\n        if (!x || !y || x.buffer !== y.buffer || y.byteOffset < x.byteOffset) {\n            y && (result[++j] = y);\n            continue;\n        }\n        ({ byteOffset: xOffset, byteLength: xLen } = x);\n        ({ byteOffset: yOffset, byteLength: yLen } = y);\n        // continue if the byte ranges of x and y aren't contiguous\n        if ((xOffset + xLen) < yOffset || (yOffset + yLen) < xOffset) {\n            y && (result[++j] = y);\n            continue;\n        }\n        result[j] = new Uint8Array(x.buffer, xOffset, yOffset - xOffset + yLen);\n    }\n    return result;\n}\n\n/** @ignore */\nexport function memcpy<TTarget extends ArrayBufferView, TSource extends ArrayBufferView>(target: TTarget, source: TSource, targetByteOffset = 0, sourceByteLength = source.byteLength) {\n    const targetByteLength = target.byteLength;\n    const dst = new Uint8Array(target.buffer, target.byteOffset, targetByteLength);\n    const src = new Uint8Array(source.buffer, source.byteOffset, Math.min(sourceByteLength, targetByteLength));\n    dst.set(src, targetByteOffset);\n    return target;\n}\n\n/** @ignore */\nexport function joinUint8Arrays(chunks: Uint8Array[], size?: number | null): [Uint8Array, Uint8Array[], number] {\n    // collapse chunks that share the same underlying ArrayBuffer and whose byte ranges overlap,\n    // to avoid unnecessarily copying the bytes to do this buffer join. This is a common case during\n    // streaming, where we may be reading partial byte ranges out of the same underlying ArrayBuffer\n    let result = collapseContiguousByteRanges(chunks);\n    let byteLength = result.reduce((x, b) => x + b.byteLength, 0);\n    let source: Uint8Array, sliced: Uint8Array, buffer: Uint8Array | void;\n    let offset = 0, index = -1, length = Math.min(size || Infinity, byteLength);\n    for (let n = result.length; ++index < n;) {\n        source = result[index];\n        sliced = source.subarray(0, Math.min(source.length, length - offset));\n        if (length <= (offset + sliced.length)) {\n            if (sliced.length < source.length) {\n                result[index] = source.subarray(sliced.length);\n            } else if (sliced.length === source.length) { index++; }\n            buffer ? memcpy(buffer, sliced, offset) : (buffer = sliced);\n            break;\n        }\n        memcpy(buffer || (buffer = new Uint8Array(length)), sliced, offset);\n        offset += sliced.length;\n    }\n    return [buffer || new Uint8Array(0), result.slice(index), byteLength - (buffer ? buffer.byteLength : 0)];\n}\n\n/** @ignore */\nexport type ArrayBufferViewInput = ArrayBufferView | ArrayBufferLike | ArrayBufferView | Iterable<number> | ArrayLike<number> | ByteBuffer | string | null | undefined  |\n                    IteratorResult<ArrayBufferView | ArrayBufferLike | ArrayBufferView | Iterable<number> | ArrayLike<number> | ByteBuffer | string | null | undefined> |\n          ReadableStreamReadResult<ArrayBufferView | ArrayBufferLike | ArrayBufferView | Iterable<number> | ArrayLike<number> | ByteBuffer | string | null | undefined> ;\n\n/** @ignore */\nexport function toArrayBufferView<T extends TypedArray>(ArrayBufferViewCtor: TypedArrayConstructor<T>, input: ArrayBufferViewInput): T;\nexport function toArrayBufferView<T extends BigIntArray>(ArrayBufferViewCtor: BigIntArrayConstructor<T>, input: ArrayBufferViewInput): T;\nexport function toArrayBufferView(ArrayBufferViewCtor: any, input: ArrayBufferViewInput) {\n\n    let value: any = isIteratorResult(input) ? input.value : input;\n\n    if (value instanceof ArrayBufferViewCtor) {\n        if (ArrayBufferViewCtor === Uint8Array) {\n            // Node's `Buffer` class passes the `instanceof Uint8Array` check, but we need\n            // a real Uint8Array, since Buffer#slice isn't the same as Uint8Array#slice :/\n            return new ArrayBufferViewCtor(value.buffer, value.byteOffset, value.byteLength);\n        }\n        return value;\n    }\n    if (!value) { return new ArrayBufferViewCtor(0); }\n    if (typeof value === 'string') { value = encodeUtf8(value); }\n    if (value instanceof ArrayBuffer) { return new ArrayBufferViewCtor(value); }\n    if (value instanceof SharedArrayBuf) { return new ArrayBufferViewCtor(value); }\n    if (value instanceof ByteBuffer) { return toArrayBufferView(ArrayBufferViewCtor, value.bytes()); }\n    return !ArrayBuffer.isView(value) ? ArrayBufferViewCtor.from(value) : value.byteLength <= 0 ? new ArrayBufferViewCtor(0)\n        : new ArrayBufferViewCtor(value.buffer, value.byteOffset, value.byteLength / ArrayBufferViewCtor.BYTES_PER_ELEMENT);\n}\n\n/** @ignore */ export const toInt8Array = (input: ArrayBufferViewInput) => toArrayBufferView(Int8Array, input);\n/** @ignore */ export const toInt16Array = (input: ArrayBufferViewInput) => toArrayBufferView(Int16Array, input);\n/** @ignore */ export const toInt32Array = (input: ArrayBufferViewInput) => toArrayBufferView(Int32Array, input);\n/** @ignore */ export const toBigInt64Array = (input: ArrayBufferViewInput) => toArrayBufferView(BigInt64Array, input);\n/** @ignore */ export const toUint8Array = (input: ArrayBufferViewInput) => toArrayBufferView(Uint8Array, input);\n/** @ignore */ export const toUint16Array = (input: ArrayBufferViewInput) => toArrayBufferView(Uint16Array, input);\n/** @ignore */ export const toUint32Array = (input: ArrayBufferViewInput) => toArrayBufferView(Uint32Array, input);\n/** @ignore */ export const toBigUint64Array = (input: ArrayBufferViewInput) => toArrayBufferView(BigUint64Array, input);\n/** @ignore */ export const toFloat32Array = (input: ArrayBufferViewInput) => toArrayBufferView(Float32Array, input);\n/** @ignore */ export const toFloat64Array = (input: ArrayBufferViewInput) => toArrayBufferView(Float64Array, input);\n/** @ignore */ export const toUint8ClampedArray = (input: ArrayBufferViewInput) => toArrayBufferView(Uint8ClampedArray, input);\n\n/** @ignore */\ntype ArrayBufferViewIteratorInput = Iterable<ArrayBufferViewInput> | ArrayBufferViewInput;\n\n/** @ignore */\nconst pump = <T extends Iterator<any> | AsyncIterator<any>>(iterator: T) => { iterator.next(); return iterator; };\n\n/** @ignore */\nexport function* toArrayBufferViewIterator<T extends TypedArray>(ArrayCtor: TypedArrayConstructor<T>, source: ArrayBufferViewIteratorInput) {\n\n    const wrap = function*<T>(x: T) { yield x; };\n    const buffers: Iterable<ArrayBufferViewInput> =\n                   (typeof source === 'string') ? wrap(source)\n                 : (ArrayBuffer.isView(source)) ? wrap(source)\n              : (source instanceof ArrayBuffer) ? wrap(source)\n           : (source instanceof SharedArrayBuf) ? wrap(source)\n    : !isIterable<ArrayBufferViewInput>(source) ? wrap(source) : source;\n\n    yield* pump((function* (it) {\n        let r: IteratorResult<any> = <any> null;\n        do {\n            r = it.next(yield toArrayBufferView(ArrayCtor, r));\n        } while (!r.done);\n    })(buffers[Symbol.iterator]()));\n}\n\n/** @ignore */ export const toInt8ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Int8Array, input);\n/** @ignore */ export const toInt16ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Int16Array, input);\n/** @ignore */ export const toInt32ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Int32Array, input);\n/** @ignore */ export const toUint8ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Uint8Array, input);\n/** @ignore */ export const toUint16ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Uint16Array, input);\n/** @ignore */ export const toUint32ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Uint32Array, input);\n/** @ignore */ export const toFloat32ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Float32Array, input);\n/** @ignore */ export const toFloat64ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Float64Array, input);\n/** @ignore */ export const toUint8ClampedArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Uint8ClampedArray, input);\n\n/** @ignore */\ntype ArrayBufferViewAsyncIteratorInput = AsyncIterable<ArrayBufferViewInput> | Iterable<ArrayBufferViewInput> | PromiseLike<ArrayBufferViewInput> | ArrayBufferViewInput;\n\n/** @ignore */\nexport async function* toArrayBufferViewAsyncIterator<T extends TypedArray>(ArrayCtor: TypedArrayConstructor<T>, source: ArrayBufferViewAsyncIteratorInput): AsyncIterableIterator<T> {\n\n    // if a Promise, unwrap the Promise and iterate the resolved value\n    if (isPromise<ArrayBufferViewInput>(source)) {\n        return yield* toArrayBufferViewAsyncIterator(ArrayCtor, await source);\n    }\n\n    const wrap = async function*<T>(x: T) { yield await x; };\n    const emit = async function* <T extends Iterable<any>>(source: T) {\n        yield* pump((function*(it: Iterator<any>) {\n            let r: IteratorResult<any> = <any> null;\n            do {\n                r = it.next(yield r && r.value);\n            } while (!r.done);\n        })(source[Symbol.iterator]()));\n    };\n\n    const buffers: AsyncIterable<ArrayBufferViewInput> =\n                        (typeof source === 'string') ? wrap(source) // if string, wrap in an AsyncIterableIterator\n                      : (ArrayBuffer.isView(source)) ? wrap(source) // if TypedArray, wrap in an AsyncIterableIterator\n                   : (source instanceof ArrayBuffer) ? wrap(source) // if ArrayBuffer, wrap in an AsyncIterableIterator\n                : (source instanceof SharedArrayBuf) ? wrap(source) // if SharedArrayBuffer, wrap in an AsyncIterableIterator\n          : isIterable<ArrayBufferViewInput>(source) ? emit(source) // If Iterable, wrap in an AsyncIterableIterator and compose the `next` values\n    : !isAsyncIterable<ArrayBufferViewInput>(source) ? wrap(source) // If not an AsyncIterable, treat as a sentinel and wrap in an AsyncIterableIterator\n                                                     : source; // otherwise if AsyncIterable, use it\n\n    yield* pump((async function* (it) {\n        let r: IteratorResult<any> = <any> null;\n        do {\n            r = await it.next(yield toArrayBufferView(ArrayCtor, r));\n        } while (!r.done);\n    })(buffers[Symbol.asyncIterator]()));\n}\n\n/** @ignore */ export const toInt8ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Int8Array, input);\n/** @ignore */ export const toInt16ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Int16Array, input);\n/** @ignore */ export const toInt32ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Int32Array, input);\n/** @ignore */ export const toUint8ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Uint8Array, input);\n/** @ignore */ export const toUint16ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Uint16Array, input);\n/** @ignore */ export const toUint32ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Uint32Array, input);\n/** @ignore */ export const toFloat32ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Float32Array, input);\n/** @ignore */ export const toFloat64ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Float64Array, input);\n/** @ignore */ export const toUint8ClampedArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Uint8ClampedArray, input);\n\n/** @ignore */\nexport function rebaseValueOffsets(offset: number, length: number, valueOffsets: Int32Array) {\n    // If we have a non-zero offset, create a new offsets array with the values\n    // shifted by the start offset, such that the new start offset is 0\n    if (offset !== 0) {\n        valueOffsets = valueOffsets.slice(0, length + 1);\n        for (let i = -1; ++i <= length;) {\n            valueOffsets[i] += offset;\n        }\n    }\n    return valueOffsets;\n}\n\n/** @ignore */\nexport function compareArrayLike<T extends ArrayLike<any>>(a: T, b: T) {\n    let i = 0, n = a.length;\n    if (n !== b.length) { return false; }\n    if (n > 0) {\n        do { if (a[i] !== b[i]) { return false; } } while (++i < n);\n    }\n    return true;\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport {\n    toUint8Array,\n    joinUint8Arrays,\n    ArrayBufferViewInput,\n    toUint8ArrayIterator,\n    toUint8ArrayAsyncIterator\n} from '../util/buffer';\n\nimport { ReadableDOMStreamOptions } from './interfaces';\n\n/** @ignore */\nexport default {\n    fromIterable<T extends ArrayBufferViewInput>(source: Iterable<T> | T): IterableIterator<Uint8Array> {\n        return pump(fromIterable<T>(source));\n    },\n    fromAsyncIterable<T extends ArrayBufferViewInput>(source: AsyncIterable<T> | PromiseLike<T>): AsyncIterableIterator<Uint8Array> {\n        return pump(fromAsyncIterable<T>(source));\n    },\n    fromDOMStream<T extends ArrayBufferViewInput>(source: ReadableStream<T>): AsyncIterableIterator<Uint8Array> {\n        return pump(fromDOMStream<T>(source));\n    },\n    fromNodeStream(stream: NodeJS.ReadableStream): AsyncIterableIterator<Uint8Array> {\n        return pump(fromNodeStream(stream));\n    },\n    // @ts-ignore\n    toDOMStream<T>(source: Iterable<T> | AsyncIterable<T>, options?: ReadableDOMStreamOptions): ReadableStream<T> {\n        throw new Error(`\"toDOMStream\" not available in this environment`);\n    },\n    // @ts-ignore\n    toNodeStream<T>(source: Iterable<T> | AsyncIterable<T>, options?: import('stream').ReadableOptions): import('stream').Readable {\n        throw new Error(`\"toNodeStream\" not available in this environment`);\n    },\n};\n\n/** @ignore */\nconst pump = <T extends Iterator<any> | AsyncIterator<any>>(iterator: T) => { iterator.next(); return iterator; };\n\n/** @ignore */\nfunction* fromIterable<T extends ArrayBufferViewInput>(source: Iterable<T> | T): IterableIterator<Uint8Array> {\n\n    let done: boolean, threw = false;\n    let buffers: Uint8Array[] = [], buffer: Uint8Array;\n    let cmd: 'peek' | 'read', size: number, bufferLength = 0;\n\n    function byteRange() {\n        if (cmd === 'peek') {\n            return joinUint8Arrays(buffers, size)[0];\n        }\n        [buffer, buffers, bufferLength] = joinUint8Arrays(buffers, size);\n        return buffer;\n    }\n\n    // Yield so the caller can inject the read command before creating the source Iterator\n    ({ cmd, size } = yield <any> null);\n\n    // initialize the iterator\n    let it = toUint8ArrayIterator(source)[Symbol.iterator]();\n\n    try {\n        do {\n            // read the next value\n            ({ done, value: buffer } = isNaN(size - bufferLength) ?\n                it.next(undefined) : it.next(size - bufferLength));\n            // if chunk is not null or empty, push it onto the queue\n            if (!done && buffer.byteLength > 0) {\n                buffers.push(buffer);\n                bufferLength += buffer.byteLength;\n            }\n            // If we have enough bytes in our buffer, yield chunks until we don't\n            if (done || size <= bufferLength) {\n                do {\n                    ({ cmd, size } = yield byteRange());\n                } while (size < bufferLength);\n            }\n        } while (!done);\n    } catch (e) {\n        (threw = true) && (typeof it.throw === 'function') && (it.throw(e));\n    } finally {\n        (threw === false) && (typeof it.return === 'function') && (it.return());\n    }\n}\n\n/** @ignore */\nasync function* fromAsyncIterable<T extends ArrayBufferViewInput>(source: AsyncIterable<T> | PromiseLike<T>): AsyncIterableIterator<Uint8Array> {\n\n    let done: boolean, threw = false;\n    let buffers: Uint8Array[] = [], buffer: Uint8Array;\n    let cmd: 'peek' | 'read', size: number, bufferLength = 0;\n\n    function byteRange() {\n        if (cmd === 'peek') {\n            return joinUint8Arrays(buffers, size)[0];\n        }\n        [buffer, buffers, bufferLength] = joinUint8Arrays(buffers, size);\n        return buffer;\n    }\n\n    // Yield so the caller can inject the read command before creating the source AsyncIterator\n    ({ cmd, size } = yield <any> null);\n\n    // initialize the iterator\n    let it = toUint8ArrayAsyncIterator(source)[Symbol.asyncIterator]();\n\n    try {\n        do {\n            // read the next value\n            ({ done, value: buffer } = isNaN(size - bufferLength)\n                ? await it.next(undefined)\n                : await it.next(size - bufferLength));\n            // if chunk is not null or empty, push it onto the queue\n            if (!done && buffer.byteLength > 0) {\n                buffers.push(buffer);\n                bufferLength += buffer.byteLength;\n            }\n            // If we have enough bytes in our buffer, yield chunks until we don't\n            if (done || size <= bufferLength) {\n                do {\n                    ({ cmd, size } = yield byteRange());\n                } while (size < bufferLength);\n            }\n        } while (!done);\n    } catch (e) {\n        (threw = true) && (typeof it.throw === 'function') && (await it.throw(e));\n    } finally {\n        (threw === false) && (typeof it.return === 'function') && (await it.return());\n    }\n}\n\n// All this manual Uint8Array chunk management can be avoided if/when engines\n// add support for ArrayBuffer.transfer() or ArrayBuffer.prototype.realloc():\n// https://github.com/domenic/proposal-arraybuffer-transfer\n/** @ignore */\nasync function* fromDOMStream<T extends ArrayBufferViewInput>(source: ReadableStream<T>): AsyncIterableIterator<Uint8Array> {\n\n    let done = false, threw = false;\n    let buffers: Uint8Array[] = [], buffer: Uint8Array;\n    let cmd: 'peek' | 'read', size: number, bufferLength = 0;\n\n    function byteRange() {\n        if (cmd === 'peek') {\n            return joinUint8Arrays(buffers, size)[0];\n        }\n        [buffer, buffers, bufferLength] = joinUint8Arrays(buffers, size);\n        return buffer;\n    }\n\n    // Yield so the caller can inject the read command before we establish the ReadableStream lock\n    ({ cmd, size } = yield <any> null);\n\n    // initialize the reader and lock the stream\n    let it = new AdaptiveByteReader(source);\n\n    try {\n        do {\n            // read the next value\n            ({ done, value: buffer } = isNaN(size - bufferLength)\n                ? await it['read'](undefined)\n                : await it['read'](size - bufferLength));\n            // if chunk is not null or empty, push it onto the queue\n            if (!done && buffer.byteLength > 0) {\n                buffers.push(toUint8Array(buffer));\n                bufferLength += buffer.byteLength;\n            }\n            // If we have enough bytes in our buffer, yield chunks until we don't\n            if (done || size <= bufferLength) {\n                do {\n                    ({ cmd, size } = yield byteRange());\n                } while (size < bufferLength);\n            }\n        } while (!done);\n    } catch (e) {\n        (threw = true) && (await it['cancel'](e));\n    } finally {\n        (threw === false) ? (await it['cancel']())\n            : source['locked'] && it.releaseLock();\n    }\n}\n\n/** @ignore */\nclass AdaptiveByteReader<T extends ArrayBufferViewInput> {\n\n    private supportsBYOB: boolean;\n    private byobReader: ReadableStreamBYOBReader | null = null;\n    private defaultReader: ReadableStreamDefaultReader<T> | null = null;\n    private reader: ReadableStreamBYOBReader | ReadableStreamDefaultReader<T> | null;\n\n    constructor(private source: ReadableStream<T>) {\n        try {\n            this.supportsBYOB = !!(this.reader = this.getBYOBReader());\n        } catch (e) {\n            this.supportsBYOB = !!!(this.reader = this.getDefaultReader());\n        }\n    }\n\n    get closed(): Promise<void> {\n        return this.reader ? this.reader['closed'].catch(() => {}) : Promise.resolve();\n    }\n\n    releaseLock(): void {\n        if (this.reader) {\n            this.reader.releaseLock();\n        }\n        this.reader = this.byobReader = this.defaultReader = null;\n    }\n\n    async cancel(reason?: any): Promise<void> {\n        const { reader, source } = this;\n        reader && (await reader['cancel'](reason).catch(() => {}));\n        source && (source['locked'] && this.releaseLock());\n    }\n\n    async read(size?: number): Promise<ReadableStreamReadResult<Uint8Array>> {\n        if (size === 0) {\n            return { done: this.reader == null, value: new Uint8Array(0) };\n        }\n        const result = !this.supportsBYOB || typeof size !== 'number'\n            ? await this.getDefaultReader().read()\n            : await this.readFromBYOBReader(size);\n        !result.done && (result.value = toUint8Array(result as ReadableStreamReadResult<Uint8Array>));\n        return result as ReadableStreamReadResult<Uint8Array>;\n    }\n\n    private getDefaultReader() {\n        if (this.byobReader) { this.releaseLock(); }\n        if (!this.defaultReader) {\n            this.defaultReader = this.source['getReader']();\n            // We have to catch and swallow errors here to avoid uncaught promise rejection exceptions\n            // that seem to be raised when we call `releaseLock()` on this reader. I'm still mystified\n            // about why these errors are raised, but I'm sure there's some important spec reason that\n            // I haven't considered. I hate to employ such an anti-pattern here, but it seems like the\n            // only solution in this case :/\n            this.defaultReader['closed'].catch(() => {});\n        }\n        return (this.reader = this.defaultReader);\n    }\n\n    private getBYOBReader() {\n        if (this.defaultReader) { this.releaseLock(); }\n        if (!this.byobReader) {\n            this.byobReader = this.source['getReader']({ mode: 'byob' });\n            // We have to catch and swallow errors here to avoid uncaught promise rejection exceptions\n            // that seem to be raised when we call `releaseLock()` on this reader. I'm still mystified\n            // about why these errors are raised, but I'm sure there's some important spec reason that\n            // I haven't considered. I hate to employ such an anti-pattern here, but it seems like the\n            // only solution in this case :/\n            this.byobReader['closed'].catch(() => {});\n        }\n        return (this.reader = this.byobReader);\n    }\n\n    // This strategy plucked from the example in the streams spec:\n    // https://streams.spec.whatwg.org/#example-manual-read-bytes\n    private async readFromBYOBReader(size: number) {\n        return await readInto(this.getBYOBReader(), new ArrayBuffer(size), 0, size);\n    }\n}\n\n/** @ignore */\nasync function readInto(reader: ReadableStreamBYOBReader, buffer: ArrayBufferLike, offset: number, size: number): Promise<ReadableStreamReadResult<Uint8Array>> {\n    if (offset >= size) {\n        return { done: false, value: new Uint8Array(buffer, 0, size) };\n    }\n    const { done, value } = await reader.read(new Uint8Array(buffer, offset, size - offset));\n    if (((offset += value.byteLength) < size) && !done) {\n        return await readInto(reader, value.buffer, offset, size);\n    }\n    return { done, value: new Uint8Array(value.buffer, 0, offset) };\n}\n\n/** @ignore */\ntype EventName = 'end' | 'error' | 'readable';\n/** @ignore */\ntype Event = [EventName, (_: any) => void, Promise<[EventName, Error | null]>];\n/** @ignore */\nconst onEvent = <T extends string>(stream: NodeJS.ReadableStream, event: T) => {\n    let handler = (_: any) => resolve([event, _]);\n    let resolve: (value?: [T, any] | PromiseLike<[T, any]>) => void;\n    return [event, handler, new Promise<[T, any]>(\n        (r) => (resolve = r) && stream['once'](event, handler)\n    )] as Event;\n};\n\n/** @ignore */\nasync function* fromNodeStream(stream: NodeJS.ReadableStream): AsyncIterableIterator<Uint8Array> {\n\n    let events: Event[] = [];\n    let event: EventName = 'error';\n    let done = false, err: Error | null = null;\n    let cmd: 'peek' | 'read', size: number, bufferLength = 0;\n    let buffers: Uint8Array[] = [], buffer: Uint8Array | Buffer | string;\n\n    function byteRange() {\n        if (cmd === 'peek') {\n            return joinUint8Arrays(buffers, size)[0];\n        }\n        [buffer, buffers, bufferLength] = joinUint8Arrays(buffers, size);\n        return buffer;\n    }\n\n    // Yield so the caller can inject the read command before we\n    // add the listener for the source stream's 'readable' event.\n    ({ cmd, size } = yield <any> null);\n\n    // ignore stdin if it's a TTY\n    if ((stream as any)['isTTY']) { return yield new Uint8Array(0); }\n\n    try {\n        // initialize the stream event handlers\n        events[0] = onEvent(stream, 'end');\n        events[1] = onEvent(stream, 'error');\n\n        do {\n            events[2] = onEvent(stream, 'readable');\n\n            // wait on the first message event from the stream\n            [event, err] = await Promise.race(events.map((x) => x[2]));\n\n            // if the stream emitted an Error, rethrow it\n            if (event === 'error') { break; }\n            if (!(done = event === 'end')) {\n                // If the size is NaN, request to read everything in the stream's internal buffer\n                if (!isFinite(size - bufferLength)) {\n                    buffer = toUint8Array(stream['read'](undefined));\n                } else {\n                    buffer = toUint8Array(stream['read'](size - bufferLength));\n                    // If the byteLength is 0, then the requested amount is more than the stream has\n                    // in its internal buffer. In this case the stream needs a \"kick\" to tell it to\n                    // continue emitting readable events, so request to read everything the stream\n                    // has in its internal buffer right now.\n                    if (buffer.byteLength < (size - bufferLength)) {\n                        buffer = toUint8Array(stream['read'](undefined));\n                    }\n                }\n                // if chunk is not null or empty, push it onto the queue\n                if (buffer.byteLength > 0) {\n                    buffers.push(buffer);\n                    bufferLength += buffer.byteLength;\n                }\n            }\n            // If we have enough bytes in our buffer, yield chunks until we don't\n            if (done || size <= bufferLength) {\n                do {\n                    ({ cmd, size } = yield byteRange());\n                } while (size < bufferLength);\n            }\n        } while (!done);\n    } finally {\n        await cleanup(events, event === 'error' ? err : null);\n    }\n\n    function cleanup<T extends Error | null | void>(events: Event[], err?: T) {\n        buffer = buffers = <any> null;\n        return new Promise<T>(async (resolve, reject) => {\n            for (const [evt, fn] of events) {\n                stream['off'](evt, fn);\n            }\n            try {\n                // Some stream implementations don't call the destroy callback,\n                // because it's really a node-internal API. Just calling `destroy`\n                // here should be enough to conform to the ReadableStream contract\n                const destroy = (stream as any)['destroy'];\n                destroy && destroy.call(stream, err);\n                err = undefined;\n            } catch (e) { err = e || err; } finally {\n                err != null ? reject(err) : resolve();\n            }\n        });\n    }\n}\n","export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","import defineProperty from \"./defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nexport default function _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}","import superPropBase from \"./superPropBase\";\nexport default function _get(target, property, receiver) {\n  if (typeof Reflect !== \"undefined\" && Reflect.get) {\n    _get = Reflect.get;\n  } else {\n    _get = function _get(target, property, receiver) {\n      var base = superPropBase(target, property);\n      if (!base) return;\n      var desc = Object.getOwnPropertyDescriptor(base, property);\n\n      if (desc.get) {\n        return desc.get.call(receiver);\n      }\n\n      return desc.value;\n    };\n  }\n\n  return _get(target, property, receiver || target);\n}","import getPrototypeOf from \"./getPrototypeOf\";\nexport default function _superPropBase(object, property) {\n  while (!Object.prototype.hasOwnProperty.call(object, property)) {\n    object = getPrototypeOf(object);\n    if (object === null) break;\n  }\n\n  return object;\n}","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from './data';\nimport { DataType } from './type';\nimport { Chunked } from './vector/chunked';\n\n/** @ignore */\nexport interface Clonable<R extends AbstractVector> {\n    clone(...args: any[]): R;\n}\n\n/** @ignore */\nexport interface Sliceable<R extends AbstractVector> {\n    slice(begin?: number, end?: number): R;\n}\n\n/** @ignore */\nexport interface Applicative<T extends DataType, R extends Chunked> {\n    concat(...others: Vector<T>[]): R;\n    readonly [Symbol.isConcatSpreadable]: boolean;\n}\n\nexport interface AbstractVector<T extends DataType = any>\n    extends Clonable<Vector<T>>,\n            Sliceable<Vector<T>>,\n            Applicative<T, Chunked<T>> {\n\n    readonly TType: T['TType'];\n    readonly TArray: T['TArray'];\n    readonly TValue: T['TValue'];\n}\n\nexport abstract class AbstractVector<T extends DataType = any> implements Iterable<T['TValue'] | null> {\n\n    public abstract readonly data: Data<T>;\n    public abstract readonly type: T;\n    public abstract readonly typeId: T['TType'];\n    public abstract readonly length: number;\n    public abstract readonly stride: number;\n    public abstract readonly nullCount: number;\n    public abstract readonly byteLength: number;\n    public abstract readonly numChildren: number;\n\n    public abstract readonly ArrayType: T['ArrayType'];\n\n    public abstract isValid(index: number): boolean;\n    public abstract get(index: number): T['TValue'] | null;\n    public abstract set(index: number, value: T['TValue'] | null): void;\n    public abstract indexOf(value: T['TValue'] | null, fromIndex?: number): number;\n    public abstract [Symbol.iterator](): IterableIterator<T['TValue'] | null>;\n\n    public abstract toArray(): T['TArray'];\n    public abstract getChildAt<R extends DataType = any>(index: number): Vector<R> | null;\n}\n\nexport { AbstractVector as Vector };\n","/* tslint:disable:class-name */\n\n// automatically generated by the FlatBuffers compiler, do not modify\n\nimport { flatbuffers } from 'flatbuffers';\n/**\n * @enum {number}\n */\nexport namespace org.apache.arrow.flatbuf {\n    export enum MetadataVersion {\n        /**\n         * 0.1.0\n         */\n        V1 = 0,\n\n        /**\n         * 0.2.0\n         */\n        V2 = 1,\n\n        /**\n         * 0.3.0 -> 0.7.1\n         */\n        V3 = 2,\n\n        /**\n         * >= 0.8.0\n         */\n        V4 = 3\n    }\n}\n\n/**\n * @enum {number}\n */\nexport namespace org.apache.arrow.flatbuf {\n    export enum UnionMode {\n        Sparse = 0,\n        Dense = 1\n    }\n}\n\n/**\n * @enum {number}\n */\nexport namespace org.apache.arrow.flatbuf {\n    export enum Precision {\n        HALF = 0,\n        SINGLE = 1,\n        DOUBLE = 2\n    }\n}\n\n/**\n * @enum {number}\n */\nexport namespace org.apache.arrow.flatbuf {\n    export enum DateUnit {\n        DAY = 0,\n        MILLISECOND = 1\n    }\n}\n\n/**\n * @enum {number}\n */\nexport namespace org.apache.arrow.flatbuf {\n    export enum TimeUnit {\n        SECOND = 0,\n        MILLISECOND = 1,\n        MICROSECOND = 2,\n        NANOSECOND = 3\n    }\n}\n\n/**\n * @enum {number}\n */\nexport namespace org.apache.arrow.flatbuf {\n    export enum IntervalUnit {\n        YEAR_MONTH = 0,\n        DAY_TIME = 1\n    }\n}\n\n/**\n * ----------------------------------------------------------------------\n * Top-level Type value, enabling extensible type-specific metadata. We can\n * add new logical types to Type without breaking backwards compatibility\n *\n * @enum {number}\n */\nexport namespace org.apache.arrow.flatbuf {\n    export enum Type {\n        NONE = 0,\n        Null = 1,\n        Int = 2,\n        FloatingPoint = 3,\n        Binary = 4,\n        Utf8 = 5,\n        Bool = 6,\n        Decimal = 7,\n        Date = 8,\n        Time = 9,\n        Timestamp = 10,\n        Interval = 11,\n        List = 12,\n        Struct_ = 13,\n        Union = 14,\n        FixedSizeBinary = 15,\n        FixedSizeList = 16,\n        Map = 17,\n        Duration = 18,\n        LargeBinary = 19,\n        LargeUtf8 = 20,\n        LargeList = 21\n    }\n}\n\n/**\n * ----------------------------------------------------------------------\n * Endianness of the platform producing the data\n *\n * @enum {number}\n */\nexport namespace org.apache.arrow.flatbuf {\n    export enum Endianness {\n        Little = 0,\n        Big = 1\n    }\n}\n\n/**\n * These are stored in the flatbuffer in the Type union below\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Null {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Null\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Null {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Null= obj\n         * @returns Null\n         */\n        static getRootAsNull(bb: flatbuffers.ByteBuffer, obj?: Null): Null {\n            return (obj || new Null).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startNull(builder: flatbuffers.Builder) {\n            builder.startObject(0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endNull(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createNull(builder: flatbuffers.Builder): flatbuffers.Offset {\n            Null.startNull(builder);\n            return Null.endNull(builder);\n        }\n    }\n}\n/**\n * A Struct_ in the flatbuffer metadata is the same as an Arrow Struct\n * (according to the physical memory layout). We used Struct_ here as\n * Struct is a reserved word in Flatbuffers\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Struct_ {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Struct_\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Struct_ {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Struct_= obj\n         * @returns Struct_\n         */\n        static getRootAsStruct_(bb: flatbuffers.ByteBuffer, obj?: Struct_): Struct_ {\n            return (obj || new Struct_).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startStruct_(builder: flatbuffers.Builder) {\n            builder.startObject(0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endStruct_(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createStruct_(builder: flatbuffers.Builder): flatbuffers.Offset {\n            Struct_.startStruct_(builder);\n            return Struct_.endStruct_(builder);\n        }\n    }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class List {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns List\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): List {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param List= obj\n         * @returns List\n         */\n        static getRootAsList(bb: flatbuffers.ByteBuffer, obj?: List): List {\n            return (obj || new List).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startList(builder: flatbuffers.Builder) {\n            builder.startObject(0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endList(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createList(builder: flatbuffers.Builder): flatbuffers.Offset {\n            List.startList(builder);\n            return List.endList(builder);\n        }\n    }\n}\n/**\n * Same as List, but with 64-bit offsets, allowing to represent\n * extremely large data values.\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class LargeList {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns LargeList\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): LargeList {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param LargeList= obj\n         * @returns LargeList\n         */\n        static getRootAsLargeList(bb: flatbuffers.ByteBuffer, obj?: LargeList): LargeList {\n            return (obj || new LargeList).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startLargeList(builder: flatbuffers.Builder) {\n            builder.startObject(0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endLargeList(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createLargeList(builder: flatbuffers.Builder): flatbuffers.Offset {\n            LargeList.startLargeList(builder);\n            return LargeList.endLargeList(builder);\n        }\n    }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class FixedSizeList {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns FixedSizeList\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): FixedSizeList {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param FixedSizeList= obj\n         * @returns FixedSizeList\n         */\n        static getRootAsFixedSizeList(bb: flatbuffers.ByteBuffer, obj?: FixedSizeList): FixedSizeList {\n            return (obj || new FixedSizeList).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * Number of list items per value\n         *\n         * @returns number\n         */\n        listSize(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startFixedSizeList(builder: flatbuffers.Builder) {\n            builder.startObject(1);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number listSize\n         */\n        static addListSize(builder: flatbuffers.Builder, listSize: number) {\n            builder.addFieldInt32(0, listSize, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endFixedSizeList(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createFixedSizeList(builder: flatbuffers.Builder, listSize: number): flatbuffers.Offset {\n            FixedSizeList.startFixedSizeList(builder);\n            FixedSizeList.addListSize(builder, listSize);\n            return FixedSizeList.endFixedSizeList(builder);\n        }\n    }\n}\n/**\n * A Map is a logical nested type that is represented as\n *\n * List<entry: Struct<key: K, value: V>>\n *\n * In this layout, the keys and values are each respectively contiguous. We do\n * not constrain the key and value types, so the application is responsible\n * for ensuring that the keys are hashable and unique. Whether the keys are sorted\n * may be set in the metadata for this field\n *\n * In a Field with Map type, the Field has a child Struct field, which then\n * has two children: key type and the second the value type. The names of the\n * child fields may be respectively \"entry\", \"key\", and \"value\", but this is\n * not enforced\n *\n * Map\n *   - child[0] entry: Struct\n *     - child[0] key: K\n *     - child[1] value: V\n *\n * Neither the \"entry\" field nor the \"key\" field may be nullable.\n *\n * The metadata is structured so that Arrow systems without special handling\n * for Map can make Map an alias for List. The \"layout\" attribute for the Map\n * field must have the same contents as a List.\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Map {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Map\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Map {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Map= obj\n         * @returns Map\n         */\n        static getRootAsMap(bb: flatbuffers.ByteBuffer, obj?: Map): Map {\n            return (obj || new Map).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * Set to true if the keys within each value are sorted\n         *\n         * @returns boolean\n         */\n        keysSorted(): boolean {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startMap(builder: flatbuffers.Builder) {\n            builder.startObject(1);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param boolean keysSorted\n         */\n        static addKeysSorted(builder: flatbuffers.Builder, keysSorted: boolean) {\n            builder.addFieldInt8(0, +keysSorted, +false);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endMap(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createMap(builder: flatbuffers.Builder, keysSorted: boolean): flatbuffers.Offset {\n            Map.startMap(builder);\n            Map.addKeysSorted(builder, keysSorted);\n            return Map.endMap(builder);\n        }\n    }\n}\n/**\n * A union is a complex type with children in Field\n * By default ids in the type vector refer to the offsets in the children\n * optionally typeIds provides an indirection between the child offset and the type id\n * for each child typeIds[offset] is the id used in the type vector\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Union {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Union\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Union {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Union= obj\n         * @returns Union\n         */\n        static getRootAsUnion(bb: flatbuffers.ByteBuffer, obj?: Union): Union {\n            return (obj || new Union).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @returns org.apache.arrow.flatbuf.UnionMode\n         */\n        mode(): org.apache.arrow.flatbuf.UnionMode {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? /**  */ (this.bb!.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.UnionMode.Sparse;\n        }\n\n        /**\n         * @param number index\n         * @returns number\n         */\n        typeIds(index: number): number | null {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? this.bb!.readInt32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;\n        }\n\n        /**\n         * @returns number\n         */\n        typeIdsLength(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @returns Int32Array\n         */\n        typeIdsArray(): Int32Array | null {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? new Int32Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startUnion(builder: flatbuffers.Builder) {\n            builder.startObject(2);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.UnionMode mode\n         */\n        static addMode(builder: flatbuffers.Builder, mode: org.apache.arrow.flatbuf.UnionMode) {\n            builder.addFieldInt16(0, mode, org.apache.arrow.flatbuf.UnionMode.Sparse);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset typeIdsOffset\n         */\n        static addTypeIds(builder: flatbuffers.Builder, typeIdsOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(1, typeIdsOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param Array.<number> data\n         * @returns flatbuffers.Offset\n         */\n        static createTypeIdsVector(builder: flatbuffers.Builder, data: number[] | Int32Array): flatbuffers.Offset {\n            builder.startVector(4, data.length, 4);\n            for (let i = data.length - 1; i >= 0; i--) {\n                builder.addInt32(data[i]);\n            }\n            return builder.endVector();\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startTypeIdsVector(builder: flatbuffers.Builder, numElems: number) {\n            builder.startVector(4, numElems, 4);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endUnion(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createUnion(builder: flatbuffers.Builder, mode: org.apache.arrow.flatbuf.UnionMode, typeIdsOffset: flatbuffers.Offset): flatbuffers.Offset {\n            Union.startUnion(builder);\n            Union.addMode(builder, mode);\n            Union.addTypeIds(builder, typeIdsOffset);\n            return Union.endUnion(builder);\n        }\n    }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Int {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Int\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Int {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Int= obj\n         * @returns Int\n         */\n        static getRootAsInt(bb: flatbuffers.ByteBuffer, obj?: Int): Int {\n            return (obj || new Int).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @returns number\n         */\n        bitWidth(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @returns boolean\n         */\n        isSigned(): boolean {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startInt(builder: flatbuffers.Builder) {\n            builder.startObject(2);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number bitWidth\n         */\n        static addBitWidth(builder: flatbuffers.Builder, bitWidth: number) {\n            builder.addFieldInt32(0, bitWidth, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param boolean isSigned\n         */\n        static addIsSigned(builder: flatbuffers.Builder, isSigned: boolean) {\n            builder.addFieldInt8(1, +isSigned, +false);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endInt(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createInt(builder: flatbuffers.Builder, bitWidth: number, isSigned: boolean): flatbuffers.Offset {\n            Int.startInt(builder);\n            Int.addBitWidth(builder, bitWidth);\n            Int.addIsSigned(builder, isSigned);\n            return Int.endInt(builder);\n        }\n    }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class FloatingPoint {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns FloatingPoint\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): FloatingPoint {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param FloatingPoint= obj\n         * @returns FloatingPoint\n         */\n        static getRootAsFloatingPoint(bb: flatbuffers.ByteBuffer, obj?: FloatingPoint): FloatingPoint {\n            return (obj || new FloatingPoint).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @returns org.apache.arrow.flatbuf.Precision\n         */\n        precision(): org.apache.arrow.flatbuf.Precision {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? /**  */ (this.bb!.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.Precision.HALF;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startFloatingPoint(builder: flatbuffers.Builder) {\n            builder.startObject(1);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.Precision precision\n         */\n        static addPrecision(builder: flatbuffers.Builder, precision: org.apache.arrow.flatbuf.Precision) {\n            builder.addFieldInt16(0, precision, org.apache.arrow.flatbuf.Precision.HALF);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endFloatingPoint(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createFloatingPoint(builder: flatbuffers.Builder, precision: org.apache.arrow.flatbuf.Precision): flatbuffers.Offset {\n            FloatingPoint.startFloatingPoint(builder);\n            FloatingPoint.addPrecision(builder, precision);\n            return FloatingPoint.endFloatingPoint(builder);\n        }\n    }\n}\n/**\n * Unicode with UTF-8 encoding\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Utf8 {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Utf8\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Utf8 {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Utf8= obj\n         * @returns Utf8\n         */\n        static getRootAsUtf8(bb: flatbuffers.ByteBuffer, obj?: Utf8): Utf8 {\n            return (obj || new Utf8).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startUtf8(builder: flatbuffers.Builder) {\n            builder.startObject(0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endUtf8(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createUtf8(builder: flatbuffers.Builder): flatbuffers.Offset {\n            Utf8.startUtf8(builder);\n            return Utf8.endUtf8(builder);\n        }\n    }\n}\n/**\n * Opaque binary data\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Binary {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Binary\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Binary {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Binary= obj\n         * @returns Binary\n         */\n        static getRootAsBinary(bb: flatbuffers.ByteBuffer, obj?: Binary): Binary {\n            return (obj || new Binary).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startBinary(builder: flatbuffers.Builder) {\n            builder.startObject(0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endBinary(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createBinary(builder: flatbuffers.Builder): flatbuffers.Offset {\n            Binary.startBinary(builder);\n            return Binary.endBinary(builder);\n        }\n    }\n}\n/**\n * Same as Utf8, but with 64-bit offsets, allowing to represent\n * extremely large data values.\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class LargeUtf8 {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns LargeUtf8\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): LargeUtf8 {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param LargeUtf8= obj\n         * @returns LargeUtf8\n         */\n        static getRootAsLargeUtf8(bb: flatbuffers.ByteBuffer, obj?: LargeUtf8): LargeUtf8 {\n            return (obj || new LargeUtf8).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startLargeUtf8(builder: flatbuffers.Builder) {\n            builder.startObject(0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endLargeUtf8(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createLargeUtf8(builder: flatbuffers.Builder): flatbuffers.Offset {\n            LargeUtf8.startLargeUtf8(builder);\n            return LargeUtf8.endLargeUtf8(builder);\n        }\n    }\n}\n/**\n * Same as Binary, but with 64-bit offsets, allowing to represent\n * extremely large data values.\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class LargeBinary {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns LargeBinary\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): LargeBinary {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param LargeBinary= obj\n         * @returns LargeBinary\n         */\n        static getRootAsLargeBinary(bb: flatbuffers.ByteBuffer, obj?: LargeBinary): LargeBinary {\n            return (obj || new LargeBinary).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startLargeBinary(builder: flatbuffers.Builder) {\n            builder.startObject(0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endLargeBinary(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createLargeBinary(builder: flatbuffers.Builder): flatbuffers.Offset {\n            LargeBinary.startLargeBinary(builder);\n            return LargeBinary.endLargeBinary(builder);\n        }\n    }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class FixedSizeBinary {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns FixedSizeBinary\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): FixedSizeBinary {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param FixedSizeBinary= obj\n         * @returns FixedSizeBinary\n         */\n        static getRootAsFixedSizeBinary(bb: flatbuffers.ByteBuffer, obj?: FixedSizeBinary): FixedSizeBinary {\n            return (obj || new FixedSizeBinary).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * Number of bytes per value\n         *\n         * @returns number\n         */\n        byteWidth(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startFixedSizeBinary(builder: flatbuffers.Builder) {\n            builder.startObject(1);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number byteWidth\n         */\n        static addByteWidth(builder: flatbuffers.Builder, byteWidth: number) {\n            builder.addFieldInt32(0, byteWidth, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endFixedSizeBinary(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createFixedSizeBinary(builder: flatbuffers.Builder, byteWidth: number): flatbuffers.Offset {\n            FixedSizeBinary.startFixedSizeBinary(builder);\n            FixedSizeBinary.addByteWidth(builder, byteWidth);\n            return FixedSizeBinary.endFixedSizeBinary(builder);\n        }\n    }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Bool {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Bool\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Bool {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Bool= obj\n         * @returns Bool\n         */\n        static getRootAsBool(bb: flatbuffers.ByteBuffer, obj?: Bool): Bool {\n            return (obj || new Bool).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startBool(builder: flatbuffers.Builder) {\n            builder.startObject(0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endBool(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createBool(builder: flatbuffers.Builder): flatbuffers.Offset {\n            Bool.startBool(builder);\n            return Bool.endBool(builder);\n        }\n    }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Decimal {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Decimal\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Decimal {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Decimal= obj\n         * @returns Decimal\n         */\n        static getRootAsDecimal(bb: flatbuffers.ByteBuffer, obj?: Decimal): Decimal {\n            return (obj || new Decimal).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * Total number of decimal digits\n         *\n         * @returns number\n         */\n        precision(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * Number of digits after the decimal point \".\"\n         *\n         * @returns number\n         */\n        scale(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startDecimal(builder: flatbuffers.Builder) {\n            builder.startObject(2);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number precision\n         */\n        static addPrecision(builder: flatbuffers.Builder, precision: number) {\n            builder.addFieldInt32(0, precision, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number scale\n         */\n        static addScale(builder: flatbuffers.Builder, scale: number) {\n            builder.addFieldInt32(1, scale, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endDecimal(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createDecimal(builder: flatbuffers.Builder, precision: number, scale: number): flatbuffers.Offset {\n            Decimal.startDecimal(builder);\n            Decimal.addPrecision(builder, precision);\n            Decimal.addScale(builder, scale);\n            return Decimal.endDecimal(builder);\n        }\n    }\n}\n/**\n * Date is either a 32-bit or 64-bit type representing elapsed time since UNIX\n * epoch (1970-01-01), stored in either of two units:\n *\n * * Milliseconds (64 bits) indicating UNIX time elapsed since the epoch (no\n *   leap seconds), where the values are evenly divisible by 86400000\n * * Days (32 bits) since the UNIX epoch\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Date {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Date\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Date {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Date= obj\n         * @returns Date\n         */\n        static getRootAsDate(bb: flatbuffers.ByteBuffer, obj?: Date): Date {\n            return (obj || new Date).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @returns org.apache.arrow.flatbuf.DateUnit\n         */\n        unit(): org.apache.arrow.flatbuf.DateUnit {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? /**  */ (this.bb!.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.DateUnit.MILLISECOND;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startDate(builder: flatbuffers.Builder) {\n            builder.startObject(1);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.DateUnit unit\n         */\n        static addUnit(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.DateUnit) {\n            builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.DateUnit.MILLISECOND);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endDate(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createDate(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.DateUnit): flatbuffers.Offset {\n            Date.startDate(builder);\n            Date.addUnit(builder, unit);\n            return Date.endDate(builder);\n        }\n    }\n}\n/**\n * Time type. The physical storage type depends on the unit\n * - SECOND and MILLISECOND: 32 bits\n * - MICROSECOND and NANOSECOND: 64 bits\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Time {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Time\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Time {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Time= obj\n         * @returns Time\n         */\n        static getRootAsTime(bb: flatbuffers.ByteBuffer, obj?: Time): Time {\n            return (obj || new Time).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @returns org.apache.arrow.flatbuf.TimeUnit\n         */\n        unit(): org.apache.arrow.flatbuf.TimeUnit {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? /**  */ (this.bb!.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.TimeUnit.MILLISECOND;\n        }\n\n        /**\n         * @returns number\n         */\n        bitWidth(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? this.bb!.readInt32(this.bb_pos + offset) : 32;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startTime(builder: flatbuffers.Builder) {\n            builder.startObject(2);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.TimeUnit unit\n         */\n        static addUnit(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.TimeUnit) {\n            builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.TimeUnit.MILLISECOND);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number bitWidth\n         */\n        static addBitWidth(builder: flatbuffers.Builder, bitWidth: number) {\n            builder.addFieldInt32(1, bitWidth, 32);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endTime(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createTime(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.TimeUnit, bitWidth: number): flatbuffers.Offset {\n            Time.startTime(builder);\n            Time.addUnit(builder, unit);\n            Time.addBitWidth(builder, bitWidth);\n            return Time.endTime(builder);\n        }\n    }\n}\n/**\n * Time elapsed from the Unix epoch, 00:00:00.000 on 1 January 1970, excluding\n * leap seconds, as a 64-bit integer. Note that UNIX time does not include\n * leap seconds.\n *\n * The Timestamp metadata supports both \"time zone naive\" and \"time zone\n * aware\" timestamps. Read about the timezone attribute for more detail\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Timestamp {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Timestamp\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Timestamp {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Timestamp= obj\n         * @returns Timestamp\n         */\n        static getRootAsTimestamp(bb: flatbuffers.ByteBuffer, obj?: Timestamp): Timestamp {\n            return (obj || new Timestamp).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @returns org.apache.arrow.flatbuf.TimeUnit\n         */\n        unit(): org.apache.arrow.flatbuf.TimeUnit {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? /**  */ (this.bb!.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.TimeUnit.SECOND;\n        }\n\n        /**\n         * The time zone is a string indicating the name of a time zone, one of:\n         *\n         * * As used in the Olson time zone database (the \"tz database\" or\n         *   \"tzdata\"), such as \"America/New_York\"\n         * * An absolute time zone offset of the form +XX:XX or -XX:XX, such as +07:30\n         *\n         * Whether a timezone string is present indicates different semantics about\n         * the data:\n         *\n         * * If the time zone is null or equal to an empty string, the data is \"time\n         *   zone naive\" and shall be displayed *as is* to the user, not localized\n         *   to the locale of the user. This data can be though of as UTC but\n         *   without having \"UTC\" as the time zone, it is not considered to be\n         *   localized to any time zone\n         *\n         * * If the time zone is set to a valid value, values can be displayed as\n         *   \"localized\" to that time zone, even though the underlying 64-bit\n         *   integers are identical to the same data stored in UTC. Converting\n         *   between time zones is a metadata-only operation and does not change the\n         *   underlying values\n         *\n         * @param flatbuffers.Encoding= optionalEncoding\n         * @returns string|Uint8Array|null\n         */\n        timezone(): string | null;\n        timezone(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\n        timezone(optionalEncoding?: any): string | Uint8Array | null {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startTimestamp(builder: flatbuffers.Builder) {\n            builder.startObject(2);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.TimeUnit unit\n         */\n        static addUnit(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.TimeUnit) {\n            builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.TimeUnit.SECOND);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset timezoneOffset\n         */\n        static addTimezone(builder: flatbuffers.Builder, timezoneOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(1, timezoneOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endTimestamp(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createTimestamp(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.TimeUnit, timezoneOffset: flatbuffers.Offset): flatbuffers.Offset {\n            Timestamp.startTimestamp(builder);\n            Timestamp.addUnit(builder, unit);\n            Timestamp.addTimezone(builder, timezoneOffset);\n            return Timestamp.endTimestamp(builder);\n        }\n    }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Interval {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Interval\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Interval {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Interval= obj\n         * @returns Interval\n         */\n        static getRootAsInterval(bb: flatbuffers.ByteBuffer, obj?: Interval): Interval {\n            return (obj || new Interval).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @returns org.apache.arrow.flatbuf.IntervalUnit\n         */\n        unit(): org.apache.arrow.flatbuf.IntervalUnit {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? /**  */ (this.bb!.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.IntervalUnit.YEAR_MONTH;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startInterval(builder: flatbuffers.Builder) {\n            builder.startObject(1);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.IntervalUnit unit\n         */\n        static addUnit(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.IntervalUnit) {\n            builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.IntervalUnit.YEAR_MONTH);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endInterval(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createInterval(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.IntervalUnit): flatbuffers.Offset {\n            Interval.startInterval(builder);\n            Interval.addUnit(builder, unit);\n            return Interval.endInterval(builder);\n        }\n    }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Duration {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Duration\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Duration {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Duration= obj\n         * @returns Duration\n         */\n        static getRootAsDuration(bb: flatbuffers.ByteBuffer, obj?: Duration): Duration {\n            return (obj || new Duration).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @returns org.apache.arrow.flatbuf.TimeUnit\n         */\n        unit(): org.apache.arrow.flatbuf.TimeUnit {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? /**  */ (this.bb!.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.TimeUnit.MILLISECOND;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startDuration(builder: flatbuffers.Builder) {\n            builder.startObject(1);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.TimeUnit unit\n         */\n        static addUnit(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.TimeUnit) {\n            builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.TimeUnit.MILLISECOND);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endDuration(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createDuration(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.TimeUnit): flatbuffers.Offset {\n            Duration.startDuration(builder);\n            Duration.addUnit(builder, unit);\n            return Duration.endDuration(builder);\n        }\n    }\n}\n/**\n * ----------------------------------------------------------------------\n * user defined key value pairs to add custom metadata to arrow\n * key namespacing is the responsibility of the user\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class KeyValue {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns KeyValue\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): KeyValue {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param KeyValue= obj\n         * @returns KeyValue\n         */\n        static getRootAsKeyValue(bb: flatbuffers.ByteBuffer, obj?: KeyValue): KeyValue {\n            return (obj || new KeyValue).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.Encoding= optionalEncoding\n         * @returns string|Uint8Array|null\n         */\n        key(): string | null;\n        key(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\n        key(optionalEncoding?: any): string | Uint8Array | null {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n        }\n\n        /**\n         * @param flatbuffers.Encoding= optionalEncoding\n         * @returns string|Uint8Array|null\n         */\n        value(): string | null;\n        value(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\n        value(optionalEncoding?: any): string | Uint8Array | null {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startKeyValue(builder: flatbuffers.Builder) {\n            builder.startObject(2);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset keyOffset\n         */\n        static addKey(builder: flatbuffers.Builder, keyOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(0, keyOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset valueOffset\n         */\n        static addValue(builder: flatbuffers.Builder, valueOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(1, valueOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endKeyValue(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createKeyValue(builder: flatbuffers.Builder, keyOffset: flatbuffers.Offset, valueOffset: flatbuffers.Offset): flatbuffers.Offset {\n            KeyValue.startKeyValue(builder);\n            KeyValue.addKey(builder, keyOffset);\n            KeyValue.addValue(builder, valueOffset);\n            return KeyValue.endKeyValue(builder);\n        }\n    }\n}\n/**\n * ----------------------------------------------------------------------\n * Dictionary encoding metadata\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class DictionaryEncoding {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns DictionaryEncoding\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): DictionaryEncoding {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param DictionaryEncoding= obj\n         * @returns DictionaryEncoding\n         */\n        static getRootAsDictionaryEncoding(bb: flatbuffers.ByteBuffer, obj?: DictionaryEncoding): DictionaryEncoding {\n            return (obj || new DictionaryEncoding).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * The known dictionary id in the application where this data is used. In\n         * the file or streaming formats, the dictionary ids are found in the\n         * DictionaryBatch messages\n         *\n         * @returns flatbuffers.Long\n         */\n        id(): flatbuffers.Long {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n        }\n\n        /**\n         * The dictionary indices are constrained to be positive integers. If this\n         * field is null, the indices must be signed int32\n         *\n         * @param org.apache.arrow.flatbuf.Int= obj\n         * @returns org.apache.arrow.flatbuf.Int|null\n         */\n        indexType(obj?: org.apache.arrow.flatbuf.Int): org.apache.arrow.flatbuf.Int | null {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? (obj || new org.apache.arrow.flatbuf.Int).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;\n        }\n\n        /**\n         * By default, dictionaries are not ordered, or the order does not have\n         * semantic meaning. In some statistical, applications, dictionary-encoding\n         * is used to represent ordered categorical data, and we provide a way to\n         * preserve that metadata here\n         *\n         * @returns boolean\n         */\n        isOrdered(): boolean {\n            let offset = this.bb!.__offset(this.bb_pos, 8);\n            return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startDictionaryEncoding(builder: flatbuffers.Builder) {\n            builder.startObject(3);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Long id\n         */\n        static addId(builder: flatbuffers.Builder, id: flatbuffers.Long) {\n            builder.addFieldInt64(0, id, builder.createLong(0, 0));\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset indexTypeOffset\n         */\n        static addIndexType(builder: flatbuffers.Builder, indexTypeOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(1, indexTypeOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param boolean isOrdered\n         */\n        static addIsOrdered(builder: flatbuffers.Builder, isOrdered: boolean) {\n            builder.addFieldInt8(2, +isOrdered, +false);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endDictionaryEncoding(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createDictionaryEncoding(builder: flatbuffers.Builder, id: flatbuffers.Long, indexTypeOffset: flatbuffers.Offset, isOrdered: boolean): flatbuffers.Offset {\n            DictionaryEncoding.startDictionaryEncoding(builder);\n            DictionaryEncoding.addId(builder, id);\n            DictionaryEncoding.addIndexType(builder, indexTypeOffset);\n            DictionaryEncoding.addIsOrdered(builder, isOrdered);\n            return DictionaryEncoding.endDictionaryEncoding(builder);\n        }\n    }\n}\n/**\n * ----------------------------------------------------------------------\n * A field represents a named column in a record / row batch or child of a\n * nested type.\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Field {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Field\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Field {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Field= obj\n         * @returns Field\n         */\n        static getRootAsField(bb: flatbuffers.ByteBuffer, obj?: Field): Field {\n            return (obj || new Field).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * Name is not required, in i.e. a List\n         *\n         * @param flatbuffers.Encoding= optionalEncoding\n         * @returns string|Uint8Array|null\n         */\n        name(): string | null;\n        name(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\n        name(optionalEncoding?: any): string | Uint8Array | null {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n        }\n\n        /**\n         * Whether or not this field can contain nulls. Should be true in general.\n         *\n         * @returns boolean\n         */\n        nullable(): boolean {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;\n        }\n\n        /**\n         * @returns org.apache.arrow.flatbuf.Type\n         */\n        typeType(): org.apache.arrow.flatbuf.Type {\n            let offset = this.bb!.__offset(this.bb_pos, 8);\n            return offset ? /**  */ (this.bb!.readUint8(this.bb_pos + offset)) : org.apache.arrow.flatbuf.Type.NONE;\n        }\n\n        /**\n         * This is the type of the decoded value if the field is dictionary encoded.\n         *\n         * @param flatbuffers.Table obj\n         * @returns ?flatbuffers.Table\n         */\n        type<T extends flatbuffers.Table>(obj: T): T | null {\n            let offset = this.bb!.__offset(this.bb_pos, 10);\n            return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;\n        }\n\n        /**\n         * Present only if the field is dictionary encoded.\n         *\n         * @param org.apache.arrow.flatbuf.DictionaryEncoding= obj\n         * @returns org.apache.arrow.flatbuf.DictionaryEncoding|null\n         */\n        dictionary(obj?: org.apache.arrow.flatbuf.DictionaryEncoding): org.apache.arrow.flatbuf.DictionaryEncoding | null {\n            let offset = this.bb!.__offset(this.bb_pos, 12);\n            return offset ? (obj || new org.apache.arrow.flatbuf.DictionaryEncoding).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;\n        }\n\n        /**\n         * children apply only to nested data types like Struct, List and Union. For\n         * primitive types children will have length 0.\n         *\n         * @param number index\n         * @param org.apache.arrow.flatbuf.Field= obj\n         * @returns org.apache.arrow.flatbuf.Field\n         */\n        children(index: number, obj?: org.apache.arrow.flatbuf.Field): org.apache.arrow.flatbuf.Field | null {\n            let offset = this.bb!.__offset(this.bb_pos, 14);\n            return offset ? (obj || new org.apache.arrow.flatbuf.Field).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;\n        }\n\n        /**\n         * @returns number\n         */\n        childrenLength(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 14);\n            return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * User-defined metadata\n         *\n         * @param number index\n         * @param org.apache.arrow.flatbuf.KeyValue= obj\n         * @returns org.apache.arrow.flatbuf.KeyValue\n         */\n        customMetadata(index: number, obj?: org.apache.arrow.flatbuf.KeyValue): org.apache.arrow.flatbuf.KeyValue | null {\n            let offset = this.bb!.__offset(this.bb_pos, 16);\n            return offset ? (obj || new org.apache.arrow.flatbuf.KeyValue).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;\n        }\n\n        /**\n         * @returns number\n         */\n        customMetadataLength(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 16);\n            return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startField(builder: flatbuffers.Builder) {\n            builder.startObject(7);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset nameOffset\n         */\n        static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(0, nameOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param boolean nullable\n         */\n        static addNullable(builder: flatbuffers.Builder, nullable: boolean) {\n            builder.addFieldInt8(1, +nullable, +false);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.Type typeType\n         */\n        static addTypeType(builder: flatbuffers.Builder, typeType: org.apache.arrow.flatbuf.Type) {\n            builder.addFieldInt8(2, typeType, org.apache.arrow.flatbuf.Type.NONE);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset typeOffset\n         */\n        static addType(builder: flatbuffers.Builder, typeOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(3, typeOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset dictionaryOffset\n         */\n        static addDictionary(builder: flatbuffers.Builder, dictionaryOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(4, dictionaryOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset childrenOffset\n         */\n        static addChildren(builder: flatbuffers.Builder, childrenOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(5, childrenOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param Array.<flatbuffers.Offset> data\n         * @returns flatbuffers.Offset\n         */\n        static createChildrenVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n            builder.startVector(4, data.length, 4);\n            for (let i = data.length - 1; i >= 0; i--) {\n                builder.addOffset(data[i]);\n            }\n            return builder.endVector();\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startChildrenVector(builder: flatbuffers.Builder, numElems: number) {\n            builder.startVector(4, numElems, 4);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset customMetadataOffset\n         */\n        static addCustomMetadata(builder: flatbuffers.Builder, customMetadataOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(6, customMetadataOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param Array.<flatbuffers.Offset> data\n         * @returns flatbuffers.Offset\n         */\n        static createCustomMetadataVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n            builder.startVector(4, data.length, 4);\n            for (let i = data.length - 1; i >= 0; i--) {\n                builder.addOffset(data[i]);\n            }\n            return builder.endVector();\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startCustomMetadataVector(builder: flatbuffers.Builder, numElems: number) {\n            builder.startVector(4, numElems, 4);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endField(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createField(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, nullable: boolean, typeType: org.apache.arrow.flatbuf.Type, typeOffset: flatbuffers.Offset, dictionaryOffset: flatbuffers.Offset, childrenOffset: flatbuffers.Offset, customMetadataOffset: flatbuffers.Offset): flatbuffers.Offset {\n            Field.startField(builder);\n            Field.addName(builder, nameOffset);\n            Field.addNullable(builder, nullable);\n            Field.addTypeType(builder, typeType);\n            Field.addType(builder, typeOffset);\n            Field.addDictionary(builder, dictionaryOffset);\n            Field.addChildren(builder, childrenOffset);\n            Field.addCustomMetadata(builder, customMetadataOffset);\n            return Field.endField(builder);\n        }\n    }\n}\n/**\n * ----------------------------------------------------------------------\n * A Buffer represents a single contiguous memory segment\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Buffer {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Buffer\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Buffer {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * The relative offset into the shared memory page where the bytes for this\n         * buffer starts\n         *\n         * @returns flatbuffers.Long\n         */\n        offset(): flatbuffers.Long {\n            return this.bb!.readInt64(this.bb_pos);\n        }\n\n        /**\n         * The absolute length (in bytes) of the memory buffer. The memory is found\n         * from offset (inclusive) to offset + length (non-inclusive).\n         *\n         * @returns flatbuffers.Long\n         */\n        length(): flatbuffers.Long {\n            return this.bb!.readInt64(this.bb_pos + 8);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Long offset\n         * @param flatbuffers.Long length\n         * @returns flatbuffers.Offset\n         */\n        static createBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Long, length: flatbuffers.Long): flatbuffers.Offset {\n            builder.prep(8, 16);\n            builder.writeInt64(length);\n            builder.writeInt64(offset);\n            return builder.offset();\n        }\n\n    }\n}\n/**\n * ----------------------------------------------------------------------\n * A Schema describes the columns in a row batch\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Schema {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Schema\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Schema {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Schema= obj\n         * @returns Schema\n         */\n        static getRootAsSchema(bb: flatbuffers.ByteBuffer, obj?: Schema): Schema {\n            return (obj || new Schema).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * endianness of the buffer\n         * it is Little Endian by default\n         * if endianness doesn't match the underlying system then the vectors need to be converted\n         *\n         * @returns org.apache.arrow.flatbuf.Endianness\n         */\n        endianness(): org.apache.arrow.flatbuf.Endianness {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? /**  */ (this.bb!.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.Endianness.Little;\n        }\n\n        /**\n         * @param number index\n         * @param org.apache.arrow.flatbuf.Field= obj\n         * @returns org.apache.arrow.flatbuf.Field\n         */\n        fields(index: number, obj?: org.apache.arrow.flatbuf.Field): org.apache.arrow.flatbuf.Field | null {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? (obj || new org.apache.arrow.flatbuf.Field).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;\n        }\n\n        /**\n         * @returns number\n         */\n        fieldsLength(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @param number index\n         * @param org.apache.arrow.flatbuf.KeyValue= obj\n         * @returns org.apache.arrow.flatbuf.KeyValue\n         */\n        customMetadata(index: number, obj?: org.apache.arrow.flatbuf.KeyValue): org.apache.arrow.flatbuf.KeyValue | null {\n            let offset = this.bb!.__offset(this.bb_pos, 8);\n            return offset ? (obj || new org.apache.arrow.flatbuf.KeyValue).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;\n        }\n\n        /**\n         * @returns number\n         */\n        customMetadataLength(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 8);\n            return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startSchema(builder: flatbuffers.Builder) {\n            builder.startObject(3);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.Endianness endianness\n         */\n        static addEndianness(builder: flatbuffers.Builder, endianness: org.apache.arrow.flatbuf.Endianness) {\n            builder.addFieldInt16(0, endianness, org.apache.arrow.flatbuf.Endianness.Little);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset fieldsOffset\n         */\n        static addFields(builder: flatbuffers.Builder, fieldsOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(1, fieldsOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param Array.<flatbuffers.Offset> data\n         * @returns flatbuffers.Offset\n         */\n        static createFieldsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n            builder.startVector(4, data.length, 4);\n            for (let i = data.length - 1; i >= 0; i--) {\n                builder.addOffset(data[i]);\n            }\n            return builder.endVector();\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startFieldsVector(builder: flatbuffers.Builder, numElems: number) {\n            builder.startVector(4, numElems, 4);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset customMetadataOffset\n         */\n        static addCustomMetadata(builder: flatbuffers.Builder, customMetadataOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(2, customMetadataOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param Array.<flatbuffers.Offset> data\n         * @returns flatbuffers.Offset\n         */\n        static createCustomMetadataVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n            builder.startVector(4, data.length, 4);\n            for (let i = data.length - 1; i >= 0; i--) {\n                builder.addOffset(data[i]);\n            }\n            return builder.endVector();\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startCustomMetadataVector(builder: flatbuffers.Builder, numElems: number) {\n            builder.startVector(4, numElems, 4);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endSchema(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset offset\n         */\n        static finishSchemaBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\n            builder.finish(offset);\n        }\n\n        static createSchema(builder: flatbuffers.Builder, endianness: org.apache.arrow.flatbuf.Endianness, fieldsOffset: flatbuffers.Offset, customMetadataOffset: flatbuffers.Offset): flatbuffers.Offset {\n            Schema.startSchema(builder);\n            Schema.addEndianness(builder, endianness);\n            Schema.addFields(builder, fieldsOffset);\n            Schema.addCustomMetadata(builder, customMetadataOffset);\n            return Schema.endSchema(builder);\n        }\n    }\n}\n","// automatically generated by the FlatBuffers compiler, do not modify\n\nimport { flatbuffers } from 'flatbuffers';\nimport * as NS7624605610262437867 from './Schema';\nexport namespace org.apache.arrow.flatbuf {\n    export import Schema = NS7624605610262437867.org.apache.arrow.flatbuf.Schema;\n}\n/**\n * ----------------------------------------------------------------------\n * The root Message type\n * This union enables us to easily send different message types without\n * redundant storage, and in the future we can easily add new message types.\n *\n * Arrow implementations do not need to implement all of the message types,\n * which may include experimental metadata types. For maximum compatibility,\n * it is best to send data using RecordBatch\n *\n * @enum {number}\n */\nexport namespace org.apache.arrow.flatbuf {\n    export enum MessageHeader {\n        NONE = 0,\n        Schema = 1,\n        DictionaryBatch = 2,\n        RecordBatch = 3,\n        Tensor = 4,\n        SparseTensor = 5\n    }\n}\n\n/**\n * ----------------------------------------------------------------------\n * Data structures for describing a table row batch (a collection of\n * equal-length Arrow arrays)\n * Metadata about a field at some level of a nested type tree (but not\n * its children).\n *\n * For example, a List<Int16> with values [[1, 2, 3], null, [4], [5, 6], null]\n * would have {length: 5, null_count: 2} for its List node, and {length: 6,\n * null_count: 0} for its Int16 node, as separate FieldNode structs\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class FieldNode {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns FieldNode\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): FieldNode {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * The number of value slots in the Arrow array at this level of a nested\n         * tree\n         *\n         * @returns flatbuffers.Long\n         */\n        length(): flatbuffers.Long {\n            return this.bb!.readInt64(this.bb_pos);\n        }\n\n        /**\n         * The number of observed nulls. Fields with null_count == 0 may choose not\n         * to write their physical validity bitmap out as a materialized buffer,\n         * instead setting the length of the bitmap buffer to 0.\n         *\n         * @returns flatbuffers.Long\n         */\n        nullCount(): flatbuffers.Long {\n            return this.bb!.readInt64(this.bb_pos + 8);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Long length\n         * @param flatbuffers.Long null_count\n         * @returns flatbuffers.Offset\n         */\n        static createFieldNode(builder: flatbuffers.Builder, length: flatbuffers.Long, null_count: flatbuffers.Long): flatbuffers.Offset {\n            builder.prep(8, 16);\n            builder.writeInt64(null_count);\n            builder.writeInt64(length);\n            return builder.offset();\n        }\n\n    }\n}\n/**\n * A data header describing the shared memory layout of a \"record\" or \"row\"\n * batch. Some systems call this a \"row batch\" internally and others a \"record\n * batch\".\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class RecordBatch {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns RecordBatch\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): RecordBatch {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param RecordBatch= obj\n         * @returns RecordBatch\n         */\n        static getRootAsRecordBatch(bb: flatbuffers.ByteBuffer, obj?: RecordBatch): RecordBatch {\n            return (obj || new RecordBatch).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * number of records / rows. The arrays in the batch should all have this\n         * length\n         *\n         * @returns flatbuffers.Long\n         */\n        length(): flatbuffers.Long {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n        }\n\n        /**\n         * Nodes correspond to the pre-ordered flattened logical schema\n         *\n         * @param number index\n         * @param org.apache.arrow.flatbuf.FieldNode= obj\n         * @returns org.apache.arrow.flatbuf.FieldNode\n         */\n        nodes(index: number, obj?: org.apache.arrow.flatbuf.FieldNode): org.apache.arrow.flatbuf.FieldNode | null {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? (obj || new org.apache.arrow.flatbuf.FieldNode).__init(this.bb!.__vector(this.bb_pos + offset) + index * 16, this.bb!) : null;\n        }\n\n        /**\n         * @returns number\n         */\n        nodesLength(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * Buffers correspond to the pre-ordered flattened buffer tree\n         *\n         * The number of buffers appended to this list depends on the schema. For\n         * example, most primitive arrays will have 2 buffers, 1 for the validity\n         * bitmap and 1 for the values. For struct arrays, there will only be a\n         * single buffer for the validity (nulls) bitmap\n         *\n         * @param number index\n         * @param org.apache.arrow.flatbuf.Buffer= obj\n         * @returns org.apache.arrow.flatbuf.Buffer\n         */\n        buffers(index: number, obj?: NS7624605610262437867.org.apache.arrow.flatbuf.Buffer): NS7624605610262437867.org.apache.arrow.flatbuf.Buffer | null {\n            let offset = this.bb!.__offset(this.bb_pos, 8);\n            return offset ? (obj || new NS7624605610262437867.org.apache.arrow.flatbuf.Buffer).__init(this.bb!.__vector(this.bb_pos + offset) + index * 16, this.bb!) : null;\n        }\n\n        /**\n         * @returns number\n         */\n        buffersLength(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 8);\n            return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startRecordBatch(builder: flatbuffers.Builder) {\n            builder.startObject(3);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Long length\n         */\n        static addLength(builder: flatbuffers.Builder, length: flatbuffers.Long) {\n            builder.addFieldInt64(0, length, builder.createLong(0, 0));\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset nodesOffset\n         */\n        static addNodes(builder: flatbuffers.Builder, nodesOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(1, nodesOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startNodesVector(builder: flatbuffers.Builder, numElems: number) {\n            builder.startVector(16, numElems, 8);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset buffersOffset\n         */\n        static addBuffers(builder: flatbuffers.Builder, buffersOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(2, buffersOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startBuffersVector(builder: flatbuffers.Builder, numElems: number) {\n            builder.startVector(16, numElems, 8);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endRecordBatch(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createRecordBatch(builder: flatbuffers.Builder, length: flatbuffers.Long, nodesOffset: flatbuffers.Offset, buffersOffset: flatbuffers.Offset): flatbuffers.Offset {\n            RecordBatch.startRecordBatch(builder);\n            RecordBatch.addLength(builder, length);\n            RecordBatch.addNodes(builder, nodesOffset);\n            RecordBatch.addBuffers(builder, buffersOffset);\n            return RecordBatch.endRecordBatch(builder);\n        }\n    }\n}\n/**\n * For sending dictionary encoding information. Any Field can be\n * dictionary-encoded, but in this case none of its children may be\n * dictionary-encoded.\n * There is one vector / column per dictionary, but that vector / column\n * may be spread across multiple dictionary batches by using the isDelta\n * flag\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class DictionaryBatch {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns DictionaryBatch\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): DictionaryBatch {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param DictionaryBatch= obj\n         * @returns DictionaryBatch\n         */\n        static getRootAsDictionaryBatch(bb: flatbuffers.ByteBuffer, obj?: DictionaryBatch): DictionaryBatch {\n            return (obj || new DictionaryBatch).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @returns flatbuffers.Long\n         */\n        id(): flatbuffers.Long {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n        }\n\n        /**\n         * @param org.apache.arrow.flatbuf.RecordBatch= obj\n         * @returns org.apache.arrow.flatbuf.RecordBatch|null\n         */\n        data(obj?: org.apache.arrow.flatbuf.RecordBatch): org.apache.arrow.flatbuf.RecordBatch | null {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? (obj || new org.apache.arrow.flatbuf.RecordBatch).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;\n        }\n\n        /**\n         * If isDelta is true the values in the dictionary are to be appended to a\n         * dictionary with the indicated id\n         *\n         * @returns boolean\n         */\n        isDelta(): boolean {\n            let offset = this.bb!.__offset(this.bb_pos, 8);\n            return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startDictionaryBatch(builder: flatbuffers.Builder) {\n            builder.startObject(3);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Long id\n         */\n        static addId(builder: flatbuffers.Builder, id: flatbuffers.Long) {\n            builder.addFieldInt64(0, id, builder.createLong(0, 0));\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset dataOffset\n         */\n        static addData(builder: flatbuffers.Builder, dataOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(1, dataOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param boolean isDelta\n         */\n        static addIsDelta(builder: flatbuffers.Builder, isDelta: boolean) {\n            builder.addFieldInt8(2, +isDelta, +false);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endDictionaryBatch(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createDictionaryBatch(builder: flatbuffers.Builder, id: flatbuffers.Long, dataOffset: flatbuffers.Offset, isDelta: boolean): flatbuffers.Offset {\n            DictionaryBatch.startDictionaryBatch(builder);\n            DictionaryBatch.addId(builder, id);\n            DictionaryBatch.addData(builder, dataOffset);\n            DictionaryBatch.addIsDelta(builder, isDelta);\n            return DictionaryBatch.endDictionaryBatch(builder);\n        }\n    }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Message {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Message\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Message {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Message= obj\n         * @returns Message\n         */\n        static getRootAsMessage(bb: flatbuffers.ByteBuffer, obj?: Message): Message {\n            return (obj || new Message).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @returns org.apache.arrow.flatbuf.MetadataVersion\n         */\n        version(): NS7624605610262437867.org.apache.arrow.flatbuf.MetadataVersion {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? /**  */ (this.bb!.readInt16(this.bb_pos + offset)) : NS7624605610262437867.org.apache.arrow.flatbuf.MetadataVersion.V1;\n        }\n\n        /**\n         * @returns org.apache.arrow.flatbuf.MessageHeader\n         */\n        headerType(): org.apache.arrow.flatbuf.MessageHeader {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? /**  */ (this.bb!.readUint8(this.bb_pos + offset)) : org.apache.arrow.flatbuf.MessageHeader.NONE;\n        }\n\n        /**\n         * @param flatbuffers.Table obj\n         * @returns ?flatbuffers.Table\n         */\n        header<T extends flatbuffers.Table>(obj: T): T | null {\n            let offset = this.bb!.__offset(this.bb_pos, 8);\n            return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;\n        }\n\n        /**\n         * @returns flatbuffers.Long\n         */\n        bodyLength(): flatbuffers.Long {\n            let offset = this.bb!.__offset(this.bb_pos, 10);\n            return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n        }\n\n        /**\n         * @param number index\n         * @param org.apache.arrow.flatbuf.KeyValue= obj\n         * @returns org.apache.arrow.flatbuf.KeyValue\n         */\n        customMetadata(index: number, obj?: NS7624605610262437867.org.apache.arrow.flatbuf.KeyValue): NS7624605610262437867.org.apache.arrow.flatbuf.KeyValue | null {\n            let offset = this.bb!.__offset(this.bb_pos, 12);\n            return offset ? (obj || new NS7624605610262437867.org.apache.arrow.flatbuf.KeyValue).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;\n        }\n\n        /**\n         * @returns number\n         */\n        customMetadataLength(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 12);\n            return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startMessage(builder: flatbuffers.Builder) {\n            builder.startObject(5);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.MetadataVersion version\n         */\n        static addVersion(builder: flatbuffers.Builder, version: NS7624605610262437867.org.apache.arrow.flatbuf.MetadataVersion) {\n            builder.addFieldInt16(0, version, NS7624605610262437867.org.apache.arrow.flatbuf.MetadataVersion.V1);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.MessageHeader headerType\n         */\n        static addHeaderType(builder: flatbuffers.Builder, headerType: org.apache.arrow.flatbuf.MessageHeader) {\n            builder.addFieldInt8(1, headerType, org.apache.arrow.flatbuf.MessageHeader.NONE);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset headerOffset\n         */\n        static addHeader(builder: flatbuffers.Builder, headerOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(2, headerOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Long bodyLength\n         */\n        static addBodyLength(builder: flatbuffers.Builder, bodyLength: flatbuffers.Long) {\n            builder.addFieldInt64(3, bodyLength, builder.createLong(0, 0));\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset customMetadataOffset\n         */\n        static addCustomMetadata(builder: flatbuffers.Builder, customMetadataOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(4, customMetadataOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param Array.<flatbuffers.Offset> data\n         * @returns flatbuffers.Offset\n         */\n        static createCustomMetadataVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n            builder.startVector(4, data.length, 4);\n            for (let i = data.length - 1; i >= 0; i--) {\n                builder.addOffset(data[i]);\n            }\n            return builder.endVector();\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startCustomMetadataVector(builder: flatbuffers.Builder, numElems: number) {\n            builder.startVector(4, numElems, 4);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endMessage(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset offset\n         */\n        static finishMessageBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\n            builder.finish(offset);\n        }\n\n        static createMessage(builder: flatbuffers.Builder, version: NS7624605610262437867.org.apache.arrow.flatbuf.MetadataVersion, headerType: org.apache.arrow.flatbuf.MessageHeader, headerOffset: flatbuffers.Offset, bodyLength: flatbuffers.Long, customMetadataOffset: flatbuffers.Offset): flatbuffers.Offset {\n            Message.startMessage(builder);\n            Message.addVersion(builder, version);\n            Message.addHeaderType(builder, headerType);\n            Message.addHeader(builder, headerOffset);\n            Message.addBodyLength(builder, bodyLength);\n            Message.addCustomMetadata(builder, customMetadataOffset);\n            return Message.endMessage(builder);\n        }\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport * as Schema_ from './fb/Schema';\nimport * as Message_ from './fb/Message';\n\nexport import ArrowType = Schema_.org.apache.arrow.flatbuf.Type;\nexport import DateUnit = Schema_.org.apache.arrow.flatbuf.DateUnit;\nexport import TimeUnit = Schema_.org.apache.arrow.flatbuf.TimeUnit;\nexport import Precision = Schema_.org.apache.arrow.flatbuf.Precision;\nexport import UnionMode = Schema_.org.apache.arrow.flatbuf.UnionMode;\nexport import IntervalUnit = Schema_.org.apache.arrow.flatbuf.IntervalUnit;\nexport import MessageHeader = Message_.org.apache.arrow.flatbuf.MessageHeader;\nexport import MetadataVersion = Schema_.org.apache.arrow.flatbuf.MetadataVersion;\n\n/**\n * Main data type enumeration.\n *\n * Data types in this library are all *logical*. They can be expressed as\n * either a primitive physical type (bytes or bits of some fixed size), a\n * nested type consisting of other data types, or another data type (e.g. a\n * timestamp encoded as an int64).\n *\n * **Note**: Only enum values 0-17 (NONE through Map) are written to an Arrow\n * IPC payload.\n *\n * The rest of the values are specified here so TypeScript can narrow the type\n * signatures further beyond the base Arrow Types. The Arrow DataTypes include\n * metadata like `bitWidth` that impact the type signatures of the values we\n * accept and return.\n *\n * For example, the `Int8Vector` reads 1-byte numbers from an `Int8Array`, an\n * `Int32Vector` reads a 4-byte number from an `Int32Array`, and an `Int64Vector`\n * reads a pair of 4-byte lo, hi 32-bit integers as a zero-copy slice from the\n * underlying `Int32Array`.\n *\n * Library consumers benefit by knowing the narrowest type, since we can ensure\n * the types across all public methods are propagated, and never bail to `any`.\n * These values are _never_ used at runtime, and they will _never_ be written\n * to the flatbuffers metadata of serialized Arrow IPC payloads.\n */\nexport enum Type {\n    /** The default placeholder type */\n    NONE            =  0,\n    /** A NULL type having no physical storage */\n    Null            =  1,\n    /** Signed or unsigned 8, 16, 32, or 64-bit little-endian integer */\n    Int             =  2,\n    /** 2, 4, or 8-byte floating point value */\n    Float           =  3,\n    /** Variable-length bytes (no guarantee of UTF8-ness) */\n    Binary          =  4,\n    /** UTF8 variable-length string as List<Char> */\n    Utf8            =  5,\n    /** Boolean as 1 bit, LSB bit-packed ordering */\n    Bool            =  6,\n    /** Precision-and-scale-based decimal type. Storage type depends on the parameters. */\n    Decimal         =  7,\n    /** int32_t days or int64_t milliseconds since the UNIX epoch */\n    Date            =  8,\n    /** Time as signed 32 or 64-bit integer, representing either seconds, milliseconds, microseconds, or nanoseconds since midnight since midnight */\n    Time            =  9,\n    /** Exact timestamp encoded with int64 since UNIX epoch (Default unit millisecond) */\n    Timestamp       = 10,\n    /** YEAR_MONTH or DAY_TIME interval in SQL style */\n    Interval        = 11,\n    /** A list of some logical data type */\n    List            = 12,\n    /** Struct of logical types */\n    Struct          = 13,\n    /** Union of logical types */\n    Union           = 14,\n    /** Fixed-size binary. Each value occupies the same number of bytes */\n    FixedSizeBinary = 15,\n    /** Fixed-size list. Each value occupies the same number of bytes */\n    FixedSizeList   = 16,\n    /** Map of named logical types */\n    Map             = 17,\n\n    /** Dictionary aka Category type */\n    Dictionary            = -1,\n    Int8                  = -2,\n    Int16                 = -3,\n    Int32                 = -4,\n    Int64                 = -5,\n    Uint8                 = -6,\n    Uint16                = -7,\n    Uint32                = -8,\n    Uint64                = -9,\n    Float16               = -10,\n    Float32               = -11,\n    Float64               = -12,\n    DateDay               = -13,\n    DateMillisecond       = -14,\n    TimestampSecond       = -15,\n    TimestampMillisecond  = -16,\n    TimestampMicrosecond  = -17,\n    TimestampNanosecond   = -18,\n    TimeSecond            = -19,\n    TimeMillisecond       = -20,\n    TimeMicrosecond       = -21,\n    TimeNanosecond        = -22,\n    DenseUnion            = -23,\n    SparseUnion           = -24,\n    IntervalDayTime       = -25,\n    IntervalYearMonth     = -26,\n}\n\nexport enum BufferType {\n    /**\n     * used in List type, Dense Union and variable length primitive types (String, Binary)\n     */\n    OFFSET = 0,\n\n    /**\n     * actual data, either wixed width primitive types in slots or variable width delimited by an OFFSET vector\n     */\n    DATA = 1,\n\n    /**\n     * Bit vector indicating if each value is null\n     */\n    VALIDITY = 2,\n\n    /**\n     * Type vector used in Union type\n     */\n    TYPE = 3\n  }\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/** @ignore */\nexport function getBool(_data: any, _index: number, byte: number, bit: number) {\n    return (byte & 1 << bit) !== 0;\n}\n\n/** @ignore */\nexport function getBit(_data: any, _index: number, byte: number, bit: number): 0 | 1 {\n    return (byte & 1 << bit) >> bit as (0 | 1);\n}\n\n/** @ignore */\nexport function setBool(bytes: Uint8Array, index: number, value: any) {\n    return value ?\n        !!(bytes[index >> 3] |=  (1 << (index % 8))) || true :\n        !(bytes[index >> 3] &= ~(1 << (index % 8))) && false ;\n}\n\n/** @ignore */\nexport function truncateBitmap(offset: number, length: number, bitmap: Uint8Array) {\n    const alignedSize = (bitmap.byteLength + 7) & ~7;\n    if (offset > 0 || bitmap.byteLength < alignedSize) {\n        const bytes = new Uint8Array(alignedSize);\n        // If the offset is a multiple of 8 bits, it's safe to slice the bitmap\n        bytes.set(offset % 8 === 0 ? bitmap.subarray(offset >> 3) :\n            // Otherwise iterate each bit from the offset and return a new one\n            packBools(iterateBits(bitmap, offset, length, null, getBool)).subarray(0, alignedSize));\n        return bytes;\n    }\n    return bitmap;\n}\n\n/** @ignore */\nexport function packBools(values: Iterable<any>) {\n    let xs: number[] = [];\n    let i = 0, bit = 0, byte = 0;\n    for (const value of values) {\n        value && (byte |= 1 << bit);\n        if (++bit === 8) {\n            xs[i++] = byte;\n            byte = bit = 0;\n        }\n    }\n    if (i === 0 || bit > 0) { xs[i++] = byte; }\n    let b = new Uint8Array((xs.length + 7) & ~7);\n    b.set(xs);\n    return b;\n}\n\n/** @ignore */\nexport function* iterateBits<T>(bytes: Uint8Array, begin: number, length: number, context: any,\n                                get: (context: any, index: number, byte: number, bit: number) => T) {\n    let bit = begin % 8;\n    let byteIndex = begin >> 3;\n    let index = 0, remaining = length;\n    for (; remaining > 0; bit = 0) {\n        let byte = bytes[byteIndex++];\n        do {\n            yield get(context, index++, byte, bit);\n        } while (--remaining > 0 && ++bit < 8);\n    }\n}\n\n/**\n * Compute the population count (the number of bits set to 1) for a range of bits in a Uint8Array.\n * @param vector The Uint8Array of bits for which to compute the population count.\n * @param lhs The range's left-hand side (or start) bit\n * @param rhs The range's right-hand side (or end) bit\n */\n/** @ignore */\nexport function popcnt_bit_range(data: Uint8Array, lhs: number, rhs: number): number {\n    if (rhs - lhs <= 0) { return 0; }\n    // If the bit range is less than one byte, sum the 1 bits in the bit range\n    if (rhs - lhs < 8) {\n        let sum = 0;\n        for (const bit of iterateBits(data, lhs, rhs - lhs, data, getBit)) {\n            sum += bit;\n        }\n        return sum;\n    }\n    // Get the next lowest multiple of 8 from the right hand side\n    const rhsInside = rhs >> 3 << 3;\n    // Get the next highest multiple of 8 from the left hand side\n    const lhsInside = lhs + (lhs % 8 === 0 ? 0 : 8 - lhs % 8);\n    return (\n        // Get the popcnt of bits between the left hand side, and the next highest multiple of 8\n        popcnt_bit_range(data, lhs, lhsInside) +\n        // Get the popcnt of bits between the right hand side, and the next lowest multiple of 8\n        popcnt_bit_range(data, rhsInside, rhs) +\n        // Get the popcnt of all bits between the left and right hand sides' multiples of 8\n        popcnt_array(data, lhsInside >> 3, (rhsInside - lhsInside) >> 3)\n    );\n}\n\n/** @ignore */\nexport function popcnt_array(arr: ArrayBufferView, byteOffset?: number, byteLength?: number) {\n    let cnt = 0, pos = byteOffset! | 0;\n    const view = new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n    const len =  byteLength === void 0 ? arr.byteLength : pos + byteLength;\n    while (len - pos >= 4) {\n        cnt += popcnt_uint32(view.getUint32(pos));\n        pos += 4;\n    }\n    while (len - pos >= 2) {\n        cnt += popcnt_uint32(view.getUint16(pos));\n        pos += 2;\n    }\n    while (len - pos >= 1) {\n        cnt += popcnt_uint32(view.getUint8(pos));\n        pos += 1;\n    }\n    return cnt;\n}\n\n/** @ignore */\nexport function popcnt_uint32(uint32: number): number {\n    let i = uint32 | 0;\n    i = i - ((i >>> 1) & 0x55555555);\n    i = (i & 0x33333333) + ((i >>> 2) & 0x33333333);\n    return (((i + (i >>> 4)) & 0x0F0F0F0F) * 0x01010101) >>> 24;\n}\n","import arrayWithoutHoles from \"./arrayWithoutHoles\";\nimport iterableToArray from \"./iterableToArray\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nimport nonIterableSpread from \"./nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from './data';\nimport { Vector } from './vector';\nimport { Type, Precision, DateUnit, TimeUnit, IntervalUnit, UnionMode } from './enum';\nimport { DataType, Float, Int, Date_, Interval, Time, Timestamp, Union, } from './type';\n\nexport abstract class Visitor {\n    public visitMany(nodes: any[], ...args: any[][]) {\n        return nodes.map((node, i) => this.visit(node, ...args.map((x) => x[i])));\n    }\n    public visit(...args: any[]) {\n        return this.getVisitFn(args[0], false).apply(this, args);\n    }\n    public getVisitFn(node: any, throwIfNotFound = true) {\n        return getVisitFn(this, node, throwIfNotFound);\n    }\n    public visitNull            (_node: any, ..._args: any[]): any { return null; }\n    public visitBool            (_node: any, ..._args: any[]): any { return null; }\n    public visitInt             (_node: any, ..._args: any[]): any { return null; }\n    public visitFloat           (_node: any, ..._args: any[]): any { return null; }\n    public visitUtf8            (_node: any, ..._args: any[]): any { return null; }\n    public visitBinary          (_node: any, ..._args: any[]): any { return null; }\n    public visitFixedSizeBinary (_node: any, ..._args: any[]): any { return null; }\n    public visitDate            (_node: any, ..._args: any[]): any { return null; }\n    public visitTimestamp       (_node: any, ..._args: any[]): any { return null; }\n    public visitTime            (_node: any, ..._args: any[]): any { return null; }\n    public visitDecimal         (_node: any, ..._args: any[]): any { return null; }\n    public visitList            (_node: any, ..._args: any[]): any { return null; }\n    public visitStruct          (_node: any, ..._args: any[]): any { return null; }\n    public visitUnion           (_node: any, ..._args: any[]): any { return null; }\n    public visitDictionary      (_node: any, ..._args: any[]): any { return null; }\n    public visitInterval        (_node: any, ..._args: any[]): any { return null; }\n    public visitFixedSizeList   (_node: any, ..._args: any[]): any { return null; }\n    public visitMap             (_node: any, ..._args: any[]): any { return null; }\n}\n\n/** @ignore */\nfunction getVisitFn<T extends DataType>(visitor: Visitor, node: any, throwIfNotFound = true) {\n    let fn: any = null;\n    let dtype: T['TType'] = Type.NONE;\n    // tslint:disable\n    if      (node instanceof Data    ) { dtype = inferDType(node.type as T); }\n    else if (node instanceof Vector  ) { dtype = inferDType(node.type as T); }\n    else if (node instanceof DataType) { dtype = inferDType(node      as T); }\n    else if (typeof (dtype = node) !== 'number') { dtype = Type[node] as any as T['TType']; }\n\n    switch (dtype) {\n        case Type.Null:                 fn = visitor.visitNull; break;\n        case Type.Bool:                 fn = visitor.visitBool; break;\n        case Type.Int:                  fn = visitor.visitInt; break;\n        case Type.Int8:                 fn = visitor.visitInt8 || visitor.visitInt; break;\n        case Type.Int16:                fn = visitor.visitInt16 || visitor.visitInt; break;\n        case Type.Int32:                fn = visitor.visitInt32 || visitor.visitInt; break;\n        case Type.Int64:                fn = visitor.visitInt64 || visitor.visitInt; break;\n        case Type.Uint8:                fn = visitor.visitUint8 || visitor.visitInt; break;\n        case Type.Uint16:               fn = visitor.visitUint16 || visitor.visitInt; break;\n        case Type.Uint32:               fn = visitor.visitUint32 || visitor.visitInt; break;\n        case Type.Uint64:               fn = visitor.visitUint64 || visitor.visitInt; break;\n        case Type.Float:                fn = visitor.visitFloat; break;\n        case Type.Float16:              fn = visitor.visitFloat16 || visitor.visitFloat; break;\n        case Type.Float32:              fn = visitor.visitFloat32 || visitor.visitFloat; break;\n        case Type.Float64:              fn = visitor.visitFloat64 || visitor.visitFloat; break;\n        case Type.Utf8:                 fn = visitor.visitUtf8; break;\n        case Type.Binary:               fn = visitor.visitBinary; break;\n        case Type.FixedSizeBinary:      fn = visitor.visitFixedSizeBinary; break;\n        case Type.Date:                 fn = visitor.visitDate; break;\n        case Type.DateDay:              fn = visitor.visitDateDay || visitor.visitDate; break;\n        case Type.DateMillisecond:      fn = visitor.visitDateMillisecond || visitor.visitDate; break;\n        case Type.Timestamp:            fn = visitor.visitTimestamp; break;\n        case Type.TimestampSecond:      fn = visitor.visitTimestampSecond || visitor.visitTimestamp; break;\n        case Type.TimestampMillisecond: fn = visitor.visitTimestampMillisecond || visitor.visitTimestamp; break;\n        case Type.TimestampMicrosecond: fn = visitor.visitTimestampMicrosecond || visitor.visitTimestamp; break;\n        case Type.TimestampNanosecond:  fn = visitor.visitTimestampNanosecond || visitor.visitTimestamp; break;\n        case Type.Time:                 fn = visitor.visitTime; break;\n        case Type.TimeSecond:           fn = visitor.visitTimeSecond || visitor.visitTime; break;\n        case Type.TimeMillisecond:      fn = visitor.visitTimeMillisecond || visitor.visitTime; break;\n        case Type.TimeMicrosecond:      fn = visitor.visitTimeMicrosecond || visitor.visitTime; break;\n        case Type.TimeNanosecond:       fn = visitor.visitTimeNanosecond || visitor.visitTime; break;\n        case Type.Decimal:              fn = visitor.visitDecimal; break;\n        case Type.List:                 fn = visitor.visitList; break;\n        case Type.Struct:               fn = visitor.visitStruct; break;\n        case Type.Union:                fn = visitor.visitUnion; break;\n        case Type.DenseUnion:           fn = visitor.visitDenseUnion || visitor.visitUnion; break;\n        case Type.SparseUnion:          fn = visitor.visitSparseUnion || visitor.visitUnion; break;\n        case Type.Dictionary:           fn = visitor.visitDictionary; break;\n        case Type.Interval:             fn = visitor.visitInterval; break;\n        case Type.IntervalDayTime:      fn = visitor.visitIntervalDayTime || visitor.visitInterval; break;\n        case Type.IntervalYearMonth:    fn = visitor.visitIntervalYearMonth || visitor.visitInterval; break;\n        case Type.FixedSizeList:        fn = visitor.visitFixedSizeList; break;\n        case Type.Map:                  fn = visitor.visitMap; break;\n    }\n    if (typeof fn === 'function') return fn;\n    if (!throwIfNotFound) return () => null;\n    throw new Error(`Unrecognized type '${Type[dtype]}'`);\n}\n\n/** @ignore */\nfunction inferDType<T extends DataType>(type: T): Type {\n    switch (type.typeId) {\n        case Type.Null: return Type.Null;\n        case Type.Int:\n            const { bitWidth, isSigned } = (type as any as Int);\n            switch (bitWidth) {\n                case  8: return isSigned ? Type.Int8  : Type.Uint8 ;\n                case 16: return isSigned ? Type.Int16 : Type.Uint16;\n                case 32: return isSigned ? Type.Int32 : Type.Uint32;\n                case 64: return isSigned ? Type.Int64 : Type.Uint64;\n            }\n            return Type.Int;\n        case Type.Float:\n            switch((type as any as Float).precision) {\n                case Precision.HALF: return Type.Float16;\n                case Precision.SINGLE: return Type.Float32;\n                case Precision.DOUBLE: return Type.Float64;\n            }\n            return Type.Float;\n        case Type.Binary: return Type.Binary;\n        case Type.Utf8: return Type.Utf8;\n        case Type.Bool: return Type.Bool;\n        case Type.Decimal: return Type.Decimal;\n        case Type.Time:\n            switch ((type as any as Time).unit) {\n                case TimeUnit.SECOND: return Type.TimeSecond;\n                case TimeUnit.MILLISECOND: return Type.TimeMillisecond;\n                case TimeUnit.MICROSECOND: return Type.TimeMicrosecond;\n                case TimeUnit.NANOSECOND: return Type.TimeNanosecond;\n            }\n            return Type.Time;\n        case Type.Timestamp:\n            switch ((type as any as Timestamp).unit) {\n                case TimeUnit.SECOND: return Type.TimestampSecond;\n                case TimeUnit.MILLISECOND: return Type.TimestampMillisecond;\n                case TimeUnit.MICROSECOND: return Type.TimestampMicrosecond;\n                case TimeUnit.NANOSECOND: return Type.TimestampNanosecond;\n            }\n            return Type.Timestamp;\n        case Type.Date:\n            switch ((type as any as Date_).unit) {\n                case DateUnit.DAY: return Type.DateDay;\n                case DateUnit.MILLISECOND: return Type.DateMillisecond;\n            }\n            return Type.Date;\n        case Type.Interval:\n            switch ((type as any as Interval).unit) {\n                case IntervalUnit.DAY_TIME: return Type.IntervalDayTime;\n                case IntervalUnit.YEAR_MONTH: return Type.IntervalYearMonth;\n            }\n            return Type.Interval;\n        case Type.Map: return Type.Map;\n        case Type.List: return Type.List;\n        case Type.Struct: return Type.Struct;\n        case Type.Union:\n            switch ((type as any as Union).mode) {\n                case UnionMode.Dense: return Type.DenseUnion;\n                case UnionMode.Sparse: return Type.SparseUnion;\n            }\n            return Type.Union;\n        case Type.FixedSizeBinary: return Type.FixedSizeBinary;\n        case Type.FixedSizeList: return Type.FixedSizeList;\n        case Type.Dictionary: return Type.Dictionary;\n    }\n    throw new Error(`Unrecognized type '${Type[type.typeId]}'`);\n}\n\nexport interface Visitor {\n    visitNull                  (node: any, ...args: any[]): any;\n    visitBool                  (node: any, ...args: any[]): any;\n    visitInt                   (node: any, ...args: any[]): any;\n    visitInt8?                 (node: any, ...args: any[]): any;\n    visitInt16?                (node: any, ...args: any[]): any;\n    visitInt32?                (node: any, ...args: any[]): any;\n    visitInt64?                (node: any, ...args: any[]): any;\n    visitUint8?                (node: any, ...args: any[]): any;\n    visitUint16?               (node: any, ...args: any[]): any;\n    visitUint32?               (node: any, ...args: any[]): any;\n    visitUint64?               (node: any, ...args: any[]): any;\n    visitFloat                 (node: any, ...args: any[]): any;\n    visitFloat16?              (node: any, ...args: any[]): any;\n    visitFloat32?              (node: any, ...args: any[]): any;\n    visitFloat64?              (node: any, ...args: any[]): any;\n    visitUtf8                  (node: any, ...args: any[]): any;\n    visitBinary                (node: any, ...args: any[]): any;\n    visitFixedSizeBinary       (node: any, ...args: any[]): any;\n    visitDate                  (node: any, ...args: any[]): any;\n    visitDateDay?              (node: any, ...args: any[]): any;\n    visitDateMillisecond?      (node: any, ...args: any[]): any;\n    visitTimestamp             (node: any, ...args: any[]): any;\n    visitTimestampSecond?      (node: any, ...args: any[]): any;\n    visitTimestampMillisecond? (node: any, ...args: any[]): any;\n    visitTimestampMicrosecond? (node: any, ...args: any[]): any;\n    visitTimestampNanosecond?  (node: any, ...args: any[]): any;\n    visitTime                  (node: any, ...args: any[]): any;\n    visitTimeSecond?           (node: any, ...args: any[]): any;\n    visitTimeMillisecond?      (node: any, ...args: any[]): any;\n    visitTimeMicrosecond?      (node: any, ...args: any[]): any;\n    visitTimeNanosecond?       (node: any, ...args: any[]): any;\n    visitDecimal               (node: any, ...args: any[]): any;\n    visitList                  (node: any, ...args: any[]): any;\n    visitStruct                (node: any, ...args: any[]): any;\n    visitUnion                 (node: any, ...args: any[]): any;\n    visitDenseUnion?           (node: any, ...args: any[]): any;\n    visitSparseUnion?          (node: any, ...args: any[]): any;\n    visitDictionary            (node: any, ...args: any[]): any;\n    visitInterval              (node: any, ...args: any[]): any;\n    visitIntervalDayTime?      (node: any, ...args: any[]): any;\n    visitIntervalYearMonth?    (node: any, ...args: any[]): any;\n    visitFixedSizeList         (node: any, ...args: any[]): any;\n    visitMap                   (node: any, ...args: any[]): any;\n}\n\n// Add these here so they're picked up by the externs creator\n// in the build, and closure-compiler doesn't minify them away\n(Visitor.prototype as any).visitInt8 = null;\n(Visitor.prototype as any).visitInt16 = null;\n(Visitor.prototype as any).visitInt32 = null;\n(Visitor.prototype as any).visitInt64 = null;\n(Visitor.prototype as any).visitUint8 = null;\n(Visitor.prototype as any).visitUint16 = null;\n(Visitor.prototype as any).visitUint32 = null;\n(Visitor.prototype as any).visitUint64 = null;\n(Visitor.prototype as any).visitFloat16 = null;\n(Visitor.prototype as any).visitFloat32 = null;\n(Visitor.prototype as any).visitFloat64 = null;\n(Visitor.prototype as any).visitDateDay = null;\n(Visitor.prototype as any).visitDateMillisecond = null;\n(Visitor.prototype as any).visitTimestampSecond = null;\n(Visitor.prototype as any).visitTimestampMillisecond = null;\n(Visitor.prototype as any).visitTimestampMicrosecond = null;\n(Visitor.prototype as any).visitTimestampNanosecond = null;\n(Visitor.prototype as any).visitTimeSecond = null;\n(Visitor.prototype as any).visitTimeMillisecond = null;\n(Visitor.prototype as any).visitTimeMicrosecond = null;\n(Visitor.prototype as any).visitTimeNanosecond = null;\n(Visitor.prototype as any).visitDenseUnion = null;\n(Visitor.prototype as any).visitSparseUnion = null;\n(Visitor.prototype as any).visitIntervalDayTime = null;\n(Visitor.prototype as any).visitIntervalYearMonth = null;\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Visitor } from '../visitor';\nimport { VectorType } from '../interfaces';\nimport { Schema, Field } from '../schema';\nimport {\n    DataType, Dictionary,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\n    Float, Float16, Float32, Float64,\n    Int, Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64,\n    Date_, DateDay, DateMillisecond,\n    Interval, IntervalDayTime, IntervalYearMonth,\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\n    Union, DenseUnion, SparseUnion,\n} from '../type';\n\n/** @ignore */\nexport interface TypeComparator extends Visitor {\n    visit<T extends DataType>(type: T, other?: DataType | null): other is T;\n    visitMany<T extends DataType>(nodes: T[], others?: DataType[] | null): boolean[];\n    getVisitFn<T extends DataType>(node: VectorType<T> |  Data<T> | T): (other?: DataType | null) => other is T;\n    visitNull                 <T extends Null>                 (type: T, other?: DataType | null): other is T;\n    visitBool                 <T extends Bool>                 (type: T, other?: DataType | null): other is T;\n    visitInt                  <T extends Int>                  (type: T, other?: DataType | null): other is T;\n    visitInt8                 <T extends Int8>                 (type: T, other?: DataType | null): other is T;\n    visitInt16                <T extends Int16>                (type: T, other?: DataType | null): other is T;\n    visitInt32                <T extends Int32>                (type: T, other?: DataType | null): other is T;\n    visitInt64                <T extends Int64>                (type: T, other?: DataType | null): other is T;\n    visitUint8                <T extends Uint8>                (type: T, other?: DataType | null): other is T;\n    visitUint16               <T extends Uint16>               (type: T, other?: DataType | null): other is T;\n    visitUint32               <T extends Uint32>               (type: T, other?: DataType | null): other is T;\n    visitUint64               <T extends Uint64>               (type: T, other?: DataType | null): other is T;\n    visitFloat                <T extends Float>                (type: T, other?: DataType | null): other is T;\n    visitFloat16              <T extends Float16>              (type: T, other?: DataType | null): other is T;\n    visitFloat32              <T extends Float32>              (type: T, other?: DataType | null): other is T;\n    visitFloat64              <T extends Float64>              (type: T, other?: DataType | null): other is T;\n    visitUtf8                 <T extends Utf8>                 (type: T, other?: DataType | null): other is T;\n    visitBinary               <T extends Binary>               (type: T, other?: DataType | null): other is T;\n    visitFixedSizeBinary      <T extends FixedSizeBinary>      (type: T, other?: DataType | null): other is T;\n    visitDate                 <T extends Date_>                (type: T, other?: DataType | null): other is T;\n    visitDateDay              <T extends DateDay>              (type: T, other?: DataType | null): other is T;\n    visitDateMillisecond      <T extends DateMillisecond>      (type: T, other?: DataType | null): other is T;\n    visitTimestamp            <T extends Timestamp>            (type: T, other?: DataType | null): other is T;\n    visitTimestampSecond      <T extends TimestampSecond>      (type: T, other?: DataType | null): other is T;\n    visitTimestampMillisecond <T extends TimestampMillisecond> (type: T, other?: DataType | null): other is T;\n    visitTimestampMicrosecond <T extends TimestampMicrosecond> (type: T, other?: DataType | null): other is T;\n    visitTimestampNanosecond  <T extends TimestampNanosecond>  (type: T, other?: DataType | null): other is T;\n    visitTime                 <T extends Time>                 (type: T, other?: DataType | null): other is T;\n    visitTimeSecond           <T extends TimeSecond>           (type: T, other?: DataType | null): other is T;\n    visitTimeMillisecond      <T extends TimeMillisecond>      (type: T, other?: DataType | null): other is T;\n    visitTimeMicrosecond      <T extends TimeMicrosecond>      (type: T, other?: DataType | null): other is T;\n    visitTimeNanosecond       <T extends TimeNanosecond>       (type: T, other?: DataType | null): other is T;\n    visitDecimal              <T extends Decimal>              (type: T, other?: DataType | null): other is T;\n    visitList                 <T extends List>                 (type: T, other?: DataType | null): other is T;\n    visitStruct               <T extends Struct>               (type: T, other?: DataType | null): other is T;\n    visitUnion                <T extends Union>                (type: T, other?: DataType | null): other is T;\n    visitDenseUnion           <T extends DenseUnion>           (type: T, other?: DataType | null): other is T;\n    visitSparseUnion          <T extends SparseUnion>          (type: T, other?: DataType | null): other is T;\n    visitDictionary           <T extends Dictionary>           (type: T, other?: DataType | null): other is T;\n    visitInterval             <T extends Interval>             (type: T, other?: DataType | null): other is T;\n    visitIntervalDayTime      <T extends IntervalDayTime>      (type: T, other?: DataType | null): other is T;\n    visitIntervalYearMonth    <T extends IntervalYearMonth>    (type: T, other?: DataType | null): other is T;\n    visitFixedSizeList        <T extends FixedSizeList>        (type: T, other?: DataType | null): other is T;\n    visitMap                  <T extends Map_>                 (type: T, other?: DataType | null): other is T;\n}\n\n/** @ignore */\nexport class TypeComparator extends Visitor {\n    compareSchemas<T extends { [key: string]: DataType }>(schema: Schema<T>, other?: Schema | null): other is Schema<T> {\n        return (schema === other) || (\n            other instanceof schema.constructor &&\n            instance.compareFields(schema.fields, other.fields)\n        );\n    }\n    compareFields<T extends { [key: string]: DataType }>(fields: Field<T[keyof T]>[], others?: Field[] | null): others is Field<T[keyof T]>[] {\n        return (fields === others) || (\n            Array.isArray(fields) &&\n            Array.isArray(others) &&\n            fields.length === others.length &&\n            fields.every((f, i) => instance.compareField(f, others[i]))\n        );\n    }\n    compareField<T extends DataType = any>(field: Field<T>, other?: Field | null): other is Field<T> {\n        return (field === other) || (\n            other instanceof field.constructor &&\n            field.name === other.name &&\n            field.nullable === other.nullable &&\n            instance.visit(field.type, other.type)\n        );\n    }\n}\n\nfunction compareConstructor<T extends DataType>(type: T, other?: DataType | null): other is T {\n    return other instanceof type.constructor;\n}\n\nfunction compareAny<T extends DataType>(type: T, other?: DataType | null): other is T {\n    return (type === other) || compareConstructor(type, other);\n}\n\nfunction compareInt<T extends Int>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.bitWidth === other.bitWidth &&\n        type.isSigned === other.isSigned\n    );\n}\n\nfunction compareFloat<T extends Float>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.precision === other.precision\n    );\n}\n\nfunction compareFixedSizeBinary<T extends FixedSizeBinary>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.byteWidth === other.byteWidth\n    );\n}\n\nfunction compareDate<T extends Date_>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.unit === other.unit\n    );\n}\n\nfunction compareTimestamp<T extends Timestamp>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.unit === other.unit &&\n        type.timezone === other.timezone\n    );\n}\n\nfunction compareTime<T extends Time>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.unit === other.unit &&\n        type.bitWidth === other.bitWidth\n    );\n}\n\nfunction compareList<T extends List>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.children.length === other.children.length &&\n        instance.compareFields(type.children, other.children)\n    );\n}\n\nfunction compareStruct<T extends Struct>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.children.length === other.children.length &&\n        instance.compareFields(type.children, other.children)\n    );\n}\n\nfunction compareUnion<T extends Union>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.mode === other.mode &&\n        type.typeIds.every((x, i) => x === other.typeIds[i]) &&\n        instance.compareFields(type.children, other.children)\n    );\n}\n\nfunction compareDictionary<T extends Dictionary>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.id === other.id &&\n        type.isOrdered === other.isOrdered &&\n        instance.visit(<any> type.indices, other.indices) &&\n        instance.visit(type.dictionary, other.dictionary)\n    );\n}\n\nfunction compareInterval<T extends Interval>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.unit === other.unit\n    );\n}\n\nfunction compareFixedSizeList<T extends FixedSizeList>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.listSize === other.listSize &&\n        type.children.length === other.children.length &&\n        instance.compareFields(type.children, other.children)\n    );\n}\n\nfunction compareMap<T extends Map_>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.keysSorted === other.keysSorted &&\n        type.children.length === other.children.length &&\n        instance.compareFields(type.children, other.children)\n    );\n}\n\nTypeComparator.prototype.visitNull                 =             compareAny;\nTypeComparator.prototype.visitBool                 =             compareAny;\nTypeComparator.prototype.visitInt                  =             compareInt;\nTypeComparator.prototype.visitInt8                 =             compareInt;\nTypeComparator.prototype.visitInt16                =             compareInt;\nTypeComparator.prototype.visitInt32                =             compareInt;\nTypeComparator.prototype.visitInt64                =             compareInt;\nTypeComparator.prototype.visitUint8                =             compareInt;\nTypeComparator.prototype.visitUint16               =             compareInt;\nTypeComparator.prototype.visitUint32               =             compareInt;\nTypeComparator.prototype.visitUint64               =             compareInt;\nTypeComparator.prototype.visitFloat                =           compareFloat;\nTypeComparator.prototype.visitFloat16              =           compareFloat;\nTypeComparator.prototype.visitFloat32              =           compareFloat;\nTypeComparator.prototype.visitFloat64              =           compareFloat;\nTypeComparator.prototype.visitUtf8                 =             compareAny;\nTypeComparator.prototype.visitBinary               =             compareAny;\nTypeComparator.prototype.visitFixedSizeBinary      = compareFixedSizeBinary;\nTypeComparator.prototype.visitDate                 =            compareDate;\nTypeComparator.prototype.visitDateDay              =            compareDate;\nTypeComparator.prototype.visitDateMillisecond      =            compareDate;\nTypeComparator.prototype.visitTimestamp            =       compareTimestamp;\nTypeComparator.prototype.visitTimestampSecond      =       compareTimestamp;\nTypeComparator.prototype.visitTimestampMillisecond =       compareTimestamp;\nTypeComparator.prototype.visitTimestampMicrosecond =       compareTimestamp;\nTypeComparator.prototype.visitTimestampNanosecond  =       compareTimestamp;\nTypeComparator.prototype.visitTime                 =            compareTime;\nTypeComparator.prototype.visitTimeSecond           =            compareTime;\nTypeComparator.prototype.visitTimeMillisecond      =            compareTime;\nTypeComparator.prototype.visitTimeMicrosecond      =            compareTime;\nTypeComparator.prototype.visitTimeNanosecond       =            compareTime;\nTypeComparator.prototype.visitDecimal              =             compareAny;\nTypeComparator.prototype.visitList                 =            compareList;\nTypeComparator.prototype.visitStruct               =          compareStruct;\nTypeComparator.prototype.visitUnion                =           compareUnion;\nTypeComparator.prototype.visitDenseUnion           =           compareUnion;\nTypeComparator.prototype.visitSparseUnion          =           compareUnion;\nTypeComparator.prototype.visitDictionary           =      compareDictionary;\nTypeComparator.prototype.visitInterval             =        compareInterval;\nTypeComparator.prototype.visitIntervalDayTime      =        compareInterval;\nTypeComparator.prototype.visitIntervalYearMonth    =        compareInterval;\nTypeComparator.prototype.visitFixedSizeList        =   compareFixedSizeList;\nTypeComparator.prototype.visitMap                  =             compareMap;\n\n/** @ignore */\nexport const instance = new TypeComparator();\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/* tslint:disable:class-name */\n\nimport { Field } from './schema';\nimport { flatbuffers } from 'flatbuffers';\nimport { TypedArrayConstructor } from './interfaces';\nimport { VectorType as V, TypeToDataType } from './interfaces';\nimport { instance as comparer } from './visitor/typecomparator';\n\nimport Long = flatbuffers.Long;\nimport {\n    Type,\n    Precision, UnionMode,\n    DateUnit, TimeUnit, IntervalUnit\n} from './enum';\n\n/** @ignore */\nexport type TimeBitWidth = 32 | 64;\n/** @ignore */\nexport type IntBitWidth = 8 | 16 | 32 | 64;\n/** @ignore */\nexport type IsSigned = { 'true': true; 'false': false };\n/** @ignore */\nexport type RowLike<T extends { [key: string]: DataType }> =\n      ( Iterable<[string, T[keyof T]['TValue'] | null]> )\n    & { [P in keyof T]: T[P]['TValue'] | null }\n    & { get<K extends keyof T>(key: K): T[K]['TValue'] | null; }\n    & { set<K extends keyof T>(key: K, val: T[K]['TValue'] | null): void; }\n    ;\n\n/** @ignore */\nexport type MapLike<K extends DataType = any, V extends DataType = any> =\n      { [P in K['TValue']]: V['TValue'] | null }\n    & ( Map<K['TValue'], V['TValue'] | null> )\n    ;\n\nexport interface DataType<TType extends Type = Type, TChildren extends { [key: string]: DataType } = any> {\n    readonly TType: TType;\n    readonly TArray: any;\n    readonly TValue: any;\n    readonly ArrayType: any;\n    readonly children: Field<TChildren[keyof TChildren]>[];\n}\n\n/**\n * An abstract base class for classes that encapsulate metadata about each of\n * the logical types that Arrow can represent.\n */\nexport abstract class DataType<TType extends Type = Type, TChildren extends { [key: string]: DataType } = any> {\n\n    // @ts-ignore\n    public [Symbol.toStringTag]: string;\n\n    /** @nocollapse */ static            isNull (x: any): x is Null            { return x && x.typeId === Type.Null;            }\n    /** @nocollapse */ static             isInt (x: any): x is Int_            { return x && x.typeId === Type.Int;             }\n    /** @nocollapse */ static           isFloat (x: any): x is Float           { return x && x.typeId === Type.Float;           }\n    /** @nocollapse */ static          isBinary (x: any): x is Binary          { return x && x.typeId === Type.Binary;          }\n    /** @nocollapse */ static            isUtf8 (x: any): x is Utf8            { return x && x.typeId === Type.Utf8;            }\n    /** @nocollapse */ static            isBool (x: any): x is Bool            { return x && x.typeId === Type.Bool;            }\n    /** @nocollapse */ static         isDecimal (x: any): x is Decimal         { return x && x.typeId === Type.Decimal;         }\n    /** @nocollapse */ static            isDate (x: any): x is Date_           { return x && x.typeId === Type.Date;            }\n    /** @nocollapse */ static            isTime (x: any): x is Time_           { return x && x.typeId === Type.Time;            }\n    /** @nocollapse */ static       isTimestamp (x: any): x is Timestamp_      { return x && x.typeId === Type.Timestamp;       }\n    /** @nocollapse */ static        isInterval (x: any): x is Interval_       { return x && x.typeId === Type.Interval;        }\n    /** @nocollapse */ static            isList (x: any): x is List            { return x && x.typeId === Type.List;            }\n    /** @nocollapse */ static          isStruct (x: any): x is Struct          { return x && x.typeId === Type.Struct;          }\n    /** @nocollapse */ static           isUnion (x: any): x is Union_          { return x && x.typeId === Type.Union;           }\n    /** @nocollapse */ static isFixedSizeBinary (x: any): x is FixedSizeBinary { return x && x.typeId === Type.FixedSizeBinary; }\n    /** @nocollapse */ static   isFixedSizeList (x: any): x is FixedSizeList   { return x && x.typeId === Type.FixedSizeList;   }\n    /** @nocollapse */ static             isMap (x: any): x is Map_            { return x && x.typeId === Type.Map;             }\n    /** @nocollapse */ static      isDictionary (x: any): x is Dictionary      { return x && x.typeId === Type.Dictionary;      }\n\n    public get typeId(): TType { return <any> Type.NONE; }\n    public compareTo(other: DataType): other is TypeToDataType<TType> {\n        return comparer.visit(this, other);\n    }\n\n    protected static [Symbol.toStringTag] = ((proto: DataType) => {\n        (<any> proto).children = null;\n        (<any> proto).ArrayType = Array;\n        return proto[Symbol.toStringTag] = 'DataType';\n    })(DataType.prototype);\n}\n\n/** @ignore */\nexport interface Null extends DataType<Type.Null> { TArray: void; TValue: null; }\n/** @ignore */\nexport class Null extends DataType<Type.Null> {\n    public toString() { return `Null`; }\n    public get typeId() { return Type.Null as Type.Null; }\n    protected static [Symbol.toStringTag] = ((proto: Null) => {\n        return proto[Symbol.toStringTag] = 'Null';\n    })(Null.prototype);\n}\n\n/** @ignore */\ntype Ints = Type.Int | Type.Int8 | Type.Int16 | Type.Int32 | Type.Int64 | Type.Uint8 | Type.Uint16 | Type.Uint32 | Type.Uint64;\n/** @ignore */\ntype IType = {\n    [Type.Int   ]: { bitWidth: IntBitWidth; isSigned: true | false; TArray: IntArray;    TValue: number | bigint | Int32Array | Uint32Array; };\n    [Type.Int8  ]: { bitWidth:           8; isSigned: true;         TArray: Int8Array;   TValue: number; };\n    [Type.Int16 ]: { bitWidth:          16; isSigned: true;         TArray: Int16Array;  TValue: number; };\n    [Type.Int32 ]: { bitWidth:          32; isSigned: true;         TArray: Int32Array;  TValue: number; };\n    [Type.Int64 ]: { bitWidth:          64; isSigned: true;         TArray: Int32Array;  TValue: bigint | Int32Array | Uint32Array; };\n    [Type.Uint8 ]: { bitWidth:           8; isSigned: false;        TArray: Uint8Array;  TValue: number; };\n    [Type.Uint16]: { bitWidth:          16; isSigned: false;        TArray: Uint16Array; TValue: number; };\n    [Type.Uint32]: { bitWidth:          32; isSigned: false;        TArray: Uint32Array; TValue: number; };\n    [Type.Uint64]: { bitWidth:          64; isSigned: false;        TArray: Uint32Array; TValue: bigint | Int32Array | Uint32Array; };\n};\n\n/** @ignore */\ninterface Int_<T extends Ints = Ints> extends DataType<T> { TArray: IType[T]['TArray']; TValue: IType[T]['TValue']; }\n/** @ignore */\nclass Int_<T extends Ints = Ints> extends DataType<T> {\n    constructor(public readonly isSigned: IType[T]['isSigned'],\n                public readonly bitWidth: IType[T]['bitWidth']) {\n        super();\n    }\n    public get typeId() { return Type.Int as T; }\n    public get ArrayType(): TypedArrayConstructor<IType[T]['TArray']> {\n        switch (this.bitWidth) {\n            case  8: return this.isSigned ?  Int8Array :  Uint8Array;\n            case 16: return this.isSigned ? Int16Array : Uint16Array;\n            case 32: return this.isSigned ? Int32Array : Uint32Array;\n            case 64: return this.isSigned ? Int32Array : Uint32Array;\n        }\n        throw new Error(`Unrecognized ${this[Symbol.toStringTag]} type`);\n    }\n    public toString() { return `${this.isSigned ? `I` : `Ui`}nt${this.bitWidth}`; }\n    protected static [Symbol.toStringTag] = ((proto: Int_) => {\n        (<any> proto).isSigned = null;\n        (<any> proto).bitWidth = null;\n        return proto[Symbol.toStringTag] = 'Int';\n    })(Int_.prototype);\n}\n\nexport { Int_ as Int };\n\n/** @ignore */\nexport class Int8 extends Int_<Type.Int8> { constructor() { super(true, 8); } }\n/** @ignore */\nexport class Int16 extends Int_<Type.Int16> { constructor() { super(true, 16); } }\n/** @ignore */\nexport class Int32 extends Int_<Type.Int32> { constructor() { super(true, 32); } }\n/** @ignore */\nexport class Int64 extends Int_<Type.Int64> { constructor() { super(true, 64); } }\n/** @ignore */\nexport class Uint8 extends Int_<Type.Uint8> { constructor() { super(false, 8); } }\n/** @ignore */\nexport class Uint16 extends Int_<Type.Uint16> { constructor() { super(false, 16); } }\n/** @ignore */\nexport class Uint32 extends Int_<Type.Uint32> { constructor() { super(false, 32); } }\n/** @ignore */\nexport class Uint64 extends Int_<Type.Uint64> { constructor() { super(false, 64); } }\n\nObject.defineProperty(Int8.prototype, 'ArrayType', { value: Int8Array });\nObject.defineProperty(Int16.prototype, 'ArrayType', { value: Int16Array });\nObject.defineProperty(Int32.prototype, 'ArrayType', { value: Int32Array });\nObject.defineProperty(Int64.prototype, 'ArrayType', { value: Int32Array });\nObject.defineProperty(Uint8.prototype, 'ArrayType', { value: Uint8Array });\nObject.defineProperty(Uint16.prototype, 'ArrayType', { value: Uint16Array });\nObject.defineProperty(Uint32.prototype, 'ArrayType', { value: Uint32Array });\nObject.defineProperty(Uint64.prototype, 'ArrayType', { value: Uint32Array });\n\n/** @ignore */\ntype Floats = Type.Float | Type.Float16 | Type.Float32 | Type.Float64;\n/** @ignore */\ntype FType = {\n    [Type.Float  ]: { precision: Precision;        TArray: FloatArray;    TValue: number; };\n    [Type.Float16]: { precision: Precision.HALF;   TArray: Uint16Array;   TValue: number; };\n    [Type.Float32]: { precision: Precision.SINGLE; TArray: Float32Array;  TValue: number; };\n    [Type.Float64]: { precision: Precision.DOUBLE; TArray: Float64Array;  TValue: number; };\n};\n\n/** @ignore */\nexport interface Float<T extends Floats = Floats> extends DataType<T> { TArray: FType[T]['TArray']; TValue: number; }\n/** @ignore */\nexport class Float<T extends Floats = Floats> extends DataType<T> {\n    constructor(public readonly precision: Precision) {\n        super();\n    }\n    public get typeId() { return Type.Float as T; }\n    public get ArrayType(): TypedArrayConstructor<FType[T]['TArray']> {\n        switch (this.precision) {\n            case Precision.HALF: return Uint16Array;\n            case Precision.SINGLE: return Float32Array;\n            case Precision.DOUBLE: return Float64Array;\n        }\n        throw new Error(`Unrecognized ${this[Symbol.toStringTag]} type`);\n    }\n    public toString() { return `Float${(this.precision << 5) || 16}`; }\n    protected static [Symbol.toStringTag] = ((proto: Float) => {\n        (<any> proto).precision = null;\n        return proto[Symbol.toStringTag] = 'Float';\n    })(Float.prototype);\n}\n\n/** @ignore */\nexport class Float16 extends Float<Type.Float16> { constructor() { super(Precision.HALF); } }\n/** @ignore */\nexport class Float32 extends Float<Type.Float32> { constructor() { super(Precision.SINGLE); } }\n/** @ignore */\nexport class Float64 extends Float<Type.Float64> { constructor() { super(Precision.DOUBLE); } }\n\nObject.defineProperty(Float16.prototype, 'ArrayType', { value: Uint16Array });\nObject.defineProperty(Float32.prototype, 'ArrayType', { value: Float32Array });\nObject.defineProperty(Float64.prototype, 'ArrayType', { value: Float64Array });\n\n/** @ignore */\nexport interface Binary extends DataType<Type.Binary> { TArray: Uint8Array; TValue: Uint8Array; ArrayType: TypedArrayConstructor<Uint8Array>; }\n/** @ignore */\nexport class Binary extends DataType<Type.Binary> {\n    constructor() {\n        super();\n    }\n    public get typeId() { return Type.Binary as Type.Binary; }\n    public toString() { return `Binary`; }\n    protected static [Symbol.toStringTag] = ((proto: Binary) => {\n        (<any> proto).ArrayType = Uint8Array;\n        return proto[Symbol.toStringTag] = 'Binary';\n    })(Binary.prototype);\n}\n\n/** @ignore */\nexport interface Utf8 extends DataType<Type.Utf8> { TArray: Uint8Array; TValue: string; ArrayType: TypedArrayConstructor<Uint8Array>; }\n/** @ignore */\nexport class Utf8 extends DataType<Type.Utf8> {\n    constructor() {\n        super();\n    }\n    public get typeId() { return Type.Utf8 as Type.Utf8; }\n    public toString() { return `Utf8`; }\n    protected static [Symbol.toStringTag] = ((proto: Utf8) => {\n        (<any> proto).ArrayType = Uint8Array;\n        return proto[Symbol.toStringTag] = 'Utf8';\n    })(Utf8.prototype);\n}\n\n/** @ignore */\nexport interface Bool extends DataType<Type.Bool> { TArray: Uint8Array; TValue: boolean; ArrayType: TypedArrayConstructor<Uint8Array>; }\n/** @ignore */\nexport class Bool extends DataType<Type.Bool> {\n    constructor() {\n        super();\n    }\n    public get typeId() { return Type.Bool as Type.Bool; }\n    public toString() { return `Bool`; }\n    protected static [Symbol.toStringTag] = ((proto: Bool) => {\n        (<any> proto).ArrayType = Uint8Array;\n        return proto[Symbol.toStringTag] = 'Bool';\n    })(Bool.prototype);\n}\n\n/** @ignore */\nexport interface Decimal extends DataType<Type.Decimal> { TArray: Uint32Array; TValue: Uint32Array; ArrayType: TypedArrayConstructor<Uint32Array>; }\n/** @ignore */\nexport class Decimal extends DataType<Type.Decimal> {\n    constructor(public readonly scale: number,\n                public readonly precision: number) {\n        super();\n    }\n    public get typeId() { return Type.Decimal as Type.Decimal; }\n    public toString() { return `Decimal[${this.precision}e${this.scale > 0 ? `+` : ``}${this.scale}]`; }\n    protected static [Symbol.toStringTag] = ((proto: Decimal) => {\n        (<any> proto).scale = null;\n        (<any> proto).precision = null;\n        (<any> proto).ArrayType = Uint32Array;\n        return proto[Symbol.toStringTag] = 'Decimal';\n    })(Decimal.prototype);\n}\n\n/** @ignore */\nexport type Dates = Type.Date | Type.DateDay | Type.DateMillisecond;\n/** @ignore */\nexport interface Date_<T extends Dates = Dates> extends DataType<T> { TArray: Int32Array; TValue: Date; ArrayType: TypedArrayConstructor<Int32Array>; }\n/** @ignore */\nexport class Date_<T extends Dates = Dates> extends DataType<T> {\n    constructor(public readonly unit: DateUnit) {\n        super();\n    }\n    public get typeId() { return Type.Date as T; }\n    public toString() { return `Date${(this.unit + 1) * 32}<${DateUnit[this.unit]}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Date_) => {\n        (<any> proto).unit = null;\n        (<any> proto).ArrayType = Int32Array;\n        return proto[Symbol.toStringTag] = 'Date';\n    })(Date_.prototype);\n}\n\n/** @ignore */\nexport class DateDay extends Date_<Type.DateDay> { constructor() { super(DateUnit.DAY); } }\n/** @ignore */\nexport class DateMillisecond extends Date_<Type.DateMillisecond> { constructor() { super(DateUnit.MILLISECOND); } }\n\n/** @ignore */\ntype Times = Type.Time | Type.TimeSecond | Type.TimeMillisecond | Type.TimeMicrosecond | Type.TimeNanosecond;\n/** @ignore */\ntype TimesType = {\n    [Type.Time           ]: { unit: TimeUnit;             TValue: number | Int32Array };\n    [Type.TimeSecond     ]: { unit: TimeUnit.SECOND;      TValue: number;             };\n    [Type.TimeMillisecond]: { unit: TimeUnit.MILLISECOND; TValue: number;             };\n    [Type.TimeMicrosecond]: { unit: TimeUnit.MICROSECOND; TValue: Int32Array;         };\n    [Type.TimeNanosecond ]: { unit: TimeUnit.NANOSECOND;  TValue: Int32Array;         };\n};\n\n/** @ignore */\ninterface Time_<T extends Times = Times> extends DataType<T> { TArray: Int32Array; TValue: TimesType[T]['TValue']; ArrayType: TypedArrayConstructor<Int32Array>; }\n/** @ignore */\nclass Time_<T extends Times = Times> extends DataType<T> {\n    constructor(public readonly unit: TimesType[T]['unit'],\n                public readonly bitWidth: TimeBitWidth) {\n        super();\n    }\n    public get typeId() { return Type.Time as T; }\n    public toString() { return `Time${this.bitWidth}<${TimeUnit[this.unit]}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Time_) => {\n        (<any> proto).unit = null;\n        (<any> proto).bitWidth = null;\n        (<any> proto).ArrayType = Int32Array;\n        return proto[Symbol.toStringTag] = 'Time';\n    })(Time_.prototype);\n}\n\nexport { Time_ as Time };\n\n/** @ignore */\nexport class TimeSecond extends Time_<Type.TimeSecond> { constructor() { super(TimeUnit.SECOND, 32); } }\n/** @ignore */\nexport class TimeMillisecond extends Time_<Type.TimeMillisecond> { constructor() { super(TimeUnit.MILLISECOND, 32); } }\n/** @ignore */\nexport class TimeMicrosecond extends Time_<Type.TimeMicrosecond> { constructor() { super(TimeUnit.MICROSECOND, 64); } }\n/** @ignore */\nexport class TimeNanosecond extends Time_<Type.TimeNanosecond> { constructor() { super(TimeUnit.NANOSECOND, 64); } }\n\n/** @ignore */\ntype Timestamps = Type.Timestamp | Type.TimestampSecond | Type.TimestampMillisecond | Type.TimestampMicrosecond | Type.TimestampNanosecond;\n/** @ignore */\ninterface Timestamp_<T extends Timestamps = Timestamps> extends DataType<T> { TArray: Int32Array; TValue: number; ArrayType: TypedArrayConstructor<Int32Array>; }\n/** @ignore */\nclass Timestamp_<T extends Timestamps = Timestamps> extends DataType<T> {\n    constructor(public readonly unit: TimeUnit,\n                public readonly timezone?: string | null) {\n        super();\n    }\n    public get typeId() { return Type.Timestamp as T; }\n    public toString() { return `Timestamp<${TimeUnit[this.unit]}${this.timezone ? `, ${this.timezone}` : ``}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Timestamp_) => {\n        (<any> proto).unit = null;\n        (<any> proto).timezone = null;\n        (<any> proto).ArrayType = Int32Array;\n        return proto[Symbol.toStringTag] = 'Timestamp';\n    })(Timestamp_.prototype);\n}\n\nexport { Timestamp_ as Timestamp };\n\n/** @ignore */\nexport class TimestampSecond extends Timestamp_<Type.TimestampSecond> { constructor(timezone?: string | null) { super(TimeUnit.SECOND, timezone); } }\n/** @ignore */\nexport class TimestampMillisecond extends Timestamp_<Type.TimestampMillisecond> { constructor(timezone?: string | null) { super(TimeUnit.MILLISECOND, timezone); } }\n/** @ignore */\nexport class TimestampMicrosecond extends Timestamp_<Type.TimestampMicrosecond> { constructor(timezone?: string | null) { super(TimeUnit.MICROSECOND, timezone); } }\n/** @ignore */\nexport class TimestampNanosecond extends Timestamp_<Type.TimestampNanosecond> { constructor(timezone?: string | null) { super(TimeUnit.NANOSECOND, timezone); } }\n\n/** @ignore */\ntype Intervals = Type.Interval | Type.IntervalDayTime | Type.IntervalYearMonth;\n/** @ignore */\ninterface Interval_<T extends Intervals = Intervals> extends DataType<T> { TArray: Int32Array; TValue: Int32Array; ArrayType: TypedArrayConstructor<Int32Array>; }\n/** @ignore */\nclass Interval_<T extends Intervals = Intervals> extends DataType<T> {\n    constructor(public readonly unit: IntervalUnit) {\n        super();\n    }\n    public get typeId() { return Type.Interval as T; }\n    public toString() { return `Interval<${IntervalUnit[this.unit]}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Interval_) => {\n        (<any> proto).unit = null;\n        (<any> proto).ArrayType = Int32Array;\n        return proto[Symbol.toStringTag] = 'Interval';\n    })(Interval_.prototype);\n}\n\nexport { Interval_ as Interval };\n\n/** @ignore */\nexport class IntervalDayTime extends Interval_<Type.IntervalDayTime> { constructor() { super(IntervalUnit.DAY_TIME); } }\n/** @ignore */\nexport class IntervalYearMonth extends Interval_<Type.IntervalYearMonth> { constructor() { super(IntervalUnit.YEAR_MONTH); } }\n\n/** @ignore */\nexport interface List<T extends DataType = any> extends DataType<Type.List, { [0]: T }>  { TArray: IterableArrayLike<T>; TValue: V<T>; }\n/** @ignore */\nexport class List<T extends DataType = any> extends DataType<Type.List, { [0]: T }> {\n    constructor(child: Field<T>) {\n        super();\n        this.children = [child];\n    }\n    public readonly children: Field<T>[];\n    public get typeId() { return Type.List as Type.List; }\n    public toString() { return `List<${this.valueType}>`; }\n    public get valueType(): T { return this.children[0].type as T; }\n    public get valueField(): Field<T> { return this.children[0] as Field<T>; }\n    public get ArrayType(): T['ArrayType'] { return this.valueType.ArrayType; }\n    protected static [Symbol.toStringTag] = ((proto: List) => {\n        (<any> proto).children = null;\n        return proto[Symbol.toStringTag] = 'List';\n    })(List.prototype);\n}\n\n/** @ignore */\nexport interface Struct<T extends { [key: string]: DataType } = any> extends DataType<Type.Struct> { TArray: IterableArrayLike<RowLike<T>>; TValue: RowLike<T>; dataTypes: T; }\n/** @ignore */\nexport class Struct<T extends { [key: string]: DataType } = any> extends DataType<Type.Struct, T> {\n    public readonly children: Field<T[keyof T]>[];\n    constructor(children: Field<T[keyof T]>[]) {\n        super();\n        this.children = children;\n    }\n    public get typeId() { return Type.Struct as Type.Struct; }\n    public toString() { return `Struct<{${this.children.map((f) => `${f.name}:${f.type}`).join(`, `)}}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Struct) => {\n        (<any> proto).children = null;\n        return proto[Symbol.toStringTag] = 'Struct';\n    })(Struct.prototype);\n}\n\n/** @ignore */\ntype Unions = Type.Union | Type.DenseUnion | Type.SparseUnion;\n/** @ignore */\ninterface Union_<T extends Unions = Unions> extends DataType<T> { TArray: Int8Array; TValue: any; ArrayType: TypedArrayConstructor<Int8Array>; }\n/** @ignore */\nclass Union_<T extends Unions = Unions> extends DataType<T> {\n    public readonly mode: UnionMode;\n    public readonly typeIds: Int32Array;\n    public readonly children: Field<any>[];\n    public readonly typeIdToChildIndex: { [key: number]: number };\n    constructor(mode: UnionMode,\n                typeIds: number[] | Int32Array,\n                children: Field<any>[]) {\n        super();\n        this.mode = mode;\n        this.children = children;\n        this.typeIds = typeIds = Int32Array.from(typeIds);\n        this.typeIdToChildIndex = typeIds.reduce((typeIdToChildIndex, typeId, idx) => {\n            return (typeIdToChildIndex[typeId] = idx) && typeIdToChildIndex || typeIdToChildIndex;\n        }, Object.create(null) as { [key: number]: number });\n    }\n    public get typeId() { return Type.Union as T; }\n    public toString() { return `${this[Symbol.toStringTag]}<${\n        this.children.map((x) => `${x.type}`).join(` | `)\n    }>`; }\n    protected static [Symbol.toStringTag] = ((proto: Union_) => {\n        (<any> proto).mode = null;\n        (<any> proto).typeIds = null;\n        (<any> proto).children = null;\n        (<any> proto).typeIdToChildIndex = null;\n        (<any> proto).ArrayType = Int8Array;\n        return proto[Symbol.toStringTag] = 'Union';\n    })(Union_.prototype);\n}\n\nexport { Union_ as Union };\n\n/** @ignore */\nexport class DenseUnion extends Union_<Type.DenseUnion> {\n    constructor(typeIds: number[] | Int32Array, children: Field[]) {\n        super(UnionMode.Dense, typeIds, children);\n    }\n}\n\n/** @ignore */\nexport class SparseUnion extends Union_<Type.SparseUnion> {\n    constructor(typeIds: number[] | Int32Array, children: Field[]) {\n        super(UnionMode.Sparse, typeIds, children);\n    }\n}\n\n/** @ignore */\nexport interface FixedSizeBinary extends DataType<Type.FixedSizeBinary> { TArray: Uint8Array; TValue: Uint8Array; ArrayType: TypedArrayConstructor<Uint8Array>; }\n/** @ignore */\nexport class FixedSizeBinary extends DataType<Type.FixedSizeBinary> {\n    constructor(public readonly byteWidth: number) {\n        super();\n    }\n    public get typeId() { return Type.FixedSizeBinary as Type.FixedSizeBinary; }\n    public toString() { return `FixedSizeBinary[${this.byteWidth}]`; }\n    protected static [Symbol.toStringTag] = ((proto: FixedSizeBinary) => {\n        (<any> proto).byteWidth = null;\n        (<any> proto).ArrayType = Uint8Array;\n        return proto[Symbol.toStringTag] = 'FixedSizeBinary';\n    })(FixedSizeBinary.prototype);\n}\n\n/** @ignore */\nexport interface FixedSizeList<T extends DataType = any> extends DataType<Type.FixedSizeList> { TArray: IterableArrayLike<T['TArray']>; TValue: V<T>; }\n/** @ignore */\nexport class FixedSizeList<T extends DataType = any> extends DataType<Type.FixedSizeList, { [0]: T }> {\n    public readonly children: Field<T>[];\n    constructor(public readonly listSize: number, child: Field<T>) {\n        super();\n        this.children = [child];\n    }\n    public get typeId() { return Type.FixedSizeList as Type.FixedSizeList; }\n    public get valueType(): T { return this.children[0].type as T; }\n    public get valueField(): Field<T> { return this.children[0] as Field<T>; }\n    public get ArrayType(): T['ArrayType'] { return this.valueType.ArrayType; }\n    public toString() { return `FixedSizeList[${this.listSize}]<${this.valueType}>`; }\n    protected static [Symbol.toStringTag] = ((proto: FixedSizeList) => {\n        (<any> proto).children = null;\n        (<any> proto).listSize = null;\n        return proto[Symbol.toStringTag] = 'FixedSizeList';\n    })(FixedSizeList.prototype);\n}\n\n/** @ignore */\nexport interface Map_<TKey extends DataType = any, TValue extends DataType = any> extends DataType<Type.Map> {\n    TArray: IterableArrayLike<Map<TKey['TValue'], TValue['TValue'] | null>>;\n    TChild: Struct<{ key: TKey, value: TValue }>;\n    TValue: MapLike<TKey, TValue>;\n}\n\n/** @ignore */\nexport class Map_<TKey extends DataType = any, TValue extends DataType = any> extends DataType<Type.Map> {\n    constructor(child: Field<Struct<{ key: TKey, value: TValue }>>, keysSorted = false) {\n        super();\n        this.children = [child];\n        this.keysSorted = keysSorted;\n    }\n    public readonly keysSorted: boolean;\n    public readonly children: Field<Struct<{ key: TKey, value: TValue }>>[];\n    public get typeId() { return Type.Map as Type.Map; }\n    public get keyType(): TKey { return this.children[0].type.children[0].type as TKey; }\n    public get valueType(): TValue { return this.children[0].type.children[1].type as TValue; }\n    public toString() { return `Map<{${this.children[0].type.children.map((f) => `${f.name}:${f.type}`).join(`, `)}}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Map_) => {\n        (<any> proto).children = null;\n        (<any> proto).keysSorted = null;\n        return proto[Symbol.toStringTag] = 'Map_';\n    })(Map_.prototype);\n}\n\n/** @ignore */\nconst getId = ((atomicDictionaryId) => () => ++atomicDictionaryId)(-1);\n\n/** @ignore */\nexport type TKeys = Int8 | Int16 | Int32 | Uint8 | Uint16 | Uint32;\n\n/** @ignore */\nexport interface Dictionary<T extends DataType = any, TKey extends TKeys = TKeys> extends DataType<Type.Dictionary> { TArray: TKey['TArray']; TValue: T['TValue']; }\n/** @ignore */\nexport class Dictionary<T extends DataType = any, TKey extends TKeys = TKeys> extends DataType<Type.Dictionary> {\n    public readonly id: number;\n    public readonly indices: TKey;\n    public readonly dictionary: T;\n    public readonly isOrdered: boolean;\n    constructor(dictionary: T, indices: TKey, id?: Long | number | null, isOrdered?: boolean | null) {\n        super();\n        this.indices = indices;\n        this.dictionary = dictionary;\n        this.isOrdered = isOrdered || false;\n        this.id = id == null ? getId() : typeof id === 'number' ? id : id.low;\n    }\n    public get typeId() { return Type.Dictionary as Type.Dictionary; }\n    public get children() { return this.dictionary.children; }\n    public get valueType(): T { return this.dictionary as T; }\n    public get ArrayType(): T['ArrayType'] { return this.dictionary.ArrayType; }\n    public toString() { return `Dictionary<${this.indices}, ${this.dictionary}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Dictionary) => {\n        (<any> proto).id = null;\n        (<any> proto).indices = null;\n        (<any> proto).isOrdered = null;\n        (<any> proto).dictionary = null;\n        return proto[Symbol.toStringTag] = 'Dictionary';\n    })(Dictionary.prototype);\n}\n\n/** @ignore */\nexport interface IterableArrayLike<T = any> extends ArrayLike<T>, Iterable<T> {}\n/** @ignore */\nexport type FloatArray = Uint16Array | Float32Array | Float64Array;\n/** @ignore */\nexport type IntArray = Int8Array | Int16Array | Int32Array | Uint8Array | Uint16Array | Uint32Array;\n\n/** @ignore */\nexport function strideForType(type: DataType) {\n    let t: any = type;\n    switch (type.typeId) {\n        case Type.Decimal: return 4;\n        case Type.Timestamp: return 2;\n        case Type.Date: return 1 + (t as Date_).unit;\n        case Type.Interval: return 1 + (t as Interval_).unit;\n        case Type.Int: return 1 + +((t as Int_).bitWidth > 32);\n        case Type.Time: return 1 + +((t as Time_).bitWidth > 32);\n        case Type.FixedSizeList: return (t as FixedSizeList).listSize;\n        case Type.FixedSizeBinary: return (t as FixedSizeBinary).byteWidth;\n        default: return 1;\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from './vector';\nimport { truncateBitmap } from './util/bit';\nimport { popcnt_bit_range } from './util/bit';\nimport { BufferType, UnionMode, Type } from './enum';\nimport { DataType, SparseUnion, DenseUnion, strideForType } from './type';\nimport { toArrayBufferView, toUint8Array, toInt32Array } from './util/buffer';\nimport {\n    Dictionary,\n    Null, Int, Float,\n    Binary, Bool, Utf8, Decimal,\n    Date_, Time, Timestamp, Interval,\n    List, Struct, Union, FixedSizeBinary, FixedSizeList, Map_,\n} from './type';\n\n// When slicing, we do not know the null count of the sliced range without\n// doing some computation. To avoid doing this eagerly, we set the null count\n// to -1 (any negative number will do). When Vector.nullCount is called the\n// first time, the null count will be computed. See ARROW-33\n/** @ignore */ export type kUnknownNullCount = -1;\n/** @ignore */ export const kUnknownNullCount = -1;\n\n/** @ignore */ export type NullBuffer = Uint8Array | null | undefined;\n/** @ignore */ export type TypeIdsBuffer = Int8Array  | ArrayLike<number> | Iterable<number> | undefined;\n/** @ignore */ export type ValueOffsetsBuffer = Int32Array  | ArrayLike<number> | Iterable<number> | undefined;\n/** @ignore */ export type DataBuffer<T extends DataType> = T['TArray'] | ArrayLike<number> | Iterable<number> | undefined;\n\n/** @ignore */\nexport interface Buffers<T extends DataType> {\n      [BufferType.OFFSET]: Int32Array;\n        [BufferType.DATA]: T['TArray'];\n    [BufferType.VALIDITY]: Uint8Array;\n        [BufferType.TYPE]: T['TArray'];\n}\n\n/** @ignore */\nexport interface Data<T extends DataType = DataType> {\n    readonly TType: T['TType'];\n    readonly TArray: T['TArray'];\n    readonly TValue: T['TValue'];\n}\n\n/** @ignore */\nexport class Data<T extends DataType = DataType> {\n\n    public readonly type: T;\n    public readonly length: number;\n    public readonly offset: number;\n    public readonly stride: number;\n    public readonly childData: Data[];\n\n    /**\n     * The dictionary for this Vector, if any. Only used for Dictionary type.\n     */\n    public dictionary?: Vector;\n\n    public readonly values: Buffers<T>[BufferType.DATA];\n    // @ts-ignore\n    public readonly typeIds: Buffers<T>[BufferType.TYPE];\n    // @ts-ignore\n    public readonly nullBitmap: Buffers<T>[BufferType.VALIDITY];\n    // @ts-ignore\n    public readonly valueOffsets: Buffers<T>[BufferType.OFFSET];\n\n    public get typeId(): T['TType'] { return this.type.typeId; }\n    public get ArrayType(): T['ArrayType'] { return this.type.ArrayType; }\n    public get buffers() {\n        return [this.valueOffsets, this.values, this.nullBitmap, this.typeIds] as Buffers<T>;\n    }\n    public get byteLength(): number {\n        let byteLength = 0;\n        let { valueOffsets, values, nullBitmap, typeIds } = this;\n        valueOffsets && (byteLength += valueOffsets.byteLength);\n        values       && (byteLength += values.byteLength);\n        nullBitmap   && (byteLength += nullBitmap.byteLength);\n        typeIds      && (byteLength += typeIds.byteLength);\n        return this.childData.reduce((byteLength, child) => byteLength + child.byteLength, byteLength);\n    }\n\n    protected _nullCount: number | kUnknownNullCount;\n\n    public get nullCount() {\n        let nullCount = this._nullCount;\n        let nullBitmap: Uint8Array | undefined;\n        if (nullCount <= kUnknownNullCount && (nullBitmap = this.nullBitmap)) {\n            this._nullCount = nullCount = this.length - popcnt_bit_range(nullBitmap, this.offset, this.offset + this.length);\n        }\n        return nullCount;\n    }\n\n    constructor(type: T, offset: number, length: number, nullCount?: number, buffers?: Partial<Buffers<T>> | Data<T>, childData?: (Data | Vector)[], dictionary?: Vector) {\n        this.type = type;\n        this.dictionary = dictionary;\n        this.offset = Math.floor(Math.max(offset || 0, 0));\n        this.length = Math.floor(Math.max(length || 0, 0));\n        this._nullCount = Math.floor(Math.max(nullCount || 0, -1));\n        this.childData = (childData || []).map((x) => x instanceof Data ? x : x.data) as Data[];\n        let buffer: Buffers<T>[keyof Buffers<T>];\n        if (buffers instanceof Data) {\n            this.stride = buffers.stride;\n            this.values = buffers.values;\n            this.typeIds = buffers.typeIds;\n            this.nullBitmap = buffers.nullBitmap;\n            this.valueOffsets = buffers.valueOffsets;\n        } else {\n            this.stride = strideForType(type);\n            if (buffers) {\n                (buffer = (buffers as Buffers<T>)[0]) && (this.valueOffsets = buffer);\n                (buffer = (buffers as Buffers<T>)[1]) && (this.values = buffer);\n                (buffer = (buffers as Buffers<T>)[2]) && (this.nullBitmap = buffer);\n                (buffer = (buffers as Buffers<T>)[3]) && (this.typeIds = buffer);\n            }\n        }\n    }\n\n    public clone<R extends DataType>(type: R, offset = this.offset, length = this.length, nullCount = this._nullCount, buffers: Buffers<R> = <any> this, childData: (Data | Vector)[] = this.childData) {\n        return new Data(type, offset, length, nullCount, buffers, childData, this.dictionary);\n    }\n\n    public slice(offset: number, length: number): Data<T> {\n        const { stride, typeId, childData } = this;\n        // +true === 1, +false === 0, so this means\n        // we keep nullCount at 0 if it's already 0,\n        // otherwise set to the invalidated flag -1\n        const nullCount = +(this._nullCount === 0) - 1;\n        const childStride = typeId === 16 /* FixedSizeList */ ? stride : 1;\n        const buffers = this._sliceBuffers(offset, length, stride, typeId);\n        return this.clone<T>(this.type, this.offset + offset, length, nullCount, buffers,\n            // Don't slice children if we have value offsets (the variable-width types)\n            (!childData.length || this.valueOffsets) ? childData : this._sliceChildren(childData, childStride * offset, childStride * length));\n    }\n\n    public _changeLengthAndBackfillNullBitmap(newLength: number): Data<T> {\n        if (this.typeId === Type.Null) {\n            return this.clone(this.type, 0, newLength, 0);\n        }\n        const { length, nullCount } = this;\n        // start initialized with 0s (nulls), then fill from 0 to length with 1s (not null)\n        const bitmap = new Uint8Array(((newLength + 63) & ~63) >> 3).fill(255, 0, length >> 3);\n        // set all the bits in the last byte (up to bit `length - length % 8`) to 1 (not null)\n        bitmap[length >> 3] = (1 << (length - (length & ~7))) - 1;\n        // if we have a nullBitmap, truncate + slice and set it over the pre-filled 1s\n        if (nullCount > 0) {\n            bitmap.set(truncateBitmap(this.offset, length, this.nullBitmap), 0);\n        }\n        const buffers = this.buffers;\n        buffers[BufferType.VALIDITY] = bitmap;\n        return this.clone(this.type, 0, newLength, nullCount + (newLength - length), buffers);\n    }\n\n    protected _sliceBuffers(offset: number, length: number, stride: number, typeId: T['TType']): Buffers<T> {\n        let arr: any, { buffers } = this;\n        // If typeIds exist, slice the typeIds buffer\n        (arr = buffers[BufferType.TYPE]) && (buffers[BufferType.TYPE] = arr.subarray(offset, offset + length));\n        // If offsets exist, only slice the offsets buffer\n        (arr = buffers[BufferType.OFFSET]) && (buffers[BufferType.OFFSET] = arr.subarray(offset, offset + length + 1)) ||\n        // Otherwise if no offsets, slice the data buffer. Don't slice the data vector for Booleans, since the offset goes by bits not bytes\n        (arr = buffers[BufferType.DATA]) && (buffers[BufferType.DATA] = typeId === 6 ? arr : arr.subarray(stride * offset, stride * (offset + length)));\n        return buffers;\n    }\n\n    protected _sliceChildren(childData: Data[], offset: number, length: number): Data[] {\n        return childData.map((child) => child.slice(offset, length));\n    }\n\n    //\n    // Convenience methods for creating Data instances for each of the Arrow Vector types\n    //\n    /** @nocollapse */\n    public static new<T extends DataType>(type: T, offset: number, length: number, nullCount?: number, buffers?: Partial<Buffers<T>> | Data<T>, childData?: (Data | Vector)[], dictionary?: Vector): Data<T> {\n        if (buffers instanceof Data) { buffers = buffers.buffers; } else if (!buffers) { buffers = [] as Partial<Buffers<T>>; }\n        switch (type.typeId) {\n            case Type.Null:            return <unknown> Data.Null(            <unknown> type as Null,            offset, length) as Data<T>;\n            case Type.Int:             return <unknown> Data.Int(             <unknown> type as Int,             offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.Dictionary:      return <unknown> Data.Dictionary(      <unknown> type as Dictionary,      offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || [], dictionary!) as Data<T>;\n            case Type.Float:           return <unknown> Data.Float(           <unknown> type as Float,           offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.Bool:            return <unknown> Data.Bool(            <unknown> type as Bool,            offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.Decimal:         return <unknown> Data.Decimal(         <unknown> type as Decimal,         offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.Date:            return <unknown> Data.Date(            <unknown> type as Date_,           offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.Time:            return <unknown> Data.Time(            <unknown> type as Time,            offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.Timestamp:       return <unknown> Data.Timestamp(       <unknown> type as Timestamp,       offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.Interval:        return <unknown> Data.Interval(        <unknown> type as Interval,        offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.FixedSizeBinary: return <unknown> Data.FixedSizeBinary( <unknown> type as FixedSizeBinary, offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.Binary:          return <unknown> Data.Binary(          <unknown> type as Binary,          offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.OFFSET] || [], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.Utf8:            return <unknown> Data.Utf8(            <unknown> type as Utf8,            offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.OFFSET] || [], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.List:            return <unknown> Data.List(            <unknown> type as List,            offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.OFFSET] || [], (childData || [])[0]) as Data<T>;\n            case Type.FixedSizeList:   return <unknown> Data.FixedSizeList(   <unknown> type as FixedSizeList,   offset, length, nullCount || 0, buffers[BufferType.VALIDITY], (childData || [])[0]) as Data<T>;\n            case Type.Struct:          return <unknown> Data.Struct(          <unknown> type as Struct,          offset, length, nullCount || 0, buffers[BufferType.VALIDITY], childData || []) as Data<T>;\n            case Type.Map:             return <unknown> Data.Map(             <unknown> type as Map_,            offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.OFFSET] || [], (childData || [])[0]) as Data<T>;\n            case Type.Union:           return <unknown> Data.Union(           <unknown> type as Union,           offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.TYPE] || [], buffers[BufferType.OFFSET] || childData, childData) as Data<T>;\n        }\n        throw new Error(`Unrecognized typeId ${type.typeId}`);\n    }\n\n    /** @nocollapse */\n    public static Null<T extends Null>(type: T, offset: number, length: number) {\n        return new Data(type, offset, length, 0);\n    }\n    /** @nocollapse */\n    public static Int<T extends Int>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Dictionary<T extends Dictionary>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>, dictionary: Vector<T['dictionary']>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView<T['TArray']>(type.indices.ArrayType, data), toUint8Array(nullBitmap)], [], dictionary);\n    }\n    /** @nocollapse */\n    public static Float<T extends Float>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Bool<T extends Bool>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Decimal<T extends Decimal>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Date<T extends Date_>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Time<T extends Time>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Timestamp<T extends Timestamp>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Interval<T extends Interval>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static FixedSizeBinary<T extends FixedSizeBinary>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Binary<T extends Binary>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, valueOffsets: ValueOffsetsBuffer, data: Uint8Array) {\n        return new Data(type, offset, length, nullCount, [toInt32Array(valueOffsets), toUint8Array(data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Utf8<T extends Utf8>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, valueOffsets: ValueOffsetsBuffer, data: Uint8Array) {\n        return new Data(type, offset, length, nullCount, [toInt32Array(valueOffsets), toUint8Array(data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static List<T extends List>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, valueOffsets: ValueOffsetsBuffer, child: Data<T['valueType']> | Vector<T['valueType']>) {\n        return new Data(type, offset, length, nullCount, [toInt32Array(valueOffsets), undefined, toUint8Array(nullBitmap)], [child]);\n    }\n    /** @nocollapse */\n    public static FixedSizeList<T extends FixedSizeList>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, child: Data<T['valueType']> | Vector<T['valueType']>) {\n        return new Data(type, offset, length, nullCount, [undefined, undefined, toUint8Array(nullBitmap)], [child]);\n    }\n    /** @nocollapse */\n    public static Struct<T extends Struct>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, children: (Data | Vector)[]) {\n        return new Data(type, offset, length, nullCount, [undefined, undefined, toUint8Array(nullBitmap)], children);\n    }\n    /** @nocollapse */\n    public static Map<T extends Map_>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, valueOffsets: ValueOffsetsBuffer, child: (Data | Vector)) {\n        return new Data(type, offset, length, nullCount, [toInt32Array(valueOffsets), undefined, toUint8Array(nullBitmap)], [child]);\n    }\n    public static Union<T extends SparseUnion>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, typeIds: TypeIdsBuffer, children: (Data | Vector)[], _?: any): Data<T>;\n    public static Union<T extends DenseUnion>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, typeIds: TypeIdsBuffer, valueOffsets: ValueOffsetsBuffer, children: (Data | Vector)[]): Data<T>;\n    public static Union<T extends Union>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, typeIds: TypeIdsBuffer, valueOffsetsOrChildren: ValueOffsetsBuffer | (Data | Vector)[], children?: (Data | Vector)[]): Data<T>;\n    /** @nocollapse */\n    public static Union<T extends Union>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, typeIds: TypeIdsBuffer, valueOffsetsOrChildren: ValueOffsetsBuffer | (Data | Vector)[], children?: (Data | Vector)[]) {\n        const buffers = <unknown> [\n            undefined, undefined,\n            toUint8Array(nullBitmap),\n            toArrayBufferView(type.ArrayType, typeIds)\n        ] as Partial<Buffers<T>>;\n        if (type.mode === UnionMode.Sparse) {\n            return new Data(type, offset, length, nullCount, buffers, valueOffsetsOrChildren as (Data | Vector)[]);\n        }\n        buffers[BufferType.OFFSET] = toInt32Array(<ValueOffsetsBuffer> valueOffsetsOrChildren);\n        return new Data(type, offset, length, nullCount, buffers, children);\n    }\n}\n\n(Data.prototype as any).childData = Object.freeze([]);\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/** @ignore */ const undf = void (0);\n\n/** @ignore */\nexport function valueToString(x: any) {\n    if (x === null) { return 'null'; }\n    if (x === undf) { return 'undefined'; }\n    switch (typeof x) {\n        case 'number': return `${x}`;\n        case 'bigint': return `${x}`;\n        case 'string': return `\"${x}\"`;\n    }\n    // If [Symbol.toPrimitive] is implemented (like in BN)\n    // use it instead of JSON.stringify(). This ensures we\n    // print BigInts, Decimals, and Binary in their native\n    // representation\n    if (typeof x[Symbol.toPrimitive] === 'function') {\n        return x[Symbol.toPrimitive]('string');\n    }\n    return ArrayBuffer.isView(x) ? `[${x}]` : JSON.stringify(x);\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { DataType } from '../type';\nimport { valueToString } from '../util/pretty';\nimport { BigIntAvailable } from '../util/compat';\n\n/**\n * Dynamically compile the null values into an `isValid()` function whose\n * implementation is a switch statement. Microbenchmarks in v8 indicate\n * this approach is 25% faster than using an ES6 Map.\n *\n * @example\n * console.log(createIsValidFunction([null, 'N/A', NaN]));\n * `function (x) {\n *     if (x !== x) return false;\n *     switch (x) {\n *         case null:\n *         case \"N/A\":\n *             return false;\n *     }\n *     return true;\n * }`\n *\n * @ignore\n * @param nullValues\n */\nexport function createIsValidFunction<T extends DataType = any, TNull = any>(nullValues?: ReadonlyArray<TNull>) {\n\n    if (!nullValues || nullValues.length <= 0) {\n        // @ts-ignore\n        return function isValid(value: any) { return true; };\n    }\n\n    let fnBody = '';\n    let noNaNs = nullValues.filter((x) => x === x);\n\n    if (noNaNs.length > 0) {\n        fnBody = `\n    switch (x) {${noNaNs.map((x) => `\n        case ${valueToCase(x)}:`).join('')}\n            return false;\n    }`;\n    }\n\n    // NaN doesn't equal anything including itself, so it doesn't work as a\n    // switch case. Instead we must explicitly check for NaN before the switch.\n    if (nullValues.length !== noNaNs.length) {\n        fnBody = `if (x !== x) return false;\\n${fnBody}`;\n    }\n\n    return new Function(`x`, `${fnBody}\\nreturn true;`) as (value: T['TValue'] | TNull) => boolean;\n}\n\n/** @ignore */\nfunction valueToCase(x: any) {\n    if (typeof x !== 'bigint') {\n        return valueToString(x);\n    } else if (BigIntAvailable) {\n        return `${valueToString(x)}n`;\n    }\n    return `\"${valueToString(x)}\"`;\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { memcpy } from '../util/buffer';\nimport { BigIntAvailable, BigInt64Array, BigUint64Array } from '../util/compat';\nimport {\n    TypedArray, TypedArrayConstructor,\n    BigIntArray, BigIntArrayConstructor\n} from '../interfaces';\n\n/** @ignore */ type DataValue<T> = T extends TypedArray ? number : T extends BigIntArray ? WideValue<T> : T;\n/** @ignore */ type WideValue<T extends BigIntArray> = T extends BigIntArray ? bigint | Int32Array | Uint32Array : never;\n/** @ignore */ type ArrayCtor<T extends TypedArray | BigIntArray> =\n    T extends TypedArray  ? TypedArrayConstructor<T>  :\n    T extends BigIntArray ? BigIntArrayConstructor<T> :\n    any;\n\n/** @ignore */\nconst roundLengthUpToNearest64Bytes = (len: number, BPE: number) => ((((len * BPE) + 63) & ~63) || 64) / BPE;\n/** @ignore */\nconst sliceOrExtendArray = <T extends TypedArray | BigIntArray>(arr: T, len = 0) => (\n    arr.length >= len ? arr.subarray(0, len) : memcpy(new (arr.constructor as any)(len), arr, 0)\n) as T;\n\n/** @ignore */\nexport interface BufferBuilder<T extends TypedArray | BigIntArray = any, TValue = DataValue<T>> {\n    readonly offset: number;\n}\n\n/** @ignore */\nexport class BufferBuilder<T extends TypedArray | BigIntArray = any, TValue = DataValue<T>> {\n\n    constructor(buffer: T, stride = 1) {\n        this.buffer = buffer;\n        this.stride = stride;\n        this.BYTES_PER_ELEMENT = buffer.BYTES_PER_ELEMENT;\n        this.ArrayType = buffer.constructor as ArrayCtor<T>;\n        this._resize(this.length = buffer.length / stride | 0);\n    }\n\n    public buffer: T;\n    public length: number;\n    public readonly stride: number;\n    public readonly ArrayType: ArrayCtor<T>;\n    public readonly BYTES_PER_ELEMENT: number;\n\n    public get byteLength() { return this.length * this.stride * this.BYTES_PER_ELEMENT | 0; }\n    public get reservedLength() { return this.buffer.length / this.stride; }\n    public get reservedByteLength() { return this.buffer.byteLength; }\n\n    // @ts-ignore\n    public set(index: number, value: TValue) { return this; }\n    public append(value: TValue) { return this.set(this.length, value); }\n    public reserve(extra: number) {\n        if (extra > 0) {\n            this.length += extra;\n            const stride = this.stride;\n            const length = this.length * stride;\n            const reserved = this.buffer.length;\n            if (length >= reserved) {\n                this._resize(reserved === 0\n                    ? roundLengthUpToNearest64Bytes(length * 1, this.BYTES_PER_ELEMENT)\n                    : roundLengthUpToNearest64Bytes(length * 2, this.BYTES_PER_ELEMENT)\n                );\n            }\n        }\n        return this;\n    }\n    public flush(length = this.length) {\n        length = roundLengthUpToNearest64Bytes(length * this.stride, this.BYTES_PER_ELEMENT);\n        const array = sliceOrExtendArray<T>(this.buffer, length);\n        this.clear();\n        return array;\n    }\n    public clear() {\n        this.length = 0;\n        this._resize(0);\n        return this;\n    }\n    protected _resize(newLength: number) {\n        return this.buffer = <T> memcpy(new this.ArrayType(newLength), this.buffer);\n    }\n}\n\n(BufferBuilder.prototype as any).offset = 0;\n\n/** @ignore */\nexport class DataBufferBuilder<T extends TypedArray> extends BufferBuilder<T, number> {\n    public last() { return this.get(this.length - 1); }\n    public get(index: number) { return this.buffer[index]; }\n    public set(index: number, value: number) {\n        this.reserve(index - this.length + 1);\n        this.buffer[index * this.stride] = value;\n        return this;\n    }\n}\n\n/** @ignore */\nexport class BitmapBufferBuilder extends DataBufferBuilder<Uint8Array> {\n\n    constructor(data = new Uint8Array(0)) { super(data, 1 / 8); }\n\n    public numValid = 0;\n    public get numInvalid() { return this.length - this.numValid; }\n    public get(idx: number) { return this.buffer[idx >> 3] >> idx % 8 & 1; }\n    public set(idx: number, val: number) {\n        const { buffer } = this.reserve(idx - this.length + 1);\n        const byte = idx >> 3, bit = idx % 8, cur = buffer[byte] >> bit & 1;\n        // If `val` is truthy and the current bit is 0, flip it to 1 and increment `numValid`.\n        // If `val` is falsey and the current bit is 1, flip it to 0 and decrement `numValid`.\n        val ? cur === 0 && ((buffer[byte] |=  (1 << bit)), ++this.numValid)\n            : cur === 1 && ((buffer[byte] &= ~(1 << bit)), --this.numValid);\n        return this;\n    }\n    public clear() {\n        this.numValid = 0;\n        return super.clear();\n    }\n}\n\n/** @ignore */\nexport class OffsetsBufferBuilder extends DataBufferBuilder<Int32Array> {\n    constructor(data = new Int32Array(1)) { super(data, 1); }\n    public append(value: number) {\n        return this.set(this.length - 1, value);\n    }\n    public set(index: number, value: number) {\n        const offset = this.length - 1;\n        const buffer = this.reserve(index - offset + 1).buffer;\n        if (offset < index++) {\n            buffer.fill(buffer[offset], offset, index);\n        }\n        buffer[index] = buffer[index - 1] + value;\n        return this;\n    }\n    public flush(length = this.length - 1) {\n        if (length > this.length) {\n            this.set(length - 1, 0);\n        }\n        return super.flush(length + 1);\n    }\n}\n\n/** @ignore */\nexport class WideBufferBuilder<T extends TypedArray, R extends BigIntArray> extends BufferBuilder<T, DataValue<T>> {\n    // @ts-ignore\n    public buffer64: R;\n    // @ts-ignore\n    protected _ArrayType64: BigIntArrayConstructor<R>;\n    public get ArrayType64() {\n        return this._ArrayType64 || (this._ArrayType64 = <BigIntArrayConstructor<R>> (this.buffer instanceof Int32Array ? BigInt64Array : BigUint64Array));\n    }\n    public set(index: number, value: DataValue<T>) {\n        this.reserve(index - this.length + 1);\n        switch (typeof value) {\n            case 'bigint': this.buffer64[index] = value; break;\n            case 'number': this.buffer[index * this.stride] = value; break;\n            default: this.buffer.set(value as TypedArray, index * this.stride);\n        }\n        return this;\n    }\n    protected _resize(newLength: number) {\n        const data = super._resize(newLength);\n        const length = data.byteLength / (this.BYTES_PER_ELEMENT * this.stride);\n        if (BigIntAvailable) {\n            this.buffer64 = new this.ArrayType64(data.buffer, data.byteOffset, length);\n        }\n        return data;\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from './vector';\nimport { BufferType } from './enum';\nimport { Data, Buffers } from './data';\nimport { createIsValidFunction } from './builder/valid';\nimport { BuilderType as B, VectorType as V} from './interfaces';\nimport { BufferBuilder, BitmapBufferBuilder, DataBufferBuilder, OffsetsBufferBuilder } from './builder/buffer';\nimport {\n    DataType, strideForType,\n    Float, Int, Decimal, FixedSizeBinary,\n    Date_, Time, Timestamp, Interval,\n    Utf8, Binary, List, Map_\n} from './type';\n\n/**\n * A set of options required to create a `Builder` instance for a given `DataType`.\n * @see {@link Builder}\n */\nexport interface BuilderOptions<T extends DataType = any, TNull = any> {\n    type: T;\n    nullValues?: TNull[] | ReadonlyArray<TNull> | null;\n    children?: { [key: string]: BuilderOptions; } | BuilderOptions[];\n}\n\n/**\n * A set of options to create an Iterable or AsyncIterable `Builder` transform function.\n * @see {@link Builder.throughIterable}\n * @see {@link Builder.throughAsyncIterable}\n */\n\nexport interface IterableBuilderOptions<T extends DataType = any, TNull = any> extends BuilderOptions<T, TNull> {\n    highWaterMark?: number;\n    queueingStrategy?: 'bytes' | 'count';\n    dictionaryHashFunction?: (value: any) => string | number;\n    valueToChildTypeId?: (builder: Builder<T, TNull>, value: any, offset: number) => number;\n}\n\n/**\n * An abstract base class for types that construct Arrow Vectors from arbitrary JavaScript values.\n *\n * A `Builder` is responsible for writing arbitrary JavaScript values\n * to ArrayBuffers and/or child Builders according to the Arrow specification\n * for each DataType, creating or resizing the underlying ArrayBuffers as necessary.\n *\n * The `Builder` for each Arrow `DataType` handles converting and appending\n * values for a given `DataType`. The high-level {@link Builder.new `Builder.new()`} convenience\n * method creates the specific `Builder` subclass for the supplied `DataType`.\n *\n * Once created, `Builder` instances support both appending values to the end\n * of the `Builder`, and random-access writes to specific indices\n * (`Builder.prototype.append(value)` is a convenience method for\n * `builder.set(builder.length, value)`). Appending or setting values beyond the\n * Builder's current length may cause the builder to grow its underlying buffers\n * or child Builders (if applicable) to accommodate the new values.\n *\n * After enough values have been written to a `Builder`, `Builder.prototype.flush()`\n * will commit the values to the underlying ArrayBuffers (or child Builders). The\n * internal Builder state will be reset, and an instance of `Data<T>` is returned.\n * Alternatively, `Builder.prototype.toVector()` will flush the `Builder` and return\n * an instance of `Vector<T>` instead.\n *\n * When there are no more values to write, use `Builder.prototype.finish()` to\n * finalize the `Builder`. This does not reset the internal state, so it is\n * necessary to call `Builder.prototype.flush()` or `toVector()` one last time\n * if there are still values queued to be flushed.\n *\n * Note: calling `Builder.prototype.finish()` is required when using a `DictionaryBuilder`,\n * because this is when it flushes the values that have been enqueued in its internal\n * dictionary's `Builder`, and creates the `dictionaryVector` for the `Dictionary` `DataType`.\n *\n * ```ts\n * import { Builder, Utf8 } from 'apache-arrow';\n *\n * const utf8Builder = Builder.new({\n *     type: new Utf8(),\n *     nullValues: [null, 'n/a']\n * });\n *\n * utf8Builder\n *     .append('hello')\n *     .append('n/a')\n *     .append('world')\n *     .append(null);\n *\n * const utf8Vector = utf8Builder.finish().toVector();\n *\n * console.log(utf8Vector.toJSON());\n * // > [\"hello\", null, \"world\", null]\n * ```\n *\n * @typeparam T The `DataType` of this `Builder`.\n * @typeparam TNull The type(s) of values which will be considered null-value sentinels.\n */\nexport abstract class Builder<T extends DataType = any, TNull = any> {\n\n    /**\n     * Create a `Builder` instance based on the `type` property of the supplied `options` object.\n     * @param {BuilderOptions<T, TNull>} options An object with a required `DataType` instance\n     * and other optional parameters to be passed to the `Builder` subclass for the given `type`.\n     *\n     * @typeparam T The `DataType` of the `Builder` to create.\n     * @typeparam TNull The type(s) of values which will be considered null-value sentinels.\n     * @nocollapse\n     */\n    // @ts-ignore\n    public static new<T extends DataType = any, TNull = any>(options: BuilderOptions<T, TNull>): B<T, TNull> {}\n\n    /** @nocollapse */\n    // @ts-ignore\n    public static throughNode<T extends DataType = any, TNull = any>(options: import('./io/node/builder').BuilderDuplexOptions<T, TNull>): import('stream').Duplex {\n        throw new Error(`\"throughNode\" not available in this environment`);\n    }\n    /** @nocollapse */\n    // @ts-ignore\n    public static throughDOM<T extends DataType = any, TNull = any>(options: import('./io/whatwg/builder').BuilderTransformOptions<T, TNull>): import('./io/whatwg/builder').BuilderTransform<T, TNull> {\n        throw new Error(`\"throughDOM\" not available in this environment`);\n    }\n\n    /**\n     * Transform a synchronous `Iterable` of arbitrary JavaScript values into a\n     * sequence of Arrow Vector<T> following the chunking semantics defined in\n     * the supplied `options` argument.\n     *\n     * This function returns a function that accepts an `Iterable` of values to\n     * transform. When called, this function returns an Iterator of `Vector<T>`.\n     *\n     * The resulting `Iterator<Vector<T>>` yields Vectors based on the\n     * `queueingStrategy` and `highWaterMark` specified in the `options` argument.\n     *\n     * * If `queueingStrategy` is `\"count\"` (or omitted), The `Iterator<Vector<T>>`\n     *   will flush the underlying `Builder` (and yield a new `Vector<T>`) once the\n     *   Builder's `length` reaches or exceeds the supplied `highWaterMark`.\n     * * If `queueingStrategy` is `\"bytes\"`, the `Iterator<Vector<T>>` will flush\n     *   the underlying `Builder` (and yield a new `Vector<T>`) once its `byteLength`\n     *   reaches or exceeds the supplied `highWaterMark`.\n     *\n     * @param {IterableBuilderOptions<T, TNull>} options An object of properties which determine the `Builder` to create and the chunking semantics to use.\n     * @returns A function which accepts a JavaScript `Iterable` of values to\n     *          write, and returns an `Iterator` that yields Vectors according\n     *          to the chunking semantics defined in the `options` argument.\n     * @nocollapse\n     */\n    public static throughIterable<T extends DataType = any, TNull = any>(options: IterableBuilderOptions<T, TNull>) {\n        return throughIterable(options);\n    }\n\n    /**\n     * Transform an `AsyncIterable` of arbitrary JavaScript values into a\n     * sequence of Arrow Vector<T> following the chunking semantics defined in\n     * the supplied `options` argument.\n     *\n     * This function returns a function that accepts an `AsyncIterable` of values to\n     * transform. When called, this function returns an AsyncIterator of `Vector<T>`.\n     *\n     * The resulting `AsyncIterator<Vector<T>>` yields Vectors based on the\n     * `queueingStrategy` and `highWaterMark` specified in the `options` argument.\n     *\n     * * If `queueingStrategy` is `\"count\"` (or omitted), The `AsyncIterator<Vector<T>>`\n     *   will flush the underlying `Builder` (and yield a new `Vector<T>`) once the\n     *   Builder's `length` reaches or exceeds the supplied `highWaterMark`.\n     * * If `queueingStrategy` is `\"bytes\"`, the `AsyncIterator<Vector<T>>` will flush\n     *   the underlying `Builder` (and yield a new `Vector<T>`) once its `byteLength`\n     *   reaches or exceeds the supplied `highWaterMark`.\n     *\n     * @param {IterableBuilderOptions<T, TNull>} options An object of properties which determine the `Builder` to create and the chunking semantics to use.\n     * @returns A function which accepts a JavaScript `AsyncIterable` of values\n     *          to write, and returns an `AsyncIterator` that yields Vectors\n     *          according to the chunking semantics defined in the `options`\n     *          argument.\n     * @nocollapse\n     */\n    public static throughAsyncIterable<T extends DataType = any, TNull = any>(options: IterableBuilderOptions<T, TNull>) {\n        return throughAsyncIterable(options);\n    }\n\n    /**\n     * Construct a builder with the given Arrow DataType with optional null values,\n     * which will be interpreted as \"null\" when set or appended to the `Builder`.\n     * @param {{ type: T, nullValues?: any[] }} options A `BuilderOptions` object used to create this `Builder`.\n     */\n    constructor({ 'type': type, 'nullValues': nulls }: BuilderOptions<T, TNull>) {\n        this.type = type;\n        this.children = [];\n        this.nullValues = nulls;\n        this.stride = strideForType(type);\n        this._nulls = new BitmapBufferBuilder();\n        if (nulls && nulls.length > 0) {\n            this._isValid = createIsValidFunction(nulls);\n        }\n    }\n\n    /**\n     * The Builder's `DataType` instance.\n     * @readonly\n     */\n    public type: T;\n    /**\n     * The number of values written to the `Builder` that haven't been flushed yet.\n     * @readonly\n     */\n    public length = 0;\n    /**\n     * A boolean indicating whether `Builder.prototype.finish()` has been called on this `Builder`.\n     * @readonly\n     */\n    public finished = false;\n    /**\n     * The number of elements in the underlying values TypedArray that\n     * represent a single logical element, determined by this Builder's\n     * `DataType`. This is 1 for most types, but is larger when the `DataType`\n     * is `Int64`, `Uint64`, `Decimal`, `DateMillisecond`, certain variants of\n     * `Interval`, `Time`, or `Timestamp`, `FixedSizeBinary`, and `FixedSizeList`.\n     * @readonly\n     */\n    public readonly stride: number;\n    public readonly children: Builder[];\n    /**\n     * The list of null-value sentinels for this `Builder`. When one of these values\n     * is written to the `Builder` (either via `Builder.prototype.set()` or `Builder.prototype.append()`),\n     * a 1-bit is written to this Builder's underlying null BitmapBufferBuilder.\n     * @readonly\n     */\n    public readonly nullValues?: TNull[] | ReadonlyArray<TNull> | null;\n\n    /**\n     * Flush the `Builder` and return a `Vector<T>`.\n     * @returns {Vector<T>} A `Vector<T>` of the flushed values.\n     */\n    public toVector() { return Vector.new(this.flush()); }\n\n    public get ArrayType() { return this.type.ArrayType; }\n    public get nullCount() { return this._nulls.numInvalid; }\n    public get numChildren() { return this.children.length; }\n\n    /**\n     * @returns The aggregate length (in bytes) of the values that have been written.\n     */\n    public get byteLength(): number {\n        let size = 0;\n        this._offsets && (size += this._offsets.byteLength);\n        this._values && (size += this._values.byteLength);\n        this._nulls && (size += this._nulls.byteLength);\n        this._typeIds && (size += this._typeIds.byteLength);\n        return this.children.reduce((size, child) => size + child.byteLength, size);\n    }\n\n    /**\n     * @returns The aggregate number of rows that have been reserved to write new values.\n     */\n    public get reservedLength(): number {\n        return this._nulls.reservedLength;\n    }\n\n    /**\n     * @returns The aggregate length (in bytes) that has been reserved to write new values.\n     */\n    public get reservedByteLength(): number {\n        let size = 0;\n        this._offsets && (size += this._offsets.reservedByteLength);\n        this._values && (size += this._values.reservedByteLength);\n        this._nulls && (size += this._nulls.reservedByteLength);\n        this._typeIds && (size += this._typeIds.reservedByteLength);\n        return this.children.reduce((size, child) => size + child.reservedByteLength, size);\n    }\n\n    // @ts-ignore\n    protected _offsets: DataBufferBuilder<Int32Array>;\n    public get valueOffsets() { return this._offsets ? this._offsets.buffer : null; }\n\n    // @ts-ignore\n    protected _values: BufferBuilder<T['TArray'], any>;\n    public get values() { return this._values ? this._values.buffer : null; }\n\n    protected _nulls: BitmapBufferBuilder;\n    public get nullBitmap() { return this._nulls ? this._nulls.buffer : null; }\n\n    // @ts-ignore\n    protected _typeIds: DataBufferBuilder<Int8Array>;\n    public get typeIds() { return this._typeIds ? this._typeIds.buffer : null; }\n\n    // @ts-ignore\n    protected _isValid: (value: T['TValue'] | TNull) => boolean;\n    // @ts-ignore\n    protected _setValue: (inst: Builder<T>, index: number, value: T['TValue']) => void;\n\n    /**\n     * Appends a value (or null) to this `Builder`.\n     * This is equivalent to `builder.set(builder.length, value)`.\n     * @param {T['TValue'] | TNull } value The value to append.\n     */\n    public append(value: T['TValue'] | TNull) { return this.set(this.length, value); }\n\n    /**\n     * Validates whether a value is valid (true), or null (false)\n     * @param {T['TValue'] | TNull } value The value to compare against null the value representations\n     */\n    // @ts-ignore\n    public isValid(value: T['TValue'] | TNull): boolean { return this._isValid(value); }\n\n    /**\n     * Write a value (or null-value sentinel) at the supplied index.\n     * If the value matches one of the null-value representations, a 1-bit is\n     * written to the null `BitmapBufferBuilder`. Otherwise, a 0 is written to\n     * the null `BitmapBufferBuilder`, and the value is passed to\n     * `Builder.prototype.setValue()`.\n     * @param {number} index The index of the value to write.\n     * @param {T['TValue'] | TNull } value The value to write at the supplied index.\n     * @returns {this} The updated `Builder` instance.\n     */\n    public set(index: number, value: T['TValue'] | TNull) {\n        if (this.setValid(index, this.isValid(value))) {\n            this.setValue(index, value);\n        }\n        return this;\n    }\n\n    /**\n     * Write a value to the underlying buffers at the supplied index, bypassing\n     * the null-value check. This is a low-level method that\n     * @param {number} index\n     * @param {T['TValue'] | TNull } value\n     */\n    // @ts-ignore\n    public setValue(index: number, value: T['TValue']) { this._setValue(this, index, value); }\n    public setValid(index: number, valid: boolean) {\n        this.length = this._nulls.set(index, +valid).length;\n        return valid;\n    }\n\n    // @ts-ignore\n    public addChild(child: Builder, name = `${this.numChildren}`) {\n        throw new Error(`Cannot append children to non-nested type \"${this.type}\"`);\n    }\n\n    /**\n     * Retrieve the child `Builder` at the supplied `index`, or null if no child\n     * exists at that index.\n     * @param {number} index The index of the child `Builder` to retrieve.\n     * @returns {Builder | null} The child Builder at the supplied index or null.\n     */\n    public getChildAt<R extends DataType = any>(index: number): Builder<R> | null {\n        return this.children[index] || null;\n    }\n\n    /**\n     * Commit all the values that have been written to their underlying\n     * ArrayBuffers, including any child Builders if applicable, and reset\n     * the internal `Builder` state.\n     * @returns A `Data<T>` of the buffers and childData representing the values written.\n     */\n    public flush() {\n\n        const buffers: any = [];\n        const values =  this._values;\n        const offsets =  this._offsets;\n        const typeIds =  this._typeIds;\n        const { length, nullCount } = this;\n\n        if (typeIds) { /* Unions */\n            buffers[BufferType.TYPE] = typeIds.flush(length);\n            // DenseUnions\n            offsets && (buffers[BufferType.OFFSET] = offsets.flush(length));\n        } else if (offsets) { /* Variable-width primitives (Binary, Utf8) and Lists */\n            // Binary, Utf8\n            values && (buffers[BufferType.DATA] = values.flush(offsets.last()));\n            buffers[BufferType.OFFSET] = offsets.flush(length);\n        } else if (values) { /* Fixed-width primitives (Int, Float, Decimal, Time, Timestamp, and Interval) */\n            buffers[BufferType.DATA] = values.flush(length);\n        }\n\n        nullCount > 0 && (buffers[BufferType.VALIDITY] = this._nulls.flush(length));\n\n        const data = Data.new<T>(\n            this.type, 0, length, nullCount, buffers as Buffers<T>,\n            this.children.map((child) => child.flush())) as Data<T>;\n\n        this.clear();\n\n        return data;\n    }\n\n    /**\n     * Finalize this `Builder`, and child builders if applicable.\n     * @returns {this} The finalized `Builder` instance.\n     */\n    public finish() {\n        this.finished = true;\n        this.children.forEach((child) => child.finish());\n        return this;\n    }\n\n    /**\n     * Clear this Builder's internal state, including child Builders if applicable, and reset the length to 0.\n     * @returns {this} The cleared `Builder` instance.\n     */\n    public clear() {\n        this.length = 0;\n        this._offsets && (this._offsets.clear());\n        this._values && (this._values.clear());\n        this._nulls && (this._nulls.clear());\n        this._typeIds && (this._typeIds.clear());\n        this.children.forEach((child) => child.clear());\n        return this;\n    }\n}\n\n(Builder.prototype as any).length = 1;\n(Builder.prototype as any).stride = 1;\n(Builder.prototype as any).children = null;\n(Builder.prototype as any).finished = false;\n(Builder.prototype as any).nullValues = null;\n(Builder.prototype as any)._isValid = () => true;\n\n/** @ignore */\nexport abstract class FixedWidthBuilder<T extends Int | Float | FixedSizeBinary | Date_ | Timestamp | Time | Decimal | Interval = any, TNull = any> extends Builder<T, TNull> {\n    constructor(opts: BuilderOptions<T, TNull>) {\n        super(opts);\n        this._values = new DataBufferBuilder(new this.ArrayType(0), this.stride);\n    }\n    public setValue(index: number, value: T['TValue']) {\n        const values = this._values;\n        values.reserve(index - values.length + 1);\n        return super.setValue(index, value);\n    }\n}\n\n/** @ignore */\nexport abstract class VariableWidthBuilder<T extends Binary | Utf8 | List | Map_, TNull = any> extends Builder<T, TNull> {\n    protected _pendingLength: number = 0;\n    protected _offsets: OffsetsBufferBuilder;\n    protected _pending: Map<number, any> | undefined;\n    constructor(opts: BuilderOptions<T, TNull>) {\n        super(opts);\n        this._offsets = new OffsetsBufferBuilder();\n    }\n    public setValue(index: number, value: T['TValue']) {\n        const pending = this._pending || (this._pending = new Map());\n        const current = pending.get(index);\n        current && (this._pendingLength -= current.length);\n        this._pendingLength += value.length;\n        pending.set(index, value);\n    }\n    public setValid(index: number, isValid: boolean) {\n        if (!super.setValid(index, isValid)) {\n            (this._pending || (this._pending = new Map())).set(index, undefined);\n            return false;\n        }\n        return true;\n    }\n    public clear() {\n        this._pendingLength = 0;\n        this._pending = undefined;\n        return super.clear();\n    }\n    public flush() {\n        this._flush();\n        return super.flush();\n    }\n    public finish() {\n        this._flush();\n        return super.finish();\n    }\n    protected _flush() {\n        const pending = this._pending;\n        const pendingLength = this._pendingLength;\n        this._pendingLength = 0;\n        this._pending = undefined;\n        if (pending && pending.size > 0) {\n            this._flushPending(pending, pendingLength);\n        }\n        return this;\n    }\n    protected abstract _flushPending(pending: Map<number, any>, pendingLength: number): void;\n}\n\n/** @ignore */\ntype ThroughIterable<T extends DataType = any, TNull = any> = (source: Iterable<T['TValue'] | TNull>) => IterableIterator<V<T>>;\n\n/** @ignore */\nfunction throughIterable<T extends DataType = any, TNull = any>(options: IterableBuilderOptions<T, TNull>): ThroughIterable<T, TNull> {\n    const { ['queueingStrategy']: queueingStrategy = 'count' } = options;\n    const { ['highWaterMark']: highWaterMark = queueingStrategy !== 'bytes' ? 1000 : 2 ** 14 } = options;\n    const sizeProperty: 'length' | 'byteLength' = queueingStrategy !== 'bytes' ? 'length' : 'byteLength';\n    return function*(source: Iterable<T['TValue'] | TNull>) {\n        let numChunks = 0;\n        let builder = Builder.new(options);\n        for (const value of source) {\n            if (builder.append(value)[sizeProperty] >= highWaterMark) {\n                ++numChunks && (yield builder.toVector());\n            }\n        }\n        if (builder.finish().length > 0 || numChunks === 0) {\n            yield builder.toVector();\n        }\n    };\n}\n\n/** @ignore */\ntype ThroughAsyncIterable<T extends DataType = any, TNull = any> = (source: Iterable<T['TValue'] | TNull> | AsyncIterable<T['TValue'] | TNull>) => AsyncIterableIterator<V<T>>;\n\n/** @ignore */\nfunction throughAsyncIterable<T extends DataType = any, TNull = any>(options: IterableBuilderOptions<T, TNull>): ThroughAsyncIterable<T, TNull> {\n    const { ['queueingStrategy']: queueingStrategy = 'count' } = options;\n    const { ['highWaterMark']: highWaterMark = queueingStrategy !== 'bytes' ? 1000 : 2 ** 14 } = options;\n    const sizeProperty: 'length' | 'byteLength' = queueingStrategy !== 'bytes' ? 'length' : 'byteLength';\n    return async function* (source: Iterable<T['TValue'] | TNull> | AsyncIterable<T['TValue'] | TNull>) {\n        let numChunks = 0;\n        let builder = Builder.new(options);\n        for await (const value of source) {\n            if (builder.append(value)[sizeProperty] >= highWaterMark) {\n                ++numChunks && (yield builder.toVector());\n            }\n        }\n        if (builder.finish().length > 0 || numChunks === 0) {\n            yield builder.toVector();\n        }\n    };\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Bool } from '../type';\nimport { BitmapBufferBuilder } from './buffer';\nimport { Builder, BuilderOptions } from '../builder';\n\n/** @ignore */\nexport class BoolBuilder<TNull = any> extends Builder<Bool, TNull> {\n    constructor(options: BuilderOptions<Bool, TNull>) {\n        super(options);\n        this._values = new BitmapBufferBuilder();\n    }\n    public setValue(index: number, value: boolean) {\n        this._values.set(index, +value);\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Null } from '../type';\nimport { Builder } from '../builder';\n\n/** @ignore */\nexport class NullBuilder<TNull = any> extends Builder<Null, TNull> {\n    // @ts-ignore\n    public setValue(index: number, value: null) {}\n    public setValid(index: number, valid: boolean) {\n        this.length = Math.max(index + 1, this.length);\n        return valid;\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { FixedWidthBuilder } from '../builder';\nimport { Date_, DateDay, DateMillisecond } from '../type';\n\n/** @ignore */\nexport class DateBuilder<T extends Date_ = Date_, TNull = any> extends FixedWidthBuilder<T, TNull> {}\n/** @ignore */\nexport class DateDayBuilder<TNull = any> extends DateBuilder<DateDay, TNull> {}\n/** @ignore */\nexport class DateMillisecondBuilder<TNull = any> extends DateBuilder<DateMillisecond, TNull> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Decimal } from '../type';\nimport { FixedWidthBuilder } from '../builder';\n\n/** @ignore */\nexport class DecimalBuilder<TNull = any> extends FixedWidthBuilder<Decimal, TNull> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from '../vector';\nimport { IntBuilder } from './int';\nimport { Dictionary, DataType } from '../type';\nimport { Builder, BuilderOptions } from '../builder';\n\ntype DictionaryHashFunction = (x: any) => string | number;\n\nexport interface DictionaryBuilderOptions<T extends DataType = any, TNull = any> extends BuilderOptions<T, TNull> {\n    dictionaryHashFunction?: DictionaryHashFunction;\n}\n\n/** @ignore */\nexport class DictionaryBuilder<T extends Dictionary, TNull = any> extends Builder<T, TNull> {\n\n    protected _dictionaryOffset: number;\n    protected _dictionary?: Vector<T['dictionary']>;\n    protected _keysToIndices: { [key: string]: number };\n    public readonly indices: IntBuilder<T['indices']>;\n    public readonly dictionary: Builder<T['dictionary']>;\n\n    constructor({ 'type': type, 'nullValues': nulls, 'dictionaryHashFunction': hashFn }: DictionaryBuilderOptions<T, TNull>) {\n        super({ type: new Dictionary(type.dictionary, type.indices, type.id, type.isOrdered) as T });\n        this._nulls = <any> null;\n        this._dictionaryOffset = 0;\n        this._keysToIndices = Object.create(null);\n        this.indices = Builder.new({ 'type': this.type.indices, 'nullValues': nulls }) as IntBuilder<T['indices']>;\n        this.dictionary = Builder.new({ 'type': this.type.dictionary, 'nullValues': null }) as Builder<T['dictionary']>;\n        if (typeof hashFn === 'function') {\n            this.valueToKey = hashFn;\n        }\n    }\n\n    public get values() { return this.indices.values; }\n    public get nullCount() { return this.indices.nullCount; }\n    public get nullBitmap() { return this.indices.nullBitmap; }\n    public get byteLength() { return this.indices.byteLength + this.dictionary.byteLength; }\n    public get reservedLength() { return this.indices.reservedLength + this.dictionary.reservedLength; }\n    public get reservedByteLength() { return this.indices.reservedByteLength + this.dictionary.reservedByteLength; }\n    public isValid(value: T['TValue'] | TNull) { return this.indices.isValid(value); }\n    public setValid(index: number, valid: boolean) {\n        const indices = this.indices;\n        valid = indices.setValid(index, valid);\n        this.length = indices.length;\n        return valid;\n    }\n    public setValue(index: number, value: T['TValue']) {\n        let keysToIndices = this._keysToIndices;\n        let key = this.valueToKey(value);\n        let idx = keysToIndices[key];\n        if (idx === undefined) {\n            keysToIndices[key] = idx = this._dictionaryOffset + this.dictionary.append(value).length - 1;\n        }\n        return this.indices.setValue(index, idx);\n    }\n    public flush() {\n        const type = this.type;\n        const prev = this._dictionary;\n        const curr = this.dictionary.toVector();\n        const data = this.indices.flush().clone(type);\n        data.dictionary = prev ? prev.concat(curr) : curr;\n        this.finished || (this._dictionaryOffset += curr.length);\n        this._dictionary = data.dictionary as Vector<T['dictionary']>;\n        this.clear();\n        return data;\n    }\n    public finish() {\n        this.indices.finish();\n        this.dictionary.finish();\n        this._dictionaryOffset = 0;\n        this._keysToIndices = Object.create(null);\n        return super.finish();\n    }\n    public clear() {\n        this.indices.clear();\n        this.dictionary.clear();\n        return super.clear();\n    }\n    public valueToKey(val: any): string | number {\n        return typeof val === 'string' ? val : `${val}`;\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { FixedSizeBinary } from '../type';\nimport { FixedWidthBuilder } from '../builder';\n\n/** @ignore */\nexport class FixedSizeBinaryBuilder<TNull = any> extends FixedWidthBuilder<FixedSizeBinary, TNull> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nconst f64 = new Float64Array(1);\nconst u32 = new Uint32Array(f64.buffer);\n\n/**\n * Convert uint16 (logically a float16) to a JS float64. Inspired by numpy's `npy_half_to_double`:\n * https://github.com/numpy/numpy/blob/5a5987291dc95376bb098be8d8e5391e89e77a2c/numpy/core/src/npymath/halffloat.c#L29\n * @param h {number} the uint16 to convert\n * @private\n * @ignore\n */\nexport function uint16ToFloat64(h: number) {\n    let expo = (h & 0x7C00) >> 10;\n    let sigf = (h & 0x03FF) / 1024;\n    let sign = (-1) ** ((h & 0x8000) >> 15);\n    switch (expo) {\n        case 0x1F: return sign * (sigf ? NaN : 1 / 0);\n        case 0x00: return sign * (sigf ? 6.103515625e-5 * sigf : 0);\n    }\n    return sign * (2 ** (expo - 15)) * (1 + sigf);\n}\n\n/**\n * Convert a float64 to uint16 (assuming the float64 is logically a float16). Inspired by numpy's `npy_double_to_half`:\n * https://github.com/numpy/numpy/blob/5a5987291dc95376bb098be8d8e5391e89e77a2c/numpy/core/src/npymath/halffloat.c#L43\n * @param d {number} The float64 to convert\n * @private\n * @ignore\n */\nexport function float64ToUint16(d: number) {\n\n    if (d !== d) { return 0x7E00; } // NaN\n\n    f64[0] = d;\n\n    // Magic numbers:\n    // 0x80000000 = 10000000 00000000 00000000 00000000 -- masks the 32nd bit\n    // 0x7ff00000 = 01111111 11110000 00000000 00000000 -- masks the 21st-31st bits\n    // 0x000fffff = 00000000 00001111 11111111 11111111 -- masks the 1st-20th bit\n\n    let sign = (u32[1] & 0x80000000) >> 16 & 0xFFFF;\n    let expo = (u32[1] & 0x7ff00000), sigf = 0x0000;\n\n    if (expo >= 0x40f00000) {\n        //\n        // If exponent overflowed, the float16 is either NaN or Infinity.\n        // Rules to propagate the sign bit: mantissa > 0 ? NaN : +/-Infinity\n        //\n        // Magic numbers:\n        // 0x40F00000 = 01000000 11110000 00000000 00000000 -- 6-bit exponent overflow\n        // 0x7C000000 = 01111100 00000000 00000000 00000000 -- masks the 27th-31st bits\n        //\n        // returns:\n        // qNaN, aka 32256 decimal, 0x7E00 hex, or 01111110 00000000 binary\n        // sNaN, aka 32000 decimal, 0x7D00 hex, or 01111101 00000000 binary\n        // +inf, aka 31744 decimal, 0x7C00 hex, or 01111100 00000000 binary\n        // -inf, aka 64512 decimal, 0xFC00 hex, or 11111100 00000000 binary\n        //\n        // If mantissa is greater than 23 bits, set to +Infinity like numpy\n        if (u32[0] > 0) {\n            expo = 0x7C00;\n        } else {\n            expo = (expo & 0x7C000000) >> 16;\n            sigf = (u32[1] & 0x000fffff) >> 10;\n        }\n    } else if (expo <= 0x3f000000) {\n        //\n        // If exponent underflowed, the float is either signed zero or subnormal.\n        //\n        // Magic numbers:\n        // 0x3F000000 = 00111111 00000000 00000000 00000000 -- 6-bit exponent underflow\n        //\n        sigf = 0x100000 + (u32[1] & 0x000fffff);\n        sigf = 0x100000 + (sigf << ((expo >> 20) - 998)) >> 21;\n        expo = 0;\n    } else {\n        //\n        // No overflow or underflow, rebase the exponent and round the mantissa\n        // Magic numbers:\n        // 0x200 = 00000010 00000000 -- masks off the 10th bit\n        //\n\n        // Ensure the first mantissa bit (the 10th one) is 1 and round\n        expo = (expo - 0x3f000000) >> 10;\n        sigf = ((u32[1] & 0x000fffff) + 0x200) >> 10;\n    }\n\n    return sign | expo | sigf & 0xFFFF;\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { float64ToUint16 } from '../util/math';\nimport { FixedWidthBuilder } from '../builder';\nimport { Float, Float16, Float32, Float64 } from '../type';\n\n/** @ignore */\nexport class FloatBuilder<T extends Float = Float, TNull = any> extends FixedWidthBuilder<T, TNull> {}\n\n/** @ignore */\nexport class Float16Builder<TNull = any> extends FloatBuilder<Float16, TNull> {\n    public setValue(index: number, value: number) {\n        // convert JS float64 to a uint16\n        this._values.set(index, float64ToUint16(value));\n    }\n}\n\n/** @ignore */\nexport class Float32Builder<TNull = any> extends FloatBuilder<Float32, TNull> {\n    public setValue(index: number, value: number) {\n        this._values.set(index, value);\n    }\n}\n\n/** @ignore */\nexport class Float64Builder<TNull = any> extends FloatBuilder<Float64, TNull> {\n    public setValue(index: number, value: number) {\n        this._values.set(index, value);\n    }\n}\n","import setPrototypeOf from \"./setPrototypeOf\";\nimport isNativeReflectConstruct from \"./isNativeReflectConstruct\";\nexport default function _construct(Parent, args, Class) {\n  if (isNativeReflectConstruct()) {\n    _construct = Reflect.construct;\n  } else {\n    _construct = function _construct(Parent, args, Class) {\n      var a = [null];\n      a.push.apply(a, args);\n      var Constructor = Function.bind.apply(Parent, a);\n      var instance = new Constructor();\n      if (Class) setPrototypeOf(instance, Class.prototype);\n      return instance;\n    };\n  }\n\n  return _construct.apply(null, arguments);\n}","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { ArrayBufferViewInput, toArrayBufferView } from './buffer';\nimport { TypedArray, TypedArrayConstructor } from '../interfaces';\nimport { BigIntArray, BigIntArrayConstructor } from '../interfaces';\nimport { BigIntAvailable, BigInt64Array, BigUint64Array } from './compat';\n\n/** @ignore */\nexport const isArrowBigNumSymbol = Symbol.for('isArrowBigNum');\n\n/** @ignore */ type BigNumArray = IntArray | UintArray;\n/** @ignore */ type IntArray = Int8Array | Int16Array | Int32Array;\n/** @ignore */ type UintArray = Uint8Array | Uint16Array | Uint32Array | Uint8ClampedArray;\n\n/** @ignore */\nfunction BigNum(this: any, x: any, ...xs: any) {\n    if (xs.length === 0) {\n        return Object.setPrototypeOf(toArrayBufferView(this['TypedArray'], x), this.constructor.prototype);\n    }\n    return Object.setPrototypeOf(new this['TypedArray'](x, ...xs), this.constructor.prototype);\n}\n\nBigNum.prototype[isArrowBigNumSymbol] = true;\nBigNum.prototype.toJSON = function<T extends BN<BigNumArray>>(this: T) { return `\"${bignumToString(this)}\"`; };\nBigNum.prototype.valueOf = function<T extends BN<BigNumArray>>(this: T) { return bignumToNumber(this); };\nBigNum.prototype.toString = function<T extends BN<BigNumArray>>(this: T) { return bignumToString(this); };\nBigNum.prototype[Symbol.toPrimitive] = function<T extends BN<BigNumArray>>(this: T, hint: 'string' | 'number' | 'default' = 'default') {\n    switch (hint) {\n        case 'number': return bignumToNumber(this);\n        case 'string': return bignumToString(this);\n        case 'default': return bignumToBigInt(this);\n    }\n    return bignumToString(this);\n};\n\n/** @ignore */\ntype TypedArrayConstructorArgs =\n    [number | void] |\n    [Iterable<number> | Iterable<bigint>] |\n    [ArrayBufferLike, number | void, number | void] ;\n\n/** @ignore */\nfunction SignedBigNum(this: any, ...args: TypedArrayConstructorArgs) { return BigNum.apply(this, args); }\n/** @ignore */\nfunction UnsignedBigNum(this: any, ...args: TypedArrayConstructorArgs) { return BigNum.apply(this, args); }\n/** @ignore */\nfunction DecimalBigNum(this: any, ...args: TypedArrayConstructorArgs) { return BigNum.apply(this, args); }\n\nObject.setPrototypeOf(SignedBigNum.prototype,   Object.create(Int32Array.prototype));\nObject.setPrototypeOf(UnsignedBigNum.prototype, Object.create(Uint32Array.prototype));\nObject.setPrototypeOf(DecimalBigNum.prototype,  Object.create(Uint32Array.prototype));\nObject.assign(SignedBigNum.prototype,   BigNum.prototype, { 'constructor': SignedBigNum,   'signed': true,  'TypedArray': Int32Array,  'BigIntArray': BigInt64Array  });\nObject.assign(UnsignedBigNum.prototype, BigNum.prototype, { 'constructor': UnsignedBigNum, 'signed': false, 'TypedArray': Uint32Array, 'BigIntArray': BigUint64Array });\nObject.assign(DecimalBigNum.prototype,  BigNum.prototype, { 'constructor': DecimalBigNum,  'signed': true,  'TypedArray': Uint32Array, 'BigIntArray': BigUint64Array });\n\n/** @ignore */\nfunction bignumToNumber<T extends BN<BigNumArray>>(bn: T) {\n    let { buffer, byteOffset, length, 'signed': signed } = bn;\n    let words = new Int32Array(buffer, byteOffset, length);\n    let number = 0, i = 0, n = words.length, hi, lo;\n    while (i < n) {\n        lo = words[i++];\n        hi = words[i++];\n        signed || (hi = hi >>> 0);\n        number += (lo >>> 0) + (hi * (i ** 32));\n    }\n    return number;\n}\n\n/** @ignore */\nexport let bignumToString: { <T extends BN<BigNumArray>>(a: T): string; };\n/** @ignore */\nexport let bignumToBigInt: { <T extends BN<BigNumArray>>(a: T): bigint; };\n\nif (!BigIntAvailable) {\n    bignumToString = decimalToString;\n    bignumToBigInt = <any> bignumToString;\n} else {\n    bignumToBigInt = (<T extends BN<BigNumArray>>(a: T) => a.byteLength === 8 ? new a['BigIntArray'](a.buffer, a.byteOffset, 1)[0] : <any>decimalToString(a));\n    bignumToString = (<T extends BN<BigNumArray>>(a: T) => a.byteLength === 8 ? `${new a['BigIntArray'](a.buffer, a.byteOffset, 1)[0]}` : decimalToString(a));\n}\n\n/** @ignore */\nfunction decimalToString<T extends BN<BigNumArray>>(a: T) {\n    let digits = '';\n    let base64 = new Uint32Array(2);\n    let base32 = new Uint16Array(a.buffer, a.byteOffset, a.byteLength / 2);\n    let checks = new Uint32Array((base32 = new Uint16Array(base32).reverse()).buffer);\n    let i = -1, n = base32.length - 1;\n    do {\n        for (base64[0] = base32[i = 0]; i < n;) {\n            base32[i++] = base64[1] = base64[0] / 10;\n            base64[0] = ((base64[0] - base64[1] * 10) << 16) + base32[i];\n        }\n        base32[i] = base64[1] = base64[0] / 10;\n        base64[0] = base64[0] - base64[1] * 10;\n        digits = `${base64[0]}${digits}`;\n    } while (checks[0] || checks[1] || checks[2] || checks[3]);\n    return digits ? digits : `0`;\n}\n\n/** @ignore */\nexport class BN<T extends BigNumArray> {\n    /** @nocollapse */\n    public static new<T extends BigNumArray>(num: T, isSigned?: boolean): (T & BN<T>) {\n        switch (isSigned) {\n            case true: return new (<any> SignedBigNum)(num) as (T & BN<T>);\n            case false: return new (<any> UnsignedBigNum)(num) as (T & BN<T>);\n        }\n        switch (num.constructor) {\n            case Int8Array:\n            case Int16Array:\n            case Int32Array:\n            case BigInt64Array:\n                return new (<any> SignedBigNum)(num) as (T & BN<T>);\n        }\n        if (num.byteLength === 16) {\n            return new (<any> DecimalBigNum)(num) as (T & BN<T>);\n        }\n        return new (<any> UnsignedBigNum)(num) as (T & BN<T>);\n    }\n    /** @nocollapse */\n    public static signed<T extends IntArray>(num: T): (T & BN<T>) {\n        return new (<any> SignedBigNum)(num) as (T & BN<T>);\n    }\n    /** @nocollapse */\n    public static unsigned<T extends UintArray>(num: T): (T & BN<T>) {\n        return new (<any> UnsignedBigNum)(num) as (T & BN<T>);\n    }\n    /** @nocollapse */\n    public static decimal<T extends UintArray>(num: T): (T & BN<T>) {\n        return new (<any> DecimalBigNum)(num) as (T & BN<T>);\n    }\n    constructor(num: T, isSigned?: boolean) {\n        return BN.new(num, isSigned) as any;\n    }\n}\n\n/** @ignore */\nexport interface BN<T extends BigNumArray> extends TypedArrayLike<T> {\n\n    new<T extends ArrayBufferViewInput>(buffer: T, signed?: boolean): T;\n\n    readonly signed: boolean;\n    readonly TypedArray: TypedArrayConstructor<TypedArray>;\n    readonly BigIntArray: BigIntArrayConstructor<BigIntArray>;\n\n    [Symbol.toStringTag]:\n        'Int8Array'         |\n        'Int16Array'        |\n        'Int32Array'        |\n        'Uint8Array'        |\n        'Uint16Array'       |\n        'Uint32Array'       |\n        'Uint8ClampedArray';\n\n    /**\n     * Convert the bytes to their (positive) decimal representation for printing\n     */\n    toString(): string;\n    /**\n     * Down-convert the bytes to a 53-bit precision integer. Invoked by JS for\n     * arithmetic operators, like `+`. Easy (and unsafe) way to convert BN to\n     * number via `+bn_inst`\n     */\n    valueOf(): number;\n    /**\n     * Return the JSON representation of the bytes. Must be wrapped in double-quotes,\n     * so it's compatible with JSON.stringify().\n     */\n    toJSON(): string;\n    [Symbol.toPrimitive](hint?: any): number | string | bigint;\n}\n\n/** @ignore */\ninterface TypedArrayLike<T extends BigNumArray> {\n\n    readonly length: number;\n    readonly buffer: ArrayBuffer;\n    readonly byteLength: number;\n    readonly byteOffset: number;\n    readonly BYTES_PER_ELEMENT: number;\n\n    includes(searchElement: number, fromIndex?: number | undefined): boolean;\n    copyWithin(target: number, start: number, end?: number | undefined): this;\n    every(callbackfn: (value: number, index: number, array: T) => boolean, thisArg?: any): boolean;\n    fill(value: number, start?: number | undefined, end?: number | undefined): this;\n    filter(callbackfn: (value: number, index: number, array: T) => boolean, thisArg?: any): T;\n    find(predicate: (value: number, index: number, obj: T) => boolean, thisArg?: any): number | undefined;\n    findIndex(predicate: (value: number, index: number, obj: T) => boolean, thisArg?: any): number;\n    forEach(callbackfn: (value: number, index: number, array: T) => void, thisArg?: any): void;\n    indexOf(searchElement: number, fromIndex?: number | undefined): number;\n    join(separator?: string | undefined): string;\n    lastIndexOf(searchElement: number, fromIndex?: number | undefined): number;\n    map(callbackfn: (value: number, index: number, array: T) => number, thisArg?: any): T;\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: T) => number): number;\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: T) => number, initialValue: number): number;\n    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: T) => U, initialValue: U): U;\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: T) => number): number;\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: T) => number, initialValue: number): number;\n    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: T) => U, initialValue: U): U;\n    reverse(): T;\n    set(array: ArrayLike<number>, offset?: number | undefined): void;\n    slice(start?: number | undefined, end?: number | undefined): T;\n    some(callbackfn: (value: number, index: number, array: T) => boolean, thisArg?: any): boolean;\n    sort(compareFn?: ((a: number, b: number) => number) | undefined): this;\n    subarray(begin: number, end?: number | undefined): T;\n    toLocaleString(): string;\n    entries(): IterableIterator<[number, number]>;\n    keys(): IterableIterator<number>;\n    values(): IterableIterator<number>;\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { bignumToBigInt } from '../util/bn';\nimport { WideBufferBuilder } from './buffer';\nimport { BigInt64Array } from '../util/compat';\nimport { FixedWidthBuilder, BuilderOptions } from '../builder';\nimport { Int, Int8, Int16, Int32, Int64, Uint8, Uint16, Uint32, Uint64 } from '../type';\n\n/** @ignore */\nexport class IntBuilder<T extends Int = Int, TNull = any> extends FixedWidthBuilder<T, TNull> {\n    public setValue(index: number, value: T['TValue']) {\n        this._values.set(index, value);\n    }\n}\n\n/** @ignore */\nexport class Int8Builder<TNull = any> extends IntBuilder<Int8, TNull> {}\n/** @ignore */\nexport class Int16Builder<TNull = any> extends IntBuilder<Int16, TNull> {}\n/** @ignore */\nexport class Int32Builder<TNull = any> extends IntBuilder<Int32, TNull> {}\n/** @ignore */\nexport class Int64Builder<TNull = any> extends IntBuilder<Int64, TNull> {\n    protected _values: WideBufferBuilder<Int32Array, BigInt64Array>;\n    constructor(options: BuilderOptions<Int64, TNull>) {\n        if (options['nullValues']) {\n            options['nullValues'] = (options['nullValues'] as TNull[]).map(toBigInt);\n        }\n        super(options);\n        this._values = new WideBufferBuilder(new Int32Array(0), 2);\n    }\n    public get values64() { return this._values.buffer64; }\n    public isValid(value: Int32Array | bigint | TNull) { return super.isValid(toBigInt(value)); }\n}\n\n/** @ignore */\nexport class Uint8Builder<TNull = any> extends IntBuilder<Uint8, TNull> {}\n/** @ignore */\nexport class Uint16Builder<TNull = any> extends IntBuilder<Uint16, TNull> {}\n/** @ignore */\nexport class Uint32Builder<TNull = any> extends IntBuilder<Uint32, TNull> {}\n/** @ignore */\nexport class Uint64Builder<TNull = any> extends IntBuilder<Uint64, TNull> {\n    protected _values: WideBufferBuilder<Uint32Array, BigUint64Array>;\n    constructor(options: BuilderOptions<Uint64, TNull>) {\n        if (options['nullValues']) {\n            options['nullValues'] = (options['nullValues'] as TNull[]).map(toBigInt);\n        }\n        super(options);\n        this._values = new WideBufferBuilder(new Uint32Array(0), 2);\n    }\n    public get values64() { return this._values.buffer64; }\n    public isValid(value: Uint32Array | bigint | TNull) { return super.isValid(toBigInt(value)); }\n}\n\nconst toBigInt = ((memo: any) => (value: any) => {\n    if (ArrayBuffer.isView(value)) {\n        memo.buffer = value.buffer;\n        memo.byteOffset = value.byteOffset;\n        memo.byteLength = value.byteLength;\n        value = bignumToBigInt(memo);\n        memo.buffer = null;\n    }\n    return value;\n})({ 'BigIntArray': BigInt64Array });\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { FixedWidthBuilder } from '../builder';\nimport { Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond } from '../type';\n\n/** @ignore */\nexport class TimeBuilder<T extends Time = Time, TNull = any> extends FixedWidthBuilder<T, TNull> {}\n/** @ignore */\nexport class TimeSecondBuilder<TNull = any> extends TimeBuilder<TimeSecond, TNull> {}\n/** @ignore */\nexport class TimeMillisecondBuilder<TNull = any> extends TimeBuilder<TimeMillisecond, TNull> {}\n/** @ignore */\nexport class TimeMicrosecondBuilder<TNull = any> extends TimeBuilder<TimeMicrosecond, TNull> {}\n/** @ignore */\nexport class TimeNanosecondBuilder<TNull = any> extends TimeBuilder<TimeNanosecond, TNull> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { FixedWidthBuilder } from '../builder';\nimport { Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond } from '../type';\n\n/** @ignore */\nexport class TimestampBuilder<T extends Timestamp = Timestamp, TNull = any> extends FixedWidthBuilder<T, TNull> {}\n/** @ignore */\nexport class TimestampSecondBuilder<TNull = any> extends TimestampBuilder<TimestampSecond, TNull> {}\n/** @ignore */\nexport class TimestampMillisecondBuilder<TNull = any> extends TimestampBuilder<TimestampMillisecond, TNull> {}\n/** @ignore */\nexport class TimestampMicrosecondBuilder<TNull = any> extends TimestampBuilder<TimestampMicrosecond, TNull> {}\n/** @ignore */\nexport class TimestampNanosecondBuilder<TNull = any> extends TimestampBuilder<TimestampNanosecond, TNull> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { FixedWidthBuilder } from '../builder';\nimport { Interval, IntervalDayTime, IntervalYearMonth } from '../type';\n\n/** @ignore */\nexport class IntervalBuilder<T extends Interval = Interval, TNull = any> extends FixedWidthBuilder<T, TNull> {}\n/** @ignore */\nexport class IntervalDayTimeBuilder<TNull = any> extends IntervalBuilder<IntervalDayTime, TNull> {}\n/** @ignore */\nexport class IntervalYearMonthBuilder<TNull = any> extends IntervalBuilder<IntervalYearMonth, TNull> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Binary } from '../type';\nimport { toUint8Array } from '../util/buffer';\nimport { BufferBuilder } from './buffer';\nimport { VariableWidthBuilder, BuilderOptions } from '../builder';\n\n/** @ignore */\nexport class BinaryBuilder<TNull = any> extends VariableWidthBuilder<Binary, TNull> {\n    constructor(opts: BuilderOptions<Binary, TNull>) {\n        super(opts);\n        this._values = new BufferBuilder(new Uint8Array(0));\n    }\n    public get byteLength(): number {\n        let size = this._pendingLength + (this.length * 4);\n        this._offsets && (size += this._offsets.byteLength);\n        this._values && (size += this._values.byteLength);\n        this._nulls && (size += this._nulls.byteLength);\n        return size;\n    }\n    public setValue(index: number, value: Uint8Array) {\n        return super.setValue(index, toUint8Array(value));\n    }\n    protected _flushPending(pending: Map<number, Uint8Array | undefined>, pendingLength: number) {\n        const offsets = this._offsets;\n        const data = this._values.reserve(pendingLength).buffer;\n        let index = 0, length = 0, offset = 0, value: Uint8Array | undefined;\n        for ([index, value] of pending) {\n            if (value === undefined) {\n                offsets.set(index, 0);\n            } else {\n                length = value.length;\n                data.set(value, offset);\n                offsets.set(index, length);\n                offset += length;\n            }\n        }\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Utf8 } from '../type';\nimport { encodeUtf8 } from '../util/utf8';\nimport { BinaryBuilder } from './binary';\nimport { BufferBuilder } from './buffer';\nimport { VariableWidthBuilder, BuilderOptions } from '../builder';\n\n/** @ignore */\nexport class Utf8Builder<TNull = any> extends VariableWidthBuilder<Utf8, TNull> {\n    constructor(opts: BuilderOptions<Utf8, TNull>) {\n        super(opts);\n        this._values = new BufferBuilder(new Uint8Array(0));\n    }\n    public get byteLength(): number {\n        let size = this._pendingLength + (this.length * 4);\n        this._offsets && (size += this._offsets.byteLength);\n        this._values && (size += this._values.byteLength);\n        this._nulls && (size += this._nulls.byteLength);\n        return size;\n    }\n    public setValue(index: number, value: string) {\n        return super.setValue(index, encodeUtf8(value) as any);\n    }\n    // @ts-ignore\n    protected _flushPending(pending: Map<number, Uint8Array | undefined>, pendingLength: number): void {}\n}\n\n(Utf8Builder.prototype as any)._flushPending = (BinaryBuilder.prototype as any)._flushPending;\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from '../vector';\nimport { DataType } from '../type';\n\n/** @ignore */\nexport class Run<T extends DataType = any, TNull = any> {\n    // @ts-ignore\n    protected _values: ArrayLike<T['TValue'] | TNull>;\n    public get length() { return this._values.length; }\n    public get(index: number) { return this._values[index]; }\n    public clear() { this._values = <any> null; return this; }\n    public bind(values: Vector<T> | ArrayLike<T['TValue'] | TNull>) {\n        if (values instanceof Vector) {\n            return values;\n        }\n        this._values = values;\n        return this as any;\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from '../vector';\nimport { StructVector } from './struct';\nimport { valueToString } from '../util/pretty';\nimport { DataType, Struct, RowLike } from '../type';\n\n/** @ignore */ const kParent = Symbol.for('parent');\n/** @ignore */ const kRowIndex = Symbol.for('rowIndex');\n/** @ignore */ const kKeyToIdx = Symbol.for('keyToIdx');\n/** @ignore */ const kIdxToVal = Symbol.for('idxToVal');\n/** @ignore */ const kCustomInspect = Symbol.for('nodejs.util.inspect.custom');\n\nabstract class Row<K extends PropertyKey = any, V = any> implements Map<K, V> {\n\n    public readonly size: number;\n    public readonly [Symbol.toStringTag]: string;\n\n    protected [kRowIndex]: number;\n    protected [kParent]: Vector<Struct>;\n    protected [kKeyToIdx]: Map<K, number>;\n    protected [kIdxToVal]: V[];\n\n    constructor(parent: Vector<Struct>, numKeys: number) {\n        this[kParent] = parent;\n        this.size = numKeys;\n    }\n\n    public abstract keys(): IterableIterator<K>;\n    public abstract values(): IterableIterator<V>;\n    public abstract getKey(idx: number): K;\n    public abstract getIndex(key: K): number;\n    public abstract getValue(idx: number): V;\n    public abstract setValue(idx: number, val: V): void;\n\n    public entries() { return this[Symbol.iterator](); }\n\n    public has(key: K) { return this.get(key) !== undefined; }\n\n    public get(key: K) {\n        let val = undefined;\n        if (key !== null && key !== undefined) {\n            const ktoi = this[kKeyToIdx] || (this[kKeyToIdx] = new Map());\n            let idx = ktoi.get(key);\n            if (idx !== undefined) {\n                const itov = this[kIdxToVal] || (this[kIdxToVal] = new Array(this.size));\n                ((val = itov[idx]) !== undefined) || (itov[idx] = val = this.getValue(idx));\n            } else if ((idx = this.getIndex(key)) > -1) {\n                ktoi.set(key, idx);\n                const itov = this[kIdxToVal] || (this[kIdxToVal] = new Array(this.size));\n                ((val = itov[idx]) !== undefined) || (itov[idx] = val = this.getValue(idx));\n            }\n        }\n        return val;\n    }\n\n    public set(key: K, val: V) {\n        if (key !== null && key !== undefined) {\n            const ktoi = this[kKeyToIdx] || (this[kKeyToIdx] = new Map());\n            let idx = ktoi.get(key);\n            if (idx === undefined) {\n                ktoi.set(key, idx = this.getIndex(key));\n            }\n            if (idx > -1) {\n                const itov = this[kIdxToVal] || (this[kIdxToVal] = new Array(this.size));\n                itov[idx] = <any> this.setValue(idx, val);\n            }\n        }\n        return this;\n    }\n\n    public clear(): void { throw new Error(`Clearing ${this[Symbol.toStringTag]} not supported.`); }\n\n    public delete(_: K): boolean { throw new Error(`Deleting ${this[Symbol.toStringTag]} values not supported.`); }\n\n    public *[Symbol.iterator](): IterableIterator<[K, V]> {\n\n        const ki = this.keys();\n        const vi = this.values();\n        const ktoi = this[kKeyToIdx] || (this[kKeyToIdx] = new Map());\n        const itov = this[kIdxToVal] || (this[kIdxToVal] = new Array(this.size));\n\n        for (let k: K, v: V, i = 0, kr: IteratorResult<K>, vr: IteratorResult<V>;\n            !((kr = ki.next()).done || (vr = vi.next()).done);\n            ++i\n        ) {\n            k = kr.value;\n            v = vr.value;\n            itov[i] = v;\n            ktoi.has(k) || ktoi.set(k, i);\n            yield [k, v];\n        }\n    }\n\n    public forEach(callbackfn: (value: V, key: K, map: Map<K, V>) => void, thisArg?: any): void {\n\n        const ki = this.keys();\n        const vi = this.values();\n        const callback = thisArg === undefined ? callbackfn :\n            (v: V, k: K, m: Map<K, V>) => callbackfn.call(thisArg, v, k, m);\n        const ktoi = this[kKeyToIdx] || (this[kKeyToIdx] = new Map());\n        const itov = this[kIdxToVal] || (this[kIdxToVal] = new Array(this.size));\n\n        for (let k: K, v: V, i = 0, kr: IteratorResult<K>, vr: IteratorResult<V>;\n            !((kr = ki.next()).done || (vr = vi.next()).done);\n            ++i\n        ) {\n            k = kr.value;\n            v = vr.value;\n            itov[i] = v;\n            ktoi.has(k) || ktoi.set(k, i);\n            callback(v, k, this);\n        }\n    }\n\n    public toArray() { return [...this.values()]; }\n    public toJSON() {\n        const obj = {} as any;\n        this.forEach((val, key) => obj[key] = val);\n        return obj;\n    }\n\n    public inspect() { return this.toString(); }\n    public [kCustomInspect]() { return this.toString(); }\n    public toString() {\n        const str: string[] = [];\n        this.forEach((val, key) => {\n            key = valueToString(key);\n            val = valueToString(val);\n            str.push(`${key}: ${val}`);\n        });\n        return `{ ${str.join(', ')} }`;\n    }\n\n    protected static [Symbol.toStringTag] = ((proto: Row) => {\n        Object.defineProperties(proto, {\n            'size': { writable: true, enumerable: false, configurable: false, value: 0 },\n            [kParent]: { writable: true, enumerable: false, configurable: false, value: null },\n            [kRowIndex]: { writable: true, enumerable: false, configurable: false, value: -1 },\n        });\n        return (proto as any)[Symbol.toStringTag] = 'Row';\n    })(Row.prototype);\n}\n\nexport class MapRow<K extends DataType = any, V extends DataType = any> extends Row<K['TValue'], V['TValue'] | null> {\n    constructor(slice: Vector<Struct<{ key: K, value: V }>>) {\n        super(slice, slice.length);\n        return createRowProxy(this);\n    }\n    public keys() {\n        return this[kParent].getChildAt(0)![Symbol.iterator]();\n    }\n    public values() {\n        return this[kParent].getChildAt(1)![Symbol.iterator]();\n    }\n    public getKey(idx: number): K['TValue'] {\n        return this[kParent].getChildAt(0)!.get(idx);\n    }\n    public getIndex(key: K['TValue']): number {\n        return this[kParent].getChildAt(0)!.indexOf(key);\n    }\n    public getValue(index: number): V['TValue'] | null {\n        return this[kParent].getChildAt(1)!.get(index);\n    }\n    public setValue(index: number, value: V['TValue'] | null): void {\n        this[kParent].getChildAt(1)!.set(index, value);\n    }\n}\n\nexport class StructRow<T extends { [key: string]: DataType } = any> extends Row<keyof T, T[keyof T]['TValue'] | null> {\n    constructor(parent: StructVector<T>) {\n        super(parent, parent.type.children.length);\n        return defineRowProxyProperties(this);\n    }\n    public *keys() {\n        for (const field of this[kParent].type.children) {\n            yield field.name as keyof T;\n        }\n    }\n    public *values() {\n        for (const field of this[kParent].type.children) {\n            yield (this as RowLike<T>)[field.name];\n        }\n    }\n    public getKey(idx: number): keyof T {\n        return this[kParent].type.children[idx].name as keyof T;\n    }\n    public getIndex(key: keyof T): number {\n        return this[kParent].type.children.findIndex((f) => f.name === key);\n    }\n    public getValue(index: number): T[keyof T]['TValue'] | null {\n        return this[kParent].getChildAt(index)!.get(this[kRowIndex]);\n    }\n    public setValue(index: number, value: T[keyof T]['TValue'] | null): void {\n        return this[kParent].getChildAt(index)!.set(this[kRowIndex], value);\n    }\n}\n\nObject.setPrototypeOf(Row.prototype, Map.prototype);\n\n/** @ignore */\nconst defineRowProxyProperties = (() => {\n    const desc = { enumerable: true, configurable: false, get: null as any, set: null as any };\n    return <T extends Row>(row: T) => {\n        let idx = -1, ktoi = row[kKeyToIdx] || (row[kKeyToIdx] = new Map());\n        const getter = (key: any) => function(this: T) { return this.get(key); };\n        const setter = (key: any) => function(this: T, val: any) { return this.set(key, val); };\n        for (const key of row.keys()) {\n            ktoi.set(key, ++idx);\n            desc.get = getter(key);\n            desc.set = setter(key);\n            row.hasOwnProperty(key) || (desc.enumerable = true, Object.defineProperty(row, key, desc));\n            row.hasOwnProperty(idx) || (desc.enumerable = false, Object.defineProperty(row, idx, desc));\n        }\n        desc.get = desc.set = null;\n        return row;\n    };\n})();\n\n/** @ignore */\nconst createRowProxy = (() => {\n    if (typeof Proxy === 'undefined') {\n        return defineRowProxyProperties;\n    }\n    const has = Row.prototype.has;\n    const get = Row.prototype.get;\n    const set = Row.prototype.set;\n    const getKey = Row.prototype.getKey;\n    const RowProxyHandler: ProxyHandler<Row> = {\n        isExtensible() { return false; },\n        deleteProperty() { return false; },\n        preventExtensions() { return true; },\n        ownKeys(row: Row) { return [...row.keys()].map((x) => `${x}`); },\n        has(row: Row, key: PropertyKey) {\n            switch (key) {\n                case 'getKey': case 'getIndex': case 'getValue': case 'setValue': case 'toArray': case 'toJSON': case 'inspect':\n                case 'constructor': case 'isPrototypeOf': case 'propertyIsEnumerable': case 'toString': case 'toLocaleString': case 'valueOf':\n                case 'size': case 'has': case 'get': case 'set': case 'clear': case 'delete': case 'keys': case 'values': case 'entries': case 'forEach':\n                case '__proto__': case '__defineGetter__': case '__defineSetter__': case 'hasOwnProperty': case '__lookupGetter__': case '__lookupSetter__':\n                case Symbol.iterator: case Symbol.toStringTag: case kParent: case kRowIndex: case kIdxToVal: case kKeyToIdx: case kCustomInspect:\n                    return true;\n            }\n            if (typeof key === 'number' && !row.has(key)) {\n                key = row.getKey(key);\n            }\n            return row.has(key);\n        },\n        get(row: Row, key: PropertyKey, receiver: any) {\n            switch (key) {\n                case 'getKey': case 'getIndex': case 'getValue': case 'setValue': case 'toArray': case 'toJSON': case 'inspect':\n                case 'constructor': case 'isPrototypeOf': case 'propertyIsEnumerable': case 'toString': case 'toLocaleString': case 'valueOf':\n                case 'size': case 'has': case 'get': case 'set': case 'clear': case 'delete': case 'keys': case 'values': case 'entries': case 'forEach':\n                case '__proto__': case '__defineGetter__': case '__defineSetter__': case 'hasOwnProperty': case '__lookupGetter__': case '__lookupSetter__':\n                case Symbol.iterator: case Symbol.toStringTag: case kParent: case kRowIndex: case kIdxToVal: case kKeyToIdx: case kCustomInspect:\n                    return Reflect.get(row, key, receiver);\n            }\n            if (typeof key === 'number' && !has.call(receiver, key)) {\n                key = getKey.call(receiver, key);\n            }\n            return get.call(receiver, key);\n        },\n        set(row: Row, key: PropertyKey, val: any, receiver: any) {\n            switch (key) {\n                case kParent: case kRowIndex: case kIdxToVal: case kKeyToIdx:\n                    return Reflect.set(row, key, val, receiver);\n                case 'getKey': case 'getIndex': case 'getValue': case 'setValue': case 'toArray': case 'toJSON': case 'inspect':\n                case 'constructor': case 'isPrototypeOf': case 'propertyIsEnumerable': case 'toString': case 'toLocaleString': case 'valueOf':\n                case 'size': case 'has': case 'get': case 'set': case 'clear': case 'delete': case 'keys': case 'values': case 'entries': case 'forEach':\n                case '__proto__': case '__defineGetter__': case '__defineSetter__': case 'hasOwnProperty': case '__lookupGetter__': case '__lookupSetter__':\n                case Symbol.iterator: case Symbol.toStringTag:\n                    return false;\n            }\n            if (typeof key === 'number' && !has.call(receiver, key)) {\n                key = getKey.call(receiver, key);\n            }\n            return has.call(receiver, key) ? !!set.call(receiver, key, val) : false;\n        },\n    };\n    return <T extends Row>(row: T) => new Proxy(row, RowProxyHandler) as T;\n})();\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from '../vector';\nimport { MapRow, StructRow } from '../vector/row';\nimport { compareArrayLike } from '../util/buffer';\nimport { BigInt, BigIntAvailable } from './compat';\n\n/** @ignore */\ntype RangeLike = { length: number; stride?: number };\n/** @ignore */\ntype ClampThen<T extends RangeLike> = (source: T, index: number) => any;\n/** @ignore */\ntype ClampRangeThen<T extends RangeLike> = (source: T, offset: number, length: number) => any;\n\nexport function clampIndex<T extends RangeLike>(source: T, index: number): number;\nexport function clampIndex<T extends RangeLike, N extends ClampThen<T> = ClampThen<T>>(source: T, index: number, then: N): ReturnType<N>;\n/** @ignore */\nexport function clampIndex<T extends RangeLike, N extends ClampThen<T> = ClampThen<T>>(source: T, index: number, then?: N) {\n    const length = source.length;\n    const adjust = index > -1 ? index : (length + (index % length));\n    return then ? then(source, adjust) : adjust;\n}\n\n/** @ignore */\nlet tmp: number;\nexport function clampRange<T extends RangeLike>(source: T, begin: number | undefined, end: number | undefined): [number, number];\nexport function clampRange<T extends RangeLike, N extends ClampRangeThen<T> = ClampRangeThen<T>>(source: T, begin: number | undefined, end: number | undefined, then: N): ReturnType<N>;\n/** @ignore */\nexport function clampRange<T extends RangeLike, N extends ClampRangeThen<T> = ClampRangeThen<T>>(source: T, begin: number | undefined, end: number | undefined, then?: N) {\n\n    // Adjust args similar to Array.prototype.slice. Normalize begin/end to\n    // clamp between 0 and length, and wrap around on negative indices, e.g.\n    // slice(-1, 5) or slice(5, -1)\n    let { length: len = 0 } = source;\n    let lhs = typeof begin !== 'number' ? 0 : begin;\n    let rhs = typeof end !== 'number' ? len : end;\n    // wrap around on negative start/end positions\n    (lhs < 0) && (lhs = ((lhs % len) + len) % len);\n    (rhs < 0) && (rhs = ((rhs % len) + len) % len);\n    // ensure lhs <= rhs\n    (rhs < lhs) && (tmp = lhs, lhs = rhs, rhs = tmp);\n     // ensure rhs <= length\n    (rhs > len) && (rhs = len);\n\n    return then ? then(source, lhs, rhs) : [lhs, rhs];\n}\n\nconst big0 = BigIntAvailable ? BigInt(0) : 0;\nconst isNaNFast = (value: any) => value !== value;\n\n/** @ignore */\nexport function createElementComparator(search: any) {\n    let typeofSearch = typeof search;\n    // Compare primitives\n    if (typeofSearch !== 'object' || search === null) {\n        // Compare NaN\n        if (isNaNFast(search)) {\n            return isNaNFast;\n        }\n        return typeofSearch !== 'bigint'\n            ? (value: any) => value === search\n            : (value: any) => (big0 + value) === search;\n    }\n    // Compare Dates\n    if (search instanceof Date) {\n        const valueOfSearch = search.valueOf();\n        return (value: any) => value instanceof Date ? (value.valueOf() === valueOfSearch) : false;\n    }\n    // Compare TypedArrays\n    if (ArrayBuffer.isView(search)) {\n        return (value: any) => value ? compareArrayLike(search, value) : false;\n    }\n    // Compare Maps and Rows\n    if (search instanceof Map) { return creatMapComparator(search); }\n    // Compare Array-likes\n    if (Array.isArray(search)) { return createArrayLikeComparator(search); }\n    // Compare Vectors\n    if (search instanceof Vector) { return createVectorComparator(search); }\n    // Compare non-empty Objects\n    return createObjectComparator(search);\n}\n\n/** @ignore */\nfunction createArrayLikeComparator(lhs: ArrayLike<any>) {\n    const comparators = [] as ((x: any) => boolean)[];\n    for (let i = -1, n = lhs.length; ++i < n;) {\n        comparators[i] = createElementComparator(lhs[i]);\n    }\n    return createSubElementsComparator(comparators);\n}\n\n/** @ignore */\nfunction creatMapComparator(lhs: Map<any, any>) {\n    let i = -1;\n    const comparators = [] as ((x: any) => boolean)[];\n    lhs.forEach((v) => comparators[++i] = createElementComparator(v));\n    return createSubElementsComparator(comparators);\n}\n\n/** @ignore */\nfunction createVectorComparator(lhs: Vector<any>) {\n    const comparators = [] as ((x: any) => boolean)[];\n    for (let i = -1, n = lhs.length; ++i < n;) {\n        comparators[i] = createElementComparator(lhs.get(i));\n    }\n    return createSubElementsComparator(comparators);\n}\n\n/** @ignore */\nfunction createObjectComparator(lhs: any) {\n    const keys = Object.keys(lhs);\n    // Only compare non-empty Objects\n    if (keys.length === 0) { return () => false; }\n    const comparators = [] as ((x: any) => boolean)[];\n    for (let i = -1, n = keys.length; ++i < n;) {\n        comparators[i] = createElementComparator(lhs[keys[i]]);\n    }\n    return createSubElementsComparator(comparators, keys);\n}\n\nfunction createSubElementsComparator(comparators: ((x: any) => boolean)[], keys?: Iterable<string>) {\n    return (rhs: any) => {\n        if (!rhs || typeof rhs !== 'object') {\n            return false;\n        }\n        switch (rhs.constructor) {\n            case Array: return compareArray(comparators, rhs);\n            case Map:\n            case MapRow:\n            case StructRow:\n                return compareObject(comparators, rhs, rhs.keys());\n            case Object:\n            case undefined: // support `Object.create(null)` objects\n                return compareObject(comparators, rhs, keys || Object.keys(rhs));\n        }\n        return rhs instanceof Vector ? compareVector(comparators, rhs) : false;\n    };\n}\n\nfunction compareArray(comparators: ((x: any) => boolean)[], arr: any[]) {\n    const n = comparators.length;\n    if (arr.length !== n) { return false; }\n    for (let i = -1; ++i < n;) {\n        if (!(comparators[i](arr[i]))) { return false; }\n    }\n    return true;\n}\n\nfunction compareVector(comparators: ((x: any) => boolean)[], vec: Vector) {\n    const n = comparators.length;\n    if (vec.length !== n) { return false; }\n    for (let i = -1; ++i < n;) {\n        if (!(comparators[i](vec.get(i)))) { return false; }\n    }\n    return true;\n}\n\nfunction compareObject(comparators: ((x: any) => boolean)[], obj: Map<any, any>, keys: Iterable<string>) {\n\n    const lKeyItr = keys[Symbol.iterator]();\n    const rKeyItr = obj instanceof Map ? obj.keys() : Object.keys(obj)[Symbol.iterator]();\n    const rValItr = obj instanceof Map ? obj.values() : Object.values(obj)[Symbol.iterator]();\n\n    let i = 0;\n    let n = comparators.length;\n    let rVal = rValItr.next();\n    let lKey = lKeyItr.next();\n    let rKey = rKeyItr.next();\n\n    for (; i < n && !lKey.done && !rKey.done && !rVal.done;\n         ++i, lKey = lKeyItr.next(), rKey = rKeyItr.next(), rVal = rValItr.next()) {\n        if (lKey.value !== rKey.value || !comparators[i](rVal.value)) {\n            break;\n        }\n    }\n    if (i === n && lKey.done && rKey.done && rVal.done) {\n        return true;\n    }\n    lKeyItr.return && lKeyItr.return();\n    rKeyItr.return && rKeyItr.return();\n    rValItr.return && rValItr.return();\n    return false;\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Field } from '../schema';\nimport { clampRange } from '../util/vector';\nimport { DataType, Dictionary } from '../type';\nimport { selectChunkArgs } from '../util/args';\nimport { DictionaryVector } from './dictionary';\nimport { AbstractVector, Vector } from '../vector';\nimport { Clonable, Sliceable, Applicative } from '../vector';\n\n/** @ignore */\ntype ChunkedDict<T extends DataType> = T extends Dictionary ? Vector<T['dictionary']> : null | never;\n/** @ignore */\ntype ChunkedKeys<T extends DataType> = T extends Dictionary ? Vector<T['indices']> | Chunked<T['indices']> : null | never;\n\n/** @ignore */\nexport type SearchContinuation<T extends Chunked> = (column: T, chunkIndex: number, valueIndex: number) => any;\n\n/** @ignore */\nexport class Chunked<T extends DataType = any>\n    extends AbstractVector<T>\n    implements Clonable<Chunked<T>>,\n               Sliceable<Chunked<T>>,\n               Applicative<T, Chunked<T>> {\n\n    /** @nocollapse */\n    public static flatten<T extends DataType>(...vectors: (Vector<T> | Vector<T>[])[]) {\n        return selectChunkArgs<Vector<T>>(Vector, vectors);\n    }\n\n    /** @nocollapse */\n    public static concat<T extends DataType>(...vectors: (Vector<T> | Vector<T>[])[]) {\n        const chunks = Chunked.flatten<T>(...vectors);\n        return new Chunked<T>(chunks[0].type, chunks);\n    }\n\n    protected _type: T;\n    protected _length: number;\n    protected _chunks: Vector<T>[];\n    protected _numChildren: number;\n    protected _children?: Chunked[];\n    protected _nullCount: number = -1;\n    protected _chunkOffsets: Uint32Array;\n\n    constructor(type: T, chunks: Vector<T>[] = [], offsets = calculateOffsets(chunks)) {\n        super();\n        this._type = type;\n        this._chunks = chunks;\n        this._chunkOffsets = offsets;\n        this._length = offsets[offsets.length - 1];\n        this._numChildren = (this._type.children || []).length;\n    }\n\n    public get type() { return this._type; }\n    public get length() { return this._length; }\n    public get chunks() { return this._chunks; }\n    public get typeId(): T['TType'] { return this._type.typeId; }\n    public get VectorName() { return `Chunked<${this._type}>`; }\n    public get data(): Data<T> {\n        return this._chunks[0] ? this._chunks[0].data : <any> null;\n    }\n\n    public get ArrayType() { return this._type.ArrayType; }\n    public get numChildren() { return this._numChildren; }\n    public get stride() { return this._chunks[0] ? this._chunks[0].stride : 1; }\n    public get byteLength(): number {\n        return this._chunks.reduce((byteLength, chunk) => byteLength + chunk.byteLength, 0);\n    }\n    public get nullCount() {\n        let nullCount = this._nullCount;\n        if (nullCount < 0) {\n            this._nullCount = nullCount = this._chunks.reduce((x, { nullCount }) => x + nullCount, 0);\n        }\n        return nullCount;\n    }\n\n    protected _indices?: ChunkedKeys<T>;\n    public get indices(): ChunkedKeys<T> | null {\n        if (DataType.isDictionary(this._type)) {\n            if (!this._indices) {\n                const chunks = (<any> this._chunks) as DictionaryVector<T, any>[];\n                this._indices = (chunks.length === 1\n                    ? chunks[0].indices\n                    : Chunked.concat(...chunks.map((x) => x.indices))) as ChunkedKeys<T>;\n            }\n            return this._indices;\n        }\n        return null;\n    }\n    public get dictionary(): ChunkedDict<T> | null {\n        if (DataType.isDictionary(this._type)) {\n            return this._chunks[this._chunks.length - 1].data.dictionary as ChunkedDict<T>;\n        }\n        return null;\n    }\n\n    public *[Symbol.iterator](): IterableIterator<T['TValue'] | null> {\n        for (const chunk of this._chunks) {\n            yield* chunk;\n        }\n    }\n\n    public clone(chunks = this._chunks): Chunked<T> {\n        return new Chunked(this._type, chunks);\n    }\n\n    public concat(...others: Vector<T>[]): Chunked<T> {\n        return this.clone(Chunked.flatten(this, ...others));\n    }\n\n    public slice(begin?: number, end?: number): Chunked<T> {\n        return clampRange(this, begin, end, this._sliceInternal);\n    }\n\n    public getChildAt<R extends DataType = any>(index: number): Chunked<R> | null {\n\n        if (index < 0 || index >= this._numChildren) { return null; }\n\n        let columns = this._children || (this._children = []);\n        let child: Chunked<R>, field: Field<R>, chunks: Vector<R>[];\n\n        if (child = columns[index]) { return child; }\n        if (field = ((this._type.children || [])[index] as Field<R>)) {\n            chunks = this._chunks\n                .map((vector) => vector.getChildAt<R>(index))\n                .filter((vec): vec is Vector<R> => vec != null);\n            if (chunks.length > 0) {\n                return (columns[index] = new Chunked<R>(field.type, chunks));\n            }\n        }\n\n        return null;\n    }\n\n    public search(index: number): [number, number] | null;\n    public search<N extends SearchContinuation<Chunked<T>>>(index: number, then?: N): ReturnType<N>;\n    public search<N extends SearchContinuation<Chunked<T>>>(index: number, then?: N) {\n        let idx = index;\n        // binary search to find the child vector and value indices\n        let offsets = this._chunkOffsets, rhs = offsets.length - 1;\n        // return early if out of bounds, or if there's just one child\n        if (idx < 0            ) { return null; }\n        if (idx >= offsets[rhs]) { return null; }\n        if (rhs <= 1           ) { return then ? then(this, 0, idx) : [0, idx]; }\n        let lhs = 0, pos = 0, mid = 0;\n        do {\n            if (lhs + 1 === rhs) {\n                return then ? then(this, lhs, idx - pos) : [lhs, idx - pos];\n            }\n            mid = lhs + ((rhs - lhs) / 2) | 0;\n            idx >= offsets[mid] ? (lhs = mid) : (rhs = mid);\n        } while (idx < offsets[rhs] && idx >= (pos = offsets[lhs]));\n        return null;\n    }\n\n    public isValid(index: number): boolean {\n        return !!this.search(index, this.isValidInternal);\n    }\n\n    public get(index: number): T['TValue'] | null {\n        return this.search(index, this.getInternal);\n    }\n\n    public set(index: number, value: T['TValue'] | null): void {\n        this.search(index, ({ chunks }, i, j) => chunks[i].set(j, value));\n    }\n\n    public indexOf(element: T['TValue'], offset?: number): number {\n        if (offset && typeof offset === 'number') {\n            return this.search(offset, (self, i, j) => this.indexOfInternal(self, i, j, element))!;\n        }\n        return this.indexOfInternal(this, 0, Math.max(0, offset || 0), element);\n    }\n\n    public toArray(): T['TArray'] {\n        const { chunks } = this;\n        const n = chunks.length;\n        let ArrayType: any = this._type.ArrayType;\n        if (n <= 0) { return new ArrayType(0); }\n        if (n <= 1) { return chunks[0].toArray(); }\n        let len = 0, src = new Array(n);\n        for (let i = -1; ++i < n;) {\n            len += (src[i] = chunks[i].toArray()).length;\n        }\n        if (ArrayType !== src[0].constructor) {\n            ArrayType = src[0].constructor;\n        }\n        let dst = new ArrayType(len);\n        let set: any = ArrayType === Array ? arraySet : typedSet;\n        for (let i = -1, idx = 0; ++i < n;) {\n            idx = set(src[i], dst, idx);\n        }\n        return dst;\n    }\n\n    protected getInternal({ _chunks }: Chunked<T>, i: number, j: number) { return _chunks[i].get(j); }\n    protected isValidInternal({ _chunks }: Chunked<T>, i: number, j: number) { return _chunks[i].isValid(j); }\n    protected indexOfInternal({ _chunks }: Chunked<T>, chunkIndex: number, fromIndex: number, element: T['TValue']) {\n        let i = chunkIndex - 1, n = _chunks.length;\n        let start = fromIndex, offset = 0, found = -1;\n        while (++i < n) {\n            if (~(found = _chunks[i].indexOf(element, start))) {\n                return offset + found;\n            }\n            start = 0;\n            offset += _chunks[i].length;\n        }\n        return -1;\n    }\n\n    protected _sliceInternal(self: Chunked<T>, begin: number, end: number) {\n        const slices: Vector<T>[] = [];\n        const { chunks, _chunkOffsets: chunkOffsets } = self;\n        for (let i = -1, n = chunks.length; ++i < n;) {\n            const chunk = chunks[i];\n            const chunkLength = chunk.length;\n            const chunkOffset = chunkOffsets[i];\n            // If the child is to the right of the slice boundary, we can stop\n            if (chunkOffset >= end) { break; }\n            // If the child is to the left of of the slice boundary, exclude\n            if (begin >= chunkOffset + chunkLength) { continue; }\n            // If the child is between both left and right boundaries, include w/o slicing\n            if (chunkOffset >= begin && (chunkOffset + chunkLength) <= end) {\n                slices.push(chunk);\n                continue;\n            }\n            // If the child overlaps one of the slice boundaries, include that slice\n            const from = Math.max(0, begin - chunkOffset);\n            const to = Math.min(end - chunkOffset, chunkLength);\n            slices.push(chunk.slice(from, to) as Vector<T>);\n        }\n        return self.clone(slices);\n    }\n}\n\n/** @ignore */\nfunction calculateOffsets<T extends DataType>(vectors: Vector<T>[]) {\n    let offsets = new Uint32Array((vectors || []).length + 1);\n    let offset = offsets[0] = 0, length = offsets.length;\n    for (let index = 0; ++index < length;) {\n        offsets[index] = (offset += vectors[index - 1].length);\n    }\n    return offsets;\n}\n\n/** @ignore */\nconst typedSet = (src: TypedArray, dst: TypedArray, offset: number) => {\n    dst.set(src, offset);\n    return (offset + src.length);\n};\n\n/** @ignore */\nconst arraySet = (src: any[], dst: any[], offset: number) => {\n    let idx = offset;\n    for (let i = -1, n = src.length; ++i < n;) {\n        dst[idx++] = src[i];\n    }\n    return idx;\n};\n\n/** @ignore */\ninterface TypedArray extends ArrayBufferView {\n    readonly length: number;\n    readonly [n: number]: number;\n    set(array: ArrayLike<number>, offset?: number): void;\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from './data';\nimport { Field } from './schema';\nimport { DataType } from './type';\nimport { Vector } from './vector';\nimport { Clonable, Sliceable, Applicative } from './vector';\nimport { VectorCtorArgs, VectorType as V } from './interfaces';\nimport { Chunked, SearchContinuation } from './vector/chunked';\n\nexport interface Column<T extends DataType = any> {\n    typeId: T['TType'];\n    concat(...others: Vector<T>[]): Column<T>;\n    slice(begin?: number, end?: number): Column<T>;\n    clone(chunks?: Vector<T>[], offsets?: Uint32Array): Column<T>;\n}\n\nexport class Column<T extends DataType = any>\n    extends Chunked<T>\n    implements Clonable<Column<T>>,\n               Sliceable<Column<T>>,\n               Applicative<T, Column<T>> {\n\n    public static new<T extends DataType>(field: string | Field<T>, ...chunks: (Vector<T> | Vector<T>[])[]): Column<T>;\n    public static new<T extends DataType>(field: string | Field<T>, data: Data<T>, ...args: VectorCtorArgs<V<T>>): Column<T>;\n    /** @nocollapse */\n    public static new<T extends DataType = any>(field: string | Field<T>, data: Data<T> | Vector<T> | (Data<T> | Vector<T>)[], ...rest: any[]) {\n\n        const chunks = Chunked.flatten<T>(\n            Array.isArray(data) ? [...data, ...rest] :\n            data instanceof Vector ? [data, ...rest] :\n            [Vector.new(data, ...rest)]\n        );\n\n        if (typeof field === 'string') {\n            const type = chunks[0].data.type;\n            field = new Field(field, type, true);\n        } else if (!field.nullable && chunks.some(({ nullCount }) => nullCount > 0)) {\n            field = field.clone({ nullable: true });\n        }\n        return new Column(field, chunks);\n    }\n\n    constructor(field: Field<T>, vectors: Vector<T>[] = [], offsets?: Uint32Array) {\n        vectors = Chunked.flatten<T>(...vectors);\n        super(field.type, vectors, offsets);\n        this._field = field;\n        if (vectors.length === 1 && !(this instanceof SingleChunkColumn)) {\n            return new SingleChunkColumn(field, vectors[0], this._chunkOffsets);\n        }\n    }\n\n    protected _field: Field<T>;\n    protected _children?: Column[];\n\n    public get field() { return this._field; }\n    public get name() { return this._field.name; }\n    public get nullable() { return this._field.nullable; }\n    public get metadata() { return this._field.metadata; }\n\n    public clone(chunks = this._chunks) {\n        return new Column(this._field, chunks);\n    }\n\n    public getChildAt<R extends DataType = any>(index: number): Column<R> | null {\n\n        if (index < 0 || index >= this.numChildren) { return null; }\n\n        let columns = this._children || (this._children = []);\n        let column: Column<R>, field: Field<R>, chunks: Vector<R>[];\n\n        if (column = columns[index]) { return column; }\n        if (field = ((this.type.children || [])[index] as Field<R>)) {\n            chunks = this._chunks\n                .map((vector) => vector.getChildAt<R>(index))\n                .filter((vec): vec is Vector<R> => vec != null);\n            if (chunks.length > 0) {\n                return (columns[index] = new Column<R>(field, chunks));\n            }\n        }\n\n        return null;\n    }\n}\n\n/** @ignore */\nclass SingleChunkColumn<T extends DataType = any> extends Column<T> {\n    protected _chunk: Vector<T>;\n    constructor(field: Field<T>, vector: Vector<T>, offsets?: Uint32Array) {\n        super(field, [vector], offsets);\n        this._chunk = vector;\n    }\n    public search(index: number): [number, number] | null;\n    public search<N extends SearchContinuation<Chunked<T>>>(index: number, then?: N): ReturnType<N>;\n    public search<N extends SearchContinuation<Chunked<T>>>(index: number, then?: N) {\n        return then ? then(this, 0, index) : [0, index];\n    }\n    public isValid(index: number): boolean {\n        return this._chunk.isValid(index);\n    }\n    public get(index: number): T['TValue'] | null {\n        return this._chunk.get(index);\n    }\n    public set(index: number, value: T['TValue'] | null): void {\n        this._chunk.set(index, value);\n    }\n    public indexOf(element: T['TValue'], offset?: number): number {\n        return this._chunk.indexOf(element, offset);\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Field } from '../schema';\nimport { Column } from '../column';\nimport { Vector } from '../vector';\nimport { DataType } from '../type';\nimport { Chunked } from '../vector/chunked';\n\ntype RecordBatchCtor = typeof import('../recordbatch').RecordBatch;\n\nconst isArray = Array.isArray;\n\n/** @ignore */\nexport const selectArgs = <T>(Ctor: any, vals: any[]) => _selectArgs(Ctor, vals, [], 0) as T[];\n/** @ignore */\nexport const selectColumnArgs = <T extends { [key: string]: DataType }>(args: any[]) => {\n    const [fields, values] = _selectFieldArgs<T>(args, [[], []]);\n    return values.map((x, i) =>\n        x instanceof Column ? Column.new(x.field.clone(fields[i]), x) :\n        x instanceof Vector ? Column.new(fields[i], x) as Column<T[keyof T]> :\n                              Column.new(fields[i], [] as Vector<T[keyof T]>[]));\n};\n\n/** @ignore */\nexport const selectFieldArgs = <T extends { [key: string]: DataType }>(args: any[]) => _selectFieldArgs<T>(args, [[], []]);\n/** @ignore */\nexport const selectChunkArgs = <T>(Ctor: any, vals: any[]) => _selectChunkArgs(Ctor, vals, [], 0) as T[];\n/** @ignore */\nexport const selectVectorChildrenArgs = <T extends Vector>(Ctor: RecordBatchCtor, vals: any[]) => _selectVectorChildrenArgs(Ctor, vals, [], 0) as T[];\n/** @ignore */\nexport const selectColumnChildrenArgs = <T extends Column>(Ctor: RecordBatchCtor, vals: any[]) => _selectColumnChildrenArgs(Ctor, vals, [], 0) as T[];\n\n/** @ignore */\nfunction _selectArgs<T>(Ctor: any, vals: any[], res: T[], idx: number) {\n    let value: any, j = idx;\n    let i = -1, n = vals.length;\n    while (++i < n) {\n        if (isArray(value = vals[i])) {\n            j = _selectArgs(Ctor, value, res, j).length;\n        } else if (value instanceof Ctor) { res[j++] = value; }\n    }\n    return res;\n}\n\n/** @ignore */\nfunction _selectChunkArgs<T>(Ctor: any, vals: any[], res: T[], idx: number) {\n    let value: any, j = idx;\n    let i = -1, n = vals.length;\n    while (++i < n) {\n        if (isArray(value = vals[i])) {\n            j = _selectChunkArgs(Ctor, value, res, j).length;\n        } else if (value instanceof Chunked) {\n            j = _selectChunkArgs(Ctor, value.chunks, res, j).length;\n        } else if (value instanceof Ctor) { res[j++] = value; }\n    }\n    return res;\n}\n\n/** @ignore */\nfunction _selectVectorChildrenArgs<T extends Vector>(Ctor: RecordBatchCtor, vals: any[], res: T[], idx: number) {\n    let value: any, j = idx;\n    let i = -1, n = vals.length;\n    while (++i < n) {\n        if (isArray(value = vals[i])) {\n            j = _selectVectorChildrenArgs(Ctor, value, res, j).length;\n        } else if (value instanceof Ctor) {\n            j = _selectArgs(Vector, value.schema.fields.map((_, i) => value.getChildAt(i)!), res, j).length;\n        } else if (value instanceof Vector) { res[j++] = value as T; }\n    }\n    return res;\n}\n\n/** @ignore */\nfunction _selectColumnChildrenArgs<T extends Column>(Ctor: RecordBatchCtor, vals: any[], res: T[], idx: number) {\n    let value: any, j = idx;\n    let i = -1, n = vals.length;\n    while (++i < n) {\n        if (isArray(value = vals[i])) {\n            j = _selectColumnChildrenArgs(Ctor, value, res, j).length;\n        } else if (value instanceof Ctor) {\n            j = _selectArgs(Column, value.schema.fields.map((f, i) => Column.new(f, value.getChildAt(i)!)), res, j).length;\n        } else if (value instanceof Column) { res[j++] = value as T; }\n    }\n    return res;\n}\n\n/** @ignore */\nconst toKeysAndValues = (xs: [any[], any[]], [k, v]: [any, any], i: number) => (xs[0][i] = k, xs[1][i] = v, xs);\n\n/** @ignore */\nfunction _selectFieldArgs<T extends { [key: string]: DataType }>(vals: any[], ret: [Field<T[keyof T]>[], Vector<T[keyof T]>[]]): [Field<T[keyof T]>[], (T[keyof T] | Vector<T[keyof T]>)[]] {\n    let keys: any[], n: number;\n    switch (n = vals.length) {\n        case 0: return ret;\n        case 1:\n            keys = ret[0];\n            if (!(vals[0])) { return ret; }\n            if (isArray(vals[0])) { return _selectFieldArgs(vals[0], ret); }\n            if (!(vals[0] instanceof Data || vals[0] instanceof Vector || vals[0] instanceof DataType)) {\n                [keys, vals] = Object.entries(vals[0]).reduce(toKeysAndValues, ret);\n            }\n            break;\n        default:\n            !isArray(keys = vals[n - 1])\n                ? (vals = isArray(vals[0]) ? vals[0] : vals, keys = [])\n                : (vals = isArray(vals[0]) ? vals[0] : vals.slice(0, n - 1));\n    }\n\n    let fieldIndex = -1;\n    let valueIndex = -1;\n    let idx = -1, len = vals.length;\n    let field: number | string | Field<T[keyof T]>;\n    let val: Vector<T[keyof T]> | Data<T[keyof T]>;\n    let [fields, values] = ret as [Field<T[keyof T]>[], any[]];\n\n    while (++idx < len) {\n        val = vals[idx];\n        if (val instanceof Column && (values[++valueIndex] = val)) {\n            fields[++fieldIndex] = val.field.clone(keys[idx], val.type, true);\n        } else {\n            ({ [idx]: field = idx } = keys);\n            if (val instanceof DataType && (values[++valueIndex] = val)) {\n                fields[++fieldIndex] = Field.new(field, val as DataType, true) as Field<T[keyof T]>;\n            } else if (val && val.type && (values[++valueIndex] = val)) {\n                val instanceof Data && (values[valueIndex] = val = Vector.new(val) as Vector);\n                fields[++fieldIndex] = Field.new(field, val.type, true) as Field<T[keyof T]>;\n            }\n        }\n    }\n    return ret;\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from './data';\nimport { Vector } from './vector';\nimport { DataType } from './type';\nimport { selectArgs } from './util/args';\nimport { selectFieldArgs } from './util/args';\nimport { instance as comparer } from './visitor/typecomparator';\n\ntype VectorMap = { [key: string]: Vector };\ntype Fields<T extends { [key: string]: DataType }> = (keyof T)[] | Field<T[keyof T]>[];\ntype ChildData<T extends { [key: string]: DataType }> = T[keyof T][] | Data<T[keyof T]>[] | Vector<T[keyof T]>[];\n\nexport class Schema<T extends { [key: string]: DataType } = any> {\n\n    public static from<T extends { [key: string]: DataType } = any>(children: T): Schema<T>;\n    public static from<T extends VectorMap = any>(children: T): Schema<{ [P in keyof T]: T[P]['type'] }>;\n    public static from<T extends { [key: string]: DataType } = any>(children: ChildData<T>, fields?: Fields<T>): Schema<T>;\n    /** @nocollapse */\n    public static from(...args: any[]) {\n        return Schema.new(args[0], args[1]);\n    }\n\n    public static new<T extends { [key: string]: DataType } = any>(children: T): Schema<T>;\n    public static new<T extends VectorMap = any>(children: T): Schema<{ [P in keyof T]: T[P]['type'] }>;\n    public static new<T extends { [key: string]: DataType } = any>(children: ChildData<T>, fields?: Fields<T>): Schema<T>;\n    /** @nocollapse */\n    public static new(...args: any[]) {\n        return new Schema(selectFieldArgs(args)[0]);\n    }\n\n    public readonly fields: Field<T[keyof T]>[];\n    public readonly metadata: Map<string, string>;\n    public readonly dictionaries: Map<number, DataType>;\n\n    constructor(fields: Field[] = [],\n                metadata?: Map<string, string> | null,\n                dictionaries?: Map<number, DataType> | null) {\n        this.fields = (fields || []) as Field<T[keyof T]>[];\n        this.metadata = metadata || new Map();\n        if (!dictionaries) {\n            dictionaries = generateDictionaryMap(fields);\n        }\n        this.dictionaries = dictionaries;\n    }\n    public get [Symbol.toStringTag]() { return 'Schema'; }\n    public toString() {\n        return `Schema<{ ${this.fields.map((f, i) => `${i}: ${f}`).join(', ')} }>`;\n    }\n\n    public compareTo(other?: Schema | null): other is Schema<T> {\n        return comparer.compareSchemas(this, other);\n    }\n\n    public select<K extends keyof T = any>(...columnNames: K[]) {\n        const names = columnNames.reduce((xs, x) => (xs[x] = true) && xs, Object.create(null));\n        return new Schema<{ [P in K]: T[P] }>(this.fields.filter((f) => names[f.name]), this.metadata);\n    }\n    public selectAt<K extends T[keyof T] = any>(...columnIndices: number[]) {\n        return new Schema<{ [key: string]: K }>(columnIndices.map((i) => this.fields[i]).filter(Boolean), this.metadata);\n    }\n\n    public assign<R extends { [key: string]: DataType } = any>(schema: Schema<R>): Schema<T & R>;\n    public assign<R extends { [key: string]: DataType } = any>(...fields: (Field<R[keyof R]> | Field<R[keyof R]>[])[]): Schema<T & R>;\n    public assign<R extends { [key: string]: DataType } = any>(...args: (Schema<R> | Field<R[keyof R]> | Field<R[keyof R]>[])[]) {\n\n        const other = args[0] instanceof Schema ? args[0] as Schema<R>\n            : new Schema<R>(selectArgs<Field<R[keyof R]>>(Field, args));\n\n        const curFields = [...this.fields] as Field[];\n        const metadata = mergeMaps(mergeMaps(new Map(), this.metadata), other.metadata);\n        const newFields = other.fields.filter((f2) => {\n            const i = curFields.findIndex((f) => f.name === f2.name);\n            return ~i ? (curFields[i] = f2.clone({\n                metadata: mergeMaps(mergeMaps(new Map(), curFields[i].metadata), f2.metadata)\n            })) && false : true;\n        }) as Field[];\n\n        const newDictionaries = generateDictionaryMap(newFields, new Map());\n\n        return new Schema<T & R>(\n            [...curFields, ...newFields], metadata,\n            new Map([...this.dictionaries, ...newDictionaries])\n        );\n    }\n}\n\nexport class Field<T extends DataType = any> {\n\n    public static new<T extends DataType = any>(props: { name: string | number, type: T, nullable?: boolean, metadata?: Map<string, string> | null }): Field<T>;\n    public static new<T extends DataType = any>(name: string | number | Field<T>, type: T, nullable?: boolean, metadata?: Map<string, string> | null): Field<T>;\n    /** @nocollapse */\n    public static new<T extends DataType = any>(...args: any[]) {\n        let [name, type, nullable, metadata] = args;\n        if (args[0] && typeof args[0] === 'object') {\n            ({ name } = args[0]);\n            (type === undefined) && (type = args[0].type);\n            (nullable === undefined) && (nullable = args[0].nullable);\n            (metadata === undefined) && (metadata = args[0].metadata);\n        }\n        return new Field<T>(`${name}`, type, nullable, metadata);\n    }\n\n    public readonly type: T;\n    public readonly name: string;\n    public readonly nullable: boolean;\n    public readonly metadata: Map<string, string>;\n\n    constructor(name: string, type: T, nullable = false, metadata?: Map<string, string> | null) {\n        this.name = name;\n        this.type = type;\n        this.nullable = nullable;\n        this.metadata = metadata || new Map();\n    }\n\n    public get typeId() { return this.type.typeId; }\n    public get [Symbol.toStringTag]() { return 'Field'; }\n    public toString() { return `${this.name}: ${this.type}`; }\n    public compareTo(other?: Field | null): other is Field<T> {\n        return comparer.compareField(this, other);\n    }\n    public clone<R extends DataType = T>(props: { name?: string | number, type?: R, nullable?: boolean, metadata?: Map<string, string> | null }): Field<R>;\n    public clone<R extends DataType = T>(name?: string | number | Field<T>, type?: R, nullable?: boolean, metadata?: Map<string, string> | null): Field<R>;\n    public clone<R extends DataType = T>(...args: any[]) {\n        let [name, type, nullable, metadata] = args;\n        (!args[0] || typeof args[0] !== 'object')\n            ? ([name = this.name, type = this.type, nullable = this.nullable, metadata = this.metadata] = args)\n            : ({name = this.name, type = this.type, nullable = this.nullable, metadata = this.metadata} = args[0]);\n        return Field.new<R>(name, type, nullable, metadata);\n    }\n}\n\n/** @ignore */\nfunction mergeMaps<TKey, TVal>(m1?: Map<TKey, TVal> | null, m2?: Map<TKey, TVal> | null): Map<TKey, TVal> {\n    return new Map([...(m1 || new Map()), ...(m2 || new Map())]);\n}\n\n/** @ignore */\nfunction generateDictionaryMap(fields: Field[], dictionaries = new Map<number, DataType>()): Map<number, DataType> {\n\n    for (let i = -1, n = fields.length; ++i < n;) {\n        const field = fields[i];\n        const type = field.type;\n        if (DataType.isDictionary(type)) {\n            if (!dictionaries.has(type.id)) {\n                dictionaries.set(type.id, type.dictionary);\n            } else if (dictionaries.get(type.id) !== type.dictionary) {\n                throw new Error(`Cannot create Schema containing two different dictionaries with the same Id`);\n            }\n        }\n        if (type.children && type.children.length > 0) {\n            generateDictionaryMap(type.children, dictionaries);\n        }\n    }\n\n    return dictionaries;\n}\n\n// Add these here so they're picked up by the externs creator\n// in the build, and closure-compiler doesn't minify them away\n(Schema.prototype as any).fields = null;\n(Schema.prototype as any).metadata = null;\n(Schema.prototype as any).dictionaries = null;\n\n(Field.prototype as any).type = null;\n(Field.prototype as any).name = null;\n(Field.prototype as any).nullable = null;\n(Field.prototype as any).metadata = null;\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Run } from './run';\nimport { Field } from '../schema';\nimport { DataType, List } from '../type';\nimport { OffsetsBufferBuilder } from './buffer';\nimport { Builder, BuilderOptions, VariableWidthBuilder } from '../builder';\n\n/** @ignore */\nexport class ListBuilder<T extends DataType = any, TNull = any> extends VariableWidthBuilder<List<T>, TNull> {\n    protected _run = new Run<T, TNull>();\n    protected _offsets: OffsetsBufferBuilder;\n    constructor(opts: BuilderOptions<List<T>, TNull>) {\n        super(opts);\n        this._offsets = new OffsetsBufferBuilder();\n    }\n    public addChild(child: Builder<T>, name = '0') {\n        if (this.numChildren > 0) {\n            throw new Error('ListBuilder can only have one child.');\n        }\n        this.children[this.numChildren] = child;\n        this.type = new List(new Field(name, child.type, true));\n        return this.numChildren - 1;\n    }\n    public clear() {\n        this._run.clear();\n        return super.clear();\n    }\n    protected _flushPending(pending: Map<number, T['TValue'] | undefined>) {\n        const run = this._run;\n        const offsets = this._offsets;\n        const setValue = this._setValue;\n        let index = 0, value: Uint8Array | undefined;\n        for ([index, value] of pending) {\n            if (value === undefined) {\n                offsets.set(index, 0);\n            } else {\n                offsets.set(index, value.length);\n                setValue(this, index, run.bind(value));\n            }\n        }\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Run } from './run';\nimport { Field } from '../schema';\nimport { Builder } from '../builder';\nimport { DataType, FixedSizeList } from '../type';\n\n/** @ignore */\nexport class FixedSizeListBuilder<T extends DataType = any, TNull = any> extends Builder<FixedSizeList<T>, TNull> {\n    protected _run = new Run<T, TNull>();\n    public setValue(index: number, value: T['TValue']) {\n        super.setValue(index, this._run.bind(value));\n    }\n    public addChild(child: Builder<T>, name = '0') {\n        if (this.numChildren > 0) {\n            throw new Error('FixedSizeListBuilder can only have one child.');\n        }\n        const childIndex = this.children.push(child);\n        this.type = new FixedSizeList(this.type.listSize, new Field(name, child.type, true));\n        return childIndex;\n    }\n    public clear() {\n        this._run.clear();\n        return super.clear();\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Field } from '../schema';\nimport { DataType, Map_, Struct } from '../type';\nimport { Builder, VariableWidthBuilder } from '../builder';\n\n/** @ignore */ type MapValue<K extends DataType = any, V extends DataType = any> = Map_<K, V>['TValue'];\n/** @ignore */ type MapValues<K extends DataType = any, V extends DataType = any> = Map<number, MapValue<K, V> | undefined>;\n/** @ignore */ type MapValueExt<K extends DataType = any, V extends DataType = any> = MapValue<K, V> | { [key: string]: V } | { [key: number]: V } ;\n\n/** @ignore */\nexport class MapBuilder<K extends DataType = any, V extends DataType = any, TNull = any> extends VariableWidthBuilder<Map_<K, V>, TNull> {\n\n    protected _pending: MapValues<K, V> | undefined;\n    public set(index: number, value: MapValueExt<K, V> | TNull) {\n        return super.set(index, value as MapValue<K, V> | TNull);\n    }\n\n    public setValue(index: number, value: MapValueExt<K, V>) {\n        value = value instanceof Map ? value : new Map(Object.entries(value));\n        const pending = this._pending || (this._pending = new Map() as MapValues<K, V>);\n        const current = pending.get(index);\n        current && (this._pendingLength -= current.size);\n        this._pendingLength += value.size;\n        pending.set(index, value);\n    }\n\n    public addChild(child: Builder<Struct<{ key: K, value: V }>>, name = `${this.numChildren}`) {\n        if (this.numChildren > 0) {\n            throw new Error('ListBuilder can only have one child.');\n        }\n        this.children[this.numChildren] = child;\n        this.type = new Map_<K, V>(new Field(name, child.type, true), this.type.keysSorted);\n        return this.numChildren - 1;\n    }\n\n    protected _flushPending(pending: MapValues<K, V>) {\n        const offsets = this._offsets;\n        const setValue = this._setValue;\n        pending.forEach((value, index) => {\n            if (value === undefined) {\n                offsets.set(index, 0);\n            } else {\n                offsets.set(index, value.size);\n                setValue(this, index, value);\n            }\n        });\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Field } from '../schema';\nimport { Builder } from '../builder';\nimport { DataType, Struct } from '../type';\n\n/** @ignore */\nexport class StructBuilder<T extends { [key: string]: DataType } = any, TNull = any> extends Builder<Struct<T>, TNull> {\n    public addChild(child: Builder, name = `${this.numChildren}`) {\n        const childIndex = this.children.push(child);\n        this.type = new Struct([...this.type.children, new Field(name, child.type, true)]);\n        return childIndex;\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Field } from '../schema';\nimport { DataBufferBuilder } from './buffer';\nimport { Builder, BuilderOptions } from '../builder';\nimport { Union, SparseUnion, DenseUnion } from '../type';\n\nexport interface UnionBuilderOptions<T extends Union = any, TNull = any> extends BuilderOptions<T, TNull> {\n    valueToChildTypeId?: (builder: UnionBuilder<T, TNull>, value: any, offset: number) => number;\n}\n\n/** @ignore */\nexport abstract class UnionBuilder<T extends Union, TNull = any> extends Builder<T, TNull> {\n\n    protected _typeIds: DataBufferBuilder<Int8Array>;\n\n    constructor(options: UnionBuilderOptions<T, TNull>) {\n        super(options);\n        this._typeIds = new DataBufferBuilder(new Int8Array(0), 1);\n        if (typeof options['valueToChildTypeId'] === 'function') {\n            this._valueToChildTypeId = options['valueToChildTypeId'];\n        }\n    }\n\n    public get typeIdToChildIndex() { return this.type.typeIdToChildIndex; }\n\n    public append(value: T['TValue'] | TNull, childTypeId?: number) {\n        return this.set(this.length, value, childTypeId);\n    }\n\n    public set(index: number, value: T['TValue'] | TNull, childTypeId?: number) {\n        if (childTypeId === undefined) {\n            childTypeId = this._valueToChildTypeId(this, value, index);\n        }\n        if (this.setValid(index, this.isValid(value))) {\n            this.setValue(index, value, childTypeId);\n        }\n        return this;\n    }\n\n    // @ts-ignore\n    public setValue(index: number, value: T['TValue'], childTypeId?: number) {\n        this._typeIds.set(index, childTypeId!);\n        super.setValue(index, value);\n    }\n\n    // @ts-ignore\n    public addChild(child: Builder, name = `${this.children.length}`) {\n        const childTypeId = this.children.push(child);\n        const { type: { children, mode, typeIds } } = this;\n        const fields = [...children, new Field(name, child.type)];\n        this.type = <T> new Union(mode, [...typeIds, childTypeId], fields);\n        return childTypeId;\n    }\n\n    /** @ignore */\n    // @ts-ignore\n    protected _valueToChildTypeId(builder: UnionBuilder<T, TNull>, value: any, offset: number): number {\n        throw new Error(`Cannot map UnionBuilder value to child typeId. \\\nPass the \\`childTypeId\\` as the second argument to unionBuilder.append(), \\\nor supply a \\`valueToChildTypeId\\` function as part of the UnionBuilder constructor options.`);\n    }\n}\n\n/** @ignore */\nexport class SparseUnionBuilder<T extends SparseUnion, TNull = any> extends UnionBuilder<T, TNull> {}\n/** @ignore */\nexport class DenseUnionBuilder<T extends DenseUnion, TNull = any> extends UnionBuilder<T, TNull> {\n\n    protected _offsets: DataBufferBuilder<Int32Array>;\n\n    constructor(options: UnionBuilderOptions<T, TNull>) {\n        super(options);\n        this._offsets = new DataBufferBuilder(new Int32Array(0));\n    }\n\n    /** @ignore */\n    public setValue(index: number, value: T['TValue'], childTypeId?: number) {\n        const childIndex = this.type.typeIdToChildIndex[childTypeId!];\n        this._offsets.set(index, this.getChildAt(childIndex)!.length);\n        return super.setValue(index, value, childTypeId);\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Field } from '../schema';\nimport { Vector } from '../vector';\nimport { Visitor } from '../visitor';\nimport { encodeUtf8 } from '../util/utf8';\nimport { VectorType } from '../interfaces';\nimport { float64ToUint16 } from '../util/math';\nimport { toArrayBufferView } from '../util/buffer';\nimport { Type, UnionMode, Precision, DateUnit, TimeUnit, IntervalUnit } from '../enum';\nimport {\n    DataType, Dictionary,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\n    Float, Float16, Float32, Float64,\n    Int, Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64,\n    Date_, DateDay, DateMillisecond,\n    Interval, IntervalDayTime, IntervalYearMonth,\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\n    Union, DenseUnion, SparseUnion,\n} from '../type';\n\n/** @ignore */\nexport interface SetVisitor extends Visitor {\n    visit<T extends VectorType>(node: T, index: number, value: T['TValue']): void;\n    visitMany<T extends VectorType>(nodes: T[], indices: number[], values: T['TValue'][]): void[];\n    getVisitFn<T extends Type>(node: T): (vector: VectorType<T>, index: number, value: VectorType<T>['TValue']) => void;\n    getVisitFn<T extends DataType>(node: VectorType<T> | Data<T> | T): (vector: VectorType<T>, index: number, value: VectorType<T>['TValue']) => void;\n    visitNull                 <T extends Null>                (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitBool                 <T extends Bool>                (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitInt                  <T extends Int>                 (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitInt8                 <T extends Int8>                (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitInt16                <T extends Int16>               (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitInt32                <T extends Int32>               (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitInt64                <T extends Int64>               (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitUint8                <T extends Uint8>               (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitUint16               <T extends Uint16>              (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitUint32               <T extends Uint32>              (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitUint64               <T extends Uint64>              (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitFloat                <T extends Float>               (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitFloat16              <T extends Float16>             (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitFloat32              <T extends Float32>             (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitFloat64              <T extends Float64>             (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitUtf8                 <T extends Utf8>                (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitBinary               <T extends Binary>              (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitFixedSizeBinary      <T extends FixedSizeBinary>     (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitDate                 <T extends Date_>               (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitDateDay              <T extends DateDay>             (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitDateMillisecond      <T extends DateMillisecond>     (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitTimestamp            <T extends Timestamp>           (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitTimestampSecond      <T extends TimestampSecond>     (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitTimestampMillisecond <T extends TimestampMillisecond>(vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitTimestampMicrosecond <T extends TimestampMicrosecond>(vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitTimestampNanosecond  <T extends TimestampNanosecond> (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitTime                 <T extends Time>                (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitTimeSecond           <T extends TimeSecond>          (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitTimeMillisecond      <T extends TimeMillisecond>     (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitTimeMicrosecond      <T extends TimeMicrosecond>     (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitTimeNanosecond       <T extends TimeNanosecond>      (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitDecimal              <T extends Decimal>             (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitList                 <T extends List>                (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitStruct               <T extends Struct>              (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitUnion                <T extends Union>               (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitDenseUnion           <T extends DenseUnion>          (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitSparseUnion          <T extends SparseUnion>         (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitDictionary           <T extends Dictionary>          (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitInterval             <T extends Interval>            (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitIntervalDayTime      <T extends IntervalDayTime>     (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitIntervalYearMonth    <T extends IntervalYearMonth>   (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitFixedSizeList        <T extends FixedSizeList>       (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitMap                  <T extends Map_>                (vector: VectorType<T>, index: number, value: T['TValue']): void;\n}\n\n/** @ignore */\nexport class SetVisitor extends Visitor {}\n\n/** @ignore */\nconst setEpochMsToDays = (data: Int32Array, index: number, epochMs: number) => { data[index] = (epochMs / 86400000) | 0; };\n/** @ignore */\nconst setEpochMsToMillisecondsLong = (data: Int32Array, index: number, epochMs: number) => {\n    data[index] = (epochMs % 4294967296) | 0;\n    data[index + 1] = (epochMs / 4294967296) | 0;\n};\n/** @ignore */\nconst setEpochMsToMicrosecondsLong = (data: Int32Array, index: number, epochMs: number) => {\n    data[index] = ((epochMs * 1000) % 4294967296) | 0;\n    data[index + 1] = ((epochMs * 1000) / 4294967296) | 0;\n};\n/** @ignore */\nconst setEpochMsToNanosecondsLong = (data: Int32Array, index: number, epochMs: number) => {\n    data[index] = ((epochMs * 1000000) % 4294967296) | 0;\n    data[index + 1] = ((epochMs * 1000000) / 4294967296) | 0;\n};\n\n/** @ignore */\nconst setVariableWidthBytes = (values: Uint8Array, valueOffsets: Int32Array, index: number, value: Uint8Array) => {\n    const { [index]: x, [index + 1]: y } = valueOffsets;\n    if (x != null && y != null) {\n        values.set(value.subarray(0, y - x), x);\n    }\n};\n\n/** @ignore */\nconst setBool = <T extends Bool>({ offset, values }: VectorType<T>, index: number, val: boolean) => {\n    const idx = offset + index;\n    val ? (values[idx >> 3] |=  (1 << (idx % 8)))  // true\n        : (values[idx >> 3] &= ~(1 << (idx % 8))); // false\n\n};\n\n/** @ignore */ type Numeric1X = Int8 | Int16 | Int32 | Uint8 | Uint16 | Uint32 | Float32 | Float64;\n/** @ignore */ type Numeric2X = Int64 | Uint64;\n\n/** @ignore */\nconst setDateDay         = <T extends DateDay>        ({ values         }: VectorType<T>, index: number, value: T['TValue']): void => { setEpochMsToDays(values, index, value.valueOf()); };\n/** @ignore */\nconst setDateMillisecond = <T extends DateMillisecond>({ values         }: VectorType<T>, index: number, value: T['TValue']): void => { setEpochMsToMillisecondsLong(values, index * 2, value.valueOf()); };\n/** @ignore */\nconst setNumeric         = <T extends Numeric1X>      ({ stride, values }: VectorType<T>, index: number, value: T['TValue']): void => { values[stride * index] = value; };\n/** @ignore */\nconst setFloat16         = <T extends Float16>        ({ stride, values }: VectorType<T>, index: number, value: T['TValue']): void => { values[stride * index] = float64ToUint16(value); };\n/** @ignore */\nconst setNumericX2       = <T extends Numeric2X>      (vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    switch (typeof value) {\n        case 'bigint': vector.values64[index] = value; break;\n        case 'number': vector.values[index * vector.stride] = value; break;\n        default:\n            const val = value as T['TArray'];\n            const { stride, ArrayType } = vector;\n            const long = toArrayBufferView<T['TArray']>(ArrayType, val);\n            vector.values.set(long.subarray(0, stride), stride * index);\n    }\n};\n/** @ignore */\nconst setFixedSizeBinary = <T extends FixedSizeBinary>({ stride, values }: VectorType<T>, index: number, value: T['TValue']): void => { values.set(value.subarray(0, stride), stride * index); };\n\n/** @ignore */\nconst setBinary = <T extends Binary>({ values, valueOffsets }: VectorType<T>, index: number, value: T['TValue']) => setVariableWidthBytes(values, valueOffsets, index, value);\n/** @ignore */\nconst setUtf8 = <T extends Utf8>({ values, valueOffsets }: VectorType<T>, index: number, value: T['TValue']) => {\n    setVariableWidthBytes(values, valueOffsets, index, encodeUtf8(value));\n};\n\n/* istanbul ignore next */\n/** @ignore */\nconst setInt = <T extends Int>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    vector.type.bitWidth < 64\n        ? setNumeric(vector as VectorType<Numeric1X>, index, value as Numeric1X['TValue'])\n        : setNumericX2(vector as VectorType<Numeric2X>, index, value as Numeric2X['TValue']);\n};\n\n/* istanbul ignore next */\n/** @ignore */\nconst setFloat = <T extends Float>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    vector.type.precision !== Precision.HALF\n        ? setNumeric(vector as VectorType<Numeric1X>, index, value)\n        : setFloat16(vector as VectorType<Float16>, index, value);\n};\n\n/* istanbul ignore next */\nconst setDate = <T extends Date_> (vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    vector.type.unit === DateUnit.DAY\n        ? setDateDay(vector as VectorType<DateDay>, index, value)\n        : setDateMillisecond(vector as VectorType<DateMillisecond>, index, value);\n};\n\n/** @ignore */\nconst setTimestampSecond      = <T extends TimestampSecond>     ({ values }: VectorType<T>, index: number, value: T['TValue']): void => setEpochMsToMillisecondsLong(values, index * 2, value / 1000);\n/** @ignore */\nconst setTimestampMillisecond = <T extends TimestampMillisecond>({ values }: VectorType<T>, index: number, value: T['TValue']): void => setEpochMsToMillisecondsLong(values, index * 2, value);\n/** @ignore */\nconst setTimestampMicrosecond = <T extends TimestampMicrosecond>({ values }: VectorType<T>, index: number, value: T['TValue']): void => setEpochMsToMicrosecondsLong(values, index * 2, value);\n/** @ignore */\nconst setTimestampNanosecond  = <T extends TimestampNanosecond> ({ values }: VectorType<T>, index: number, value: T['TValue']): void => setEpochMsToNanosecondsLong(values, index * 2, value);\n/* istanbul ignore next */\n/** @ignore */\nconst setTimestamp            = <T extends Timestamp>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    switch (vector.type.unit) {\n        case TimeUnit.SECOND:      return      setTimestampSecond(vector as VectorType<TimestampSecond>, index, value);\n        case TimeUnit.MILLISECOND: return setTimestampMillisecond(vector as VectorType<TimestampMillisecond>, index, value);\n        case TimeUnit.MICROSECOND: return setTimestampMicrosecond(vector as VectorType<TimestampMicrosecond>, index, value);\n        case TimeUnit.NANOSECOND:  return  setTimestampNanosecond(vector as VectorType<TimestampNanosecond>, index, value);\n    }\n};\n\n/** @ignore */\nconst setTimeSecond      = <T extends TimeSecond>     ({ values, stride }: VectorType<T>, index: number, value: T['TValue']): void => { values[stride * index] = value; };\n/** @ignore */\nconst setTimeMillisecond = <T extends TimeMillisecond>({ values, stride }: VectorType<T>, index: number, value: T['TValue']): void => { values[stride * index] = value; };\n/** @ignore */\nconst setTimeMicrosecond = <T extends TimeMicrosecond>({ values         }: VectorType<T>, index: number, value: T['TValue']): void => { values.set(value.subarray(0, 2), 2 * index); };\n/** @ignore */\nconst setTimeNanosecond  = <T extends TimeNanosecond> ({ values         }: VectorType<T>, index: number, value: T['TValue']): void => { values.set(value.subarray(0, 2), 2 * index); };\n/* istanbul ignore next */\n/** @ignore */\nconst setTime            = <T extends Time>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    switch (vector.type.unit) {\n        case TimeUnit.SECOND:      return      setTimeSecond(vector as VectorType<TimeSecond>, index, value as TimeSecond['TValue']);\n        case TimeUnit.MILLISECOND: return setTimeMillisecond(vector as VectorType<TimeMillisecond>, index, value as TimeMillisecond['TValue']);\n        case TimeUnit.MICROSECOND: return setTimeMicrosecond(vector as VectorType<TimeMicrosecond>, index, value as TimeMicrosecond['TValue']);\n        case TimeUnit.NANOSECOND:  return  setTimeNanosecond(vector as VectorType<TimeNanosecond>, index, value as TimeNanosecond['TValue']);\n    }\n};\n\n/** @ignore */\nconst setDecimal = <T extends Decimal>({ values }: VectorType<T>, index: number, value: T['TValue']): void => { values.set(value.subarray(0, 4), 4 * index); };\n\n/** @ignore */\nconst setList = <T extends List>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    const values = vector.getChildAt(0)!, valueOffsets = vector.valueOffsets;\n    for (let idx = -1, itr = valueOffsets[index], end = valueOffsets[index + 1]; itr < end;) {\n        values.set(itr++, value.get(++idx));\n    }\n};\n\n/** @ignore */\nconst setMap = <T extends Map_>(vector: VectorType<T>, index: number, value: T['TValue']) => {\n    const values = vector.getChildAt(0)!, valueOffsets = vector.valueOffsets;\n    const entries = value instanceof Map ? [...value] : Object.entries(value);\n    for (let idx = -1, itr = valueOffsets[index], end = valueOffsets[index + 1]; itr < end;) {\n        values.set(itr++, entries[++idx]);\n    }\n};\n\n/** @ignore */ const _setStructArrayValue = (o: number, v: any[]) => (c: Vector | null, _: Field, i: number) => c && c.set(o, v[i]);\n/** @ignore */ const _setStructVectorValue = (o: number, v: Vector) => (c: Vector | null, _: Field, i: number) => c && c.set(o, v.get(i));\n/** @ignore */ const _setStructMapValue = (o: number, v: Map<string, any>) => (c: Vector | null, f: Field, _: number) => c && c.set(o, v.get(f.name));\n/** @ignore */ const _setStructObjectValue = (o: number, v: { [key: string]: any }) => (c: Vector | null, f: Field, _: number) => c && c.set(o, v[f.name]);\n/** @ignore */\nconst setStruct = <T extends Struct>(vector: VectorType<T>, index: number, value: T['TValue']) => {\n\n    const setValue = value instanceof Map    ? _setStructMapValue(index, value)    :\n                     value instanceof Vector ? _setStructVectorValue(index, value) :\n                     Array.isArray(value)    ? _setStructArrayValue(index, value)  :\n                                               _setStructObjectValue(index, value) ;\n\n    vector.type.children.forEach((f: Field, i: number) => setValue(vector.getChildAt(i), f, i));\n};\n\n/* istanbul ignore next */\n/** @ignore */\nconst setUnion = <\n    V extends VectorType<Union> | VectorType<DenseUnion> | VectorType<SparseUnion>\n>(vector: V, index: number, value: V['TValue']) => {\n    vector.type.mode === UnionMode.Dense ?\n        setDenseUnion(vector as VectorType<DenseUnion>, index, value) :\n        setSparseUnion(vector as VectorType<SparseUnion>, index, value);\n};\n\n/** @ignore */\nconst setDenseUnion = <T extends DenseUnion>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    const childIndex = vector.typeIdToChildIndex[vector.typeIds[index]];\n    const child = vector.getChildAt(childIndex);\n    child && child.set(vector.valueOffsets[index], value);\n};\n\n/** @ignore */\nconst setSparseUnion = <T extends SparseUnion>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    const childIndex = vector.typeIdToChildIndex[vector.typeIds[index]];\n    const child = vector.getChildAt(childIndex);\n    child && child.set(index, value);\n};\n\n/** @ignore */\nconst setDictionary = <T extends Dictionary>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    const key = vector.getKey(index);\n    if (key !== null) {\n        vector.setValue(key, value);\n    }\n};\n\n/* istanbul ignore next */\n/** @ignore */\nconst setIntervalValue = <T extends Interval>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    (vector.type.unit === IntervalUnit.DAY_TIME)\n        ? setIntervalDayTime(vector as VectorType<IntervalDayTime>, index, value)\n        : setIntervalYearMonth(vector as VectorType<IntervalYearMonth>, index, value);\n};\n\n/** @ignore */\nconst setIntervalDayTime = <T extends IntervalDayTime>({ values }: VectorType<T>, index: number, value: T['TValue']): void => { values.set(value.subarray(0, 2), 2 * index); };\n/** @ignore */\nconst setIntervalYearMonth = <T extends IntervalYearMonth>({ values }: VectorType<T>, index: number, value: T['TValue']): void => { values[index] = (value[0] * 12) + (value[1] % 12); };\n\n/** @ignore */\nconst setFixedSizeList = <T extends FixedSizeList>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    const child = vector.getChildAt(0)!, { stride } = vector;\n    for (let idx = -1, offset = index * stride; ++idx < stride;) {\n        child.set(offset + idx, value.get(idx));\n    }\n};\n\nSetVisitor.prototype.visitBool                 =                 setBool;\nSetVisitor.prototype.visitInt                  =                  setInt;\nSetVisitor.prototype.visitInt8                 =              setNumeric;\nSetVisitor.prototype.visitInt16                =              setNumeric;\nSetVisitor.prototype.visitInt32                =              setNumeric;\nSetVisitor.prototype.visitInt64                =            setNumericX2;\nSetVisitor.prototype.visitUint8                =              setNumeric;\nSetVisitor.prototype.visitUint16               =              setNumeric;\nSetVisitor.prototype.visitUint32               =              setNumeric;\nSetVisitor.prototype.visitUint64               =            setNumericX2;\nSetVisitor.prototype.visitFloat                =                setFloat;\nSetVisitor.prototype.visitFloat16              =              setFloat16;\nSetVisitor.prototype.visitFloat32              =              setNumeric;\nSetVisitor.prototype.visitFloat64              =              setNumeric;\nSetVisitor.prototype.visitUtf8                 =                 setUtf8;\nSetVisitor.prototype.visitBinary               =               setBinary;\nSetVisitor.prototype.visitFixedSizeBinary      =      setFixedSizeBinary;\nSetVisitor.prototype.visitDate                 =                 setDate;\nSetVisitor.prototype.visitDateDay              =              setDateDay;\nSetVisitor.prototype.visitDateMillisecond      =      setDateMillisecond;\nSetVisitor.prototype.visitTimestamp            =            setTimestamp;\nSetVisitor.prototype.visitTimestampSecond      =      setTimestampSecond;\nSetVisitor.prototype.visitTimestampMillisecond = setTimestampMillisecond;\nSetVisitor.prototype.visitTimestampMicrosecond = setTimestampMicrosecond;\nSetVisitor.prototype.visitTimestampNanosecond  =  setTimestampNanosecond;\nSetVisitor.prototype.visitTime                 =                 setTime;\nSetVisitor.prototype.visitTimeSecond           =           setTimeSecond;\nSetVisitor.prototype.visitTimeMillisecond      =      setTimeMillisecond;\nSetVisitor.prototype.visitTimeMicrosecond      =      setTimeMicrosecond;\nSetVisitor.prototype.visitTimeNanosecond       =       setTimeNanosecond;\nSetVisitor.prototype.visitDecimal              =              setDecimal;\nSetVisitor.prototype.visitList                 =                 setList;\nSetVisitor.prototype.visitStruct               =               setStruct;\nSetVisitor.prototype.visitUnion                =                setUnion;\nSetVisitor.prototype.visitDenseUnion           =           setDenseUnion;\nSetVisitor.prototype.visitSparseUnion          =          setSparseUnion;\nSetVisitor.prototype.visitDictionary           =           setDictionary;\nSetVisitor.prototype.visitInterval             =        setIntervalValue;\nSetVisitor.prototype.visitIntervalDayTime      =      setIntervalDayTime;\nSetVisitor.prototype.visitIntervalYearMonth    =    setIntervalYearMonth;\nSetVisitor.prototype.visitFixedSizeList        =        setFixedSizeList;\nSetVisitor.prototype.visitMap                  =                  setMap;\n\n/** @ignore */\nexport const instance = new SetVisitor();\n","// automatically generated by the FlatBuffers compiler, do not modify\n\nimport { flatbuffers } from 'flatbuffers';\nimport * as NS7624605610262437867 from './Schema';\n/**\n * ----------------------------------------------------------------------\n * Arrow File metadata\n *\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Footer {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Footer\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Footer {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Footer= obj\n         * @returns Footer\n         */\n        static getRootAsFooter(bb: flatbuffers.ByteBuffer, obj?: Footer): Footer {\n            return (obj || new Footer).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @returns org.apache.arrow.flatbuf.MetadataVersion\n         */\n        version(): NS7624605610262437867.org.apache.arrow.flatbuf.MetadataVersion {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? /**  */ (this.bb!.readInt16(this.bb_pos + offset)) : NS7624605610262437867.org.apache.arrow.flatbuf.MetadataVersion.V1;\n        }\n\n        /**\n         * @param org.apache.arrow.flatbuf.Schema= obj\n         * @returns org.apache.arrow.flatbuf.Schema|null\n         */\n        schema(obj?: NS7624605610262437867.org.apache.arrow.flatbuf.Schema): NS7624605610262437867.org.apache.arrow.flatbuf.Schema | null {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? (obj || new NS7624605610262437867.org.apache.arrow.flatbuf.Schema).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;\n        }\n\n        /**\n         * @param number index\n         * @param org.apache.arrow.flatbuf.Block= obj\n         * @returns org.apache.arrow.flatbuf.Block\n         */\n        dictionaries(index: number, obj?: org.apache.arrow.flatbuf.Block): org.apache.arrow.flatbuf.Block | null {\n            let offset = this.bb!.__offset(this.bb_pos, 8);\n            return offset ? (obj || new org.apache.arrow.flatbuf.Block).__init(this.bb!.__vector(this.bb_pos + offset) + index * 24, this.bb!) : null;\n        }\n\n        /**\n         * @returns number\n         */\n        dictionariesLength(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 8);\n            return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @param number index\n         * @param org.apache.arrow.flatbuf.Block= obj\n         * @returns org.apache.arrow.flatbuf.Block\n         */\n        recordBatches(index: number, obj?: org.apache.arrow.flatbuf.Block): org.apache.arrow.flatbuf.Block | null {\n            let offset = this.bb!.__offset(this.bb_pos, 10);\n            return offset ? (obj || new org.apache.arrow.flatbuf.Block).__init(this.bb!.__vector(this.bb_pos + offset) + index * 24, this.bb!) : null;\n        }\n\n        /**\n         * @returns number\n         */\n        recordBatchesLength(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 10);\n            return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startFooter(builder: flatbuffers.Builder) {\n            builder.startObject(4);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.MetadataVersion version\n         */\n        static addVersion(builder: flatbuffers.Builder, version: NS7624605610262437867.org.apache.arrow.flatbuf.MetadataVersion) {\n            builder.addFieldInt16(0, version, NS7624605610262437867.org.apache.arrow.flatbuf.MetadataVersion.V1);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset schemaOffset\n         */\n        static addSchema(builder: flatbuffers.Builder, schemaOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(1, schemaOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset dictionariesOffset\n         */\n        static addDictionaries(builder: flatbuffers.Builder, dictionariesOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(2, dictionariesOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startDictionariesVector(builder: flatbuffers.Builder, numElems: number) {\n            builder.startVector(24, numElems, 8);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset recordBatchesOffset\n         */\n        static addRecordBatches(builder: flatbuffers.Builder, recordBatchesOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(3, recordBatchesOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startRecordBatchesVector(builder: flatbuffers.Builder, numElems: number) {\n            builder.startVector(24, numElems, 8);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endFooter(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset offset\n         */\n        static finishFooterBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\n            builder.finish(offset);\n        }\n\n        static createFooter(builder: flatbuffers.Builder, version: NS7624605610262437867.org.apache.arrow.flatbuf.MetadataVersion, schemaOffset: flatbuffers.Offset, dictionariesOffset: flatbuffers.Offset, recordBatchesOffset: flatbuffers.Offset): flatbuffers.Offset {\n            Footer.startFooter(builder);\n            Footer.addVersion(builder, version);\n            Footer.addSchema(builder, schemaOffset);\n            Footer.addDictionaries(builder, dictionariesOffset);\n            Footer.addRecordBatches(builder, recordBatchesOffset);\n            return Footer.endFooter(builder);\n        }\n    }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Block {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Block\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Block {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * Index to the start of the RecordBlock (note this is past the Message header)\n         *\n         * @returns flatbuffers.Long\n         */\n        offset(): flatbuffers.Long {\n            return this.bb!.readInt64(this.bb_pos);\n        }\n\n        /**\n         * Length of the metadata\n         *\n         * @returns number\n         */\n        metaDataLength(): number {\n            return this.bb!.readInt32(this.bb_pos + 8);\n        }\n\n        /**\n         * Length of the data (this is aligned so there can be a gap between this and\n         * the metatdata).\n         *\n         * @returns flatbuffers.Long\n         */\n        bodyLength(): flatbuffers.Long {\n            return this.bb!.readInt64(this.bb_pos + 16);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Long offset\n         * @param number metaDataLength\n         * @param flatbuffers.Long bodyLength\n         * @returns flatbuffers.Offset\n         */\n        static createBlock(builder: flatbuffers.Builder, offset: flatbuffers.Long, metaDataLength: number, bodyLength: flatbuffers.Long): flatbuffers.Offset {\n            builder.prep(8, 24);\n            builder.writeInt64(bodyLength);\n            builder.pad(4);\n            builder.writeInt32(metaDataLength);\n            builder.writeInt64(offset);\n            return builder.offset();\n        }\n\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Type } from '../enum';\nimport { DataType } from '../type';\nimport { Visitor } from '../visitor';\nimport { VectorType, BuilderCtor } from '../interfaces';\nimport { BinaryBuilder } from '../builder/binary';\nimport { BoolBuilder } from '../builder/bool';\nimport { DateBuilder, DateDayBuilder, DateMillisecondBuilder } from '../builder/date';\nimport { DecimalBuilder } from '../builder/decimal';\nimport { DictionaryBuilder } from '../builder/dictionary';\nimport { FixedSizeBinaryBuilder } from '../builder/fixedsizebinary';\nimport { FixedSizeListBuilder } from '../builder/fixedsizelist';\nimport { FloatBuilder, Float16Builder, Float32Builder, Float64Builder } from '../builder/float';\nimport { IntervalBuilder, IntervalDayTimeBuilder, IntervalYearMonthBuilder } from '../builder/interval';\nimport { IntBuilder, Int8Builder, Int16Builder, Int32Builder, Int64Builder, Uint8Builder, Uint16Builder, Uint32Builder, Uint64Builder } from '../builder/int';\nimport { ListBuilder } from '../builder/list';\nimport { MapBuilder } from '../builder/map';\nimport { NullBuilder } from '../builder/null';\nimport { StructBuilder } from '../builder/struct';\nimport { TimestampBuilder, TimestampSecondBuilder, TimestampMillisecondBuilder, TimestampMicrosecondBuilder, TimestampNanosecondBuilder } from '../builder/timestamp';\nimport { TimeBuilder, TimeSecondBuilder, TimeMillisecondBuilder, TimeMicrosecondBuilder, TimeNanosecondBuilder } from '../builder/time';\nimport { UnionBuilder, DenseUnionBuilder, SparseUnionBuilder } from '../builder/union';\nimport { Utf8Builder } from '../builder/utf8';\n\n/** @ignore */\nexport interface GetBuilderCtor extends Visitor {\n    visit<T extends Type>(type: T): BuilderCtor<T>;\n    visitMany<T extends Type>(types: T[]): BuilderCtor<T>[];\n    getVisitFn<T extends Type>(type: T): () => BuilderCtor<T>;\n    getVisitFn<T extends DataType>(node: VectorType<T> | Data<T> | T): () => BuilderCtor<T>;\n}\n\n/** @ignore */\nexport class GetBuilderCtor extends Visitor {\n    public visitNull                 () { return NullBuilder;                 }\n    public visitBool                 () { return BoolBuilder;                 }\n    public visitInt                  () { return IntBuilder;                  }\n    public visitInt8                 () { return Int8Builder;                 }\n    public visitInt16                () { return Int16Builder;                }\n    public visitInt32                () { return Int32Builder;                }\n    public visitInt64                () { return Int64Builder;                }\n    public visitUint8                () { return Uint8Builder;                }\n    public visitUint16               () { return Uint16Builder;               }\n    public visitUint32               () { return Uint32Builder;               }\n    public visitUint64               () { return Uint64Builder;               }\n    public visitFloat                () { return FloatBuilder;                }\n    public visitFloat16              () { return Float16Builder;              }\n    public visitFloat32              () { return Float32Builder;              }\n    public visitFloat64              () { return Float64Builder;              }\n    public visitUtf8                 () { return Utf8Builder;                 }\n    public visitBinary               () { return BinaryBuilder;               }\n    public visitFixedSizeBinary      () { return FixedSizeBinaryBuilder;      }\n    public visitDate                 () { return DateBuilder;                 }\n    public visitDateDay              () { return DateDayBuilder;              }\n    public visitDateMillisecond      () { return DateMillisecondBuilder;      }\n    public visitTimestamp            () { return TimestampBuilder;            }\n    public visitTimestampSecond      () { return TimestampSecondBuilder;      }\n    public visitTimestampMillisecond () { return TimestampMillisecondBuilder; }\n    public visitTimestampMicrosecond () { return TimestampMicrosecondBuilder; }\n    public visitTimestampNanosecond  () { return TimestampNanosecondBuilder;  }\n    public visitTime                 () { return TimeBuilder;                 }\n    public visitTimeSecond           () { return TimeSecondBuilder;           }\n    public visitTimeMillisecond      () { return TimeMillisecondBuilder;      }\n    public visitTimeMicrosecond      () { return TimeMicrosecondBuilder;      }\n    public visitTimeNanosecond       () { return TimeNanosecondBuilder;       }\n    public visitDecimal              () { return DecimalBuilder;              }\n    public visitList                 () { return ListBuilder;                 }\n    public visitStruct               () { return StructBuilder;               }\n    public visitUnion                () { return UnionBuilder;                }\n    public visitDenseUnion           () { return DenseUnionBuilder;           }\n    public visitSparseUnion          () { return SparseUnionBuilder;          }\n    public visitDictionary           () { return DictionaryBuilder;           }\n    public visitInterval             () { return IntervalBuilder;             }\n    public visitIntervalDayTime      () { return IntervalDayTimeBuilder;      }\n    public visitIntervalYearMonth    () { return IntervalYearMonthBuilder;    }\n    public visitFixedSizeList        () { return FixedSizeListBuilder;        }\n    public visitMap                  () { return MapBuilder;                  }\n}\n\n/** @ignore */\nexport const instance = new GetBuilderCtor();\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/** @ignore */\nexport { Builder, BuilderOptions } from '../builder';\nexport { BoolBuilder } from './bool';\nexport { NullBuilder } from './null';\nexport { DateBuilder, DateDayBuilder, DateMillisecondBuilder } from './date';\nexport { DecimalBuilder } from './decimal';\nexport { DictionaryBuilder } from './dictionary';\nexport { FixedSizeBinaryBuilder } from './fixedsizebinary';\nexport { FloatBuilder, Float16Builder, Float32Builder, Float64Builder } from './float';\nexport { IntBuilder, Int8Builder, Int16Builder, Int32Builder, Int64Builder, Uint8Builder, Uint16Builder, Uint32Builder, Uint64Builder } from './int';\nexport { TimeBuilder, TimeSecondBuilder, TimeMillisecondBuilder, TimeMicrosecondBuilder, TimeNanosecondBuilder } from './time';\nexport { TimestampBuilder, TimestampSecondBuilder, TimestampMillisecondBuilder, TimestampMicrosecondBuilder, TimestampNanosecondBuilder } from './timestamp';\nexport { IntervalBuilder, IntervalDayTimeBuilder, IntervalYearMonthBuilder } from './interval';\nexport { Utf8Builder } from './utf8';\nexport { BinaryBuilder } from './binary';\nexport { ListBuilder } from './list';\nexport { FixedSizeListBuilder } from './fixedsizelist';\nexport { MapBuilder } from './map';\nexport { StructBuilder } from './struct';\nexport { UnionBuilder, SparseUnionBuilder, DenseUnionBuilder } from './union';\n\nimport { Type } from '../enum';\nimport { Field } from '../schema';\nimport { DataType } from '../type';\nimport { Utf8Builder } from './utf8';\nimport { BuilderType as B } from '../interfaces';\nimport { Builder, BuilderOptions } from '../builder';\nimport { instance as setVisitor } from '../visitor/set';\nimport { instance as getBuilderConstructor } from '../visitor/builderctor';\n\n/** @nocollapse */\nBuilder.new = newBuilder;\n\nfunction newBuilder<T extends DataType = any, TNull = any>(options: BuilderOptions<T, TNull>): B<T, TNull> {\n\n    const type = options.type;\n    const builder = new (getBuilderConstructor.getVisitFn<T>(type)())(options) as Builder<T, TNull>;\n\n    if (type.children && type.children.length > 0) {\n\n        const children = options['children'] || [] as BuilderOptions[];\n        const defaultOptions = { 'nullValues': options['nullValues'] };\n        const getChildOptions = Array.isArray(children)\n            ? ((_: Field, i: number) => children[i] || defaultOptions)\n            : (({ name }: Field) => children[name] || defaultOptions);\n\n        type.children.forEach((field, index) => {\n            const { type } = field;\n            const opts = getChildOptions(field, index);\n            builder.children.push(newBuilder({ ...opts, type }));\n        });\n    }\n\n    return builder as B<T, TNull>;\n}\n\n(Object.keys(Type) as any[])\n    .map((T: any) => Type[T] as any)\n    .filter((T: any): T is Type => typeof T === 'number' && T !== Type.NONE)\n    .forEach((typeId) => {\n        const BuilderCtor = getBuilderConstructor.visit(typeId);\n        BuilderCtor.prototype._setValue = setVisitor.getVisitFn(typeId);\n    });\n\n(Utf8Builder.prototype as any)._setValue = setVisitor.visitBinary;\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/* tslint:disable:class-name */\n\nimport * as File_ from '../../fb/File';\nimport { flatbuffers } from 'flatbuffers';\n\nimport Long = flatbuffers.Long;\nimport Builder = flatbuffers.Builder;\nimport ByteBuffer = flatbuffers.ByteBuffer;\nimport _Block = File_.org.apache.arrow.flatbuf.Block;\nimport _Footer = File_.org.apache.arrow.flatbuf.Footer;\n\nimport { Schema } from '../../schema';\nimport { MetadataVersion } from '../../enum';\nimport { toUint8Array } from '../../util/buffer';\nimport { ArrayBufferViewInput } from '../../util/buffer';\n\n/** @ignore */\nclass Footer_ {\n\n    /** @nocollapse */\n    public static decode(buf: ArrayBufferViewInput) {\n        buf = new ByteBuffer(toUint8Array(buf));\n        const footer = _Footer.getRootAsFooter(buf);\n        const schema = Schema.decode(footer.schema()!);\n        return new OffHeapFooter(schema, footer) as Footer_;\n    }\n\n    /** @nocollapse */\n    public static encode(footer: Footer_) {\n\n        const b: Builder = new Builder();\n        const schemaOffset = Schema.encode(b, footer.schema);\n\n        _Footer.startRecordBatchesVector(b, footer.numRecordBatches);\n        [...footer.recordBatches()].slice().reverse().forEach((rb) => FileBlock.encode(b, rb));\n        const recordBatchesOffset = b.endVector();\n\n        _Footer.startDictionariesVector(b, footer.numDictionaries);\n        [...footer.dictionaryBatches()].slice().reverse().forEach((db) => FileBlock.encode(b, db));\n\n        const dictionaryBatchesOffset = b.endVector();\n\n        _Footer.startFooter(b);\n        _Footer.addSchema(b, schemaOffset);\n        _Footer.addVersion(b, MetadataVersion.V4);\n        _Footer.addRecordBatches(b, recordBatchesOffset);\n        _Footer.addDictionaries(b, dictionaryBatchesOffset);\n        _Footer.finishFooterBuffer(b, _Footer.endFooter(b));\n\n        return b.asUint8Array();\n    }\n\n    // @ts-ignore\n    protected _recordBatches: FileBlock[];\n    // @ts-ignore\n    protected _dictionaryBatches: FileBlock[];\n    public get numRecordBatches() { return this._recordBatches.length; }\n    public get numDictionaries() { return this._dictionaryBatches.length; }\n\n    constructor(public schema: Schema,\n                public version: MetadataVersion = MetadataVersion.V4,\n                recordBatches?: FileBlock[], dictionaryBatches?: FileBlock[]) {\n        recordBatches && (this._recordBatches = recordBatches);\n        dictionaryBatches && (this._dictionaryBatches = dictionaryBatches);\n    }\n\n    public *recordBatches(): Iterable<FileBlock> {\n        for (let block, i = -1, n = this.numRecordBatches; ++i < n;) {\n            if (block = this.getRecordBatch(i)) { yield block; }\n        }\n    }\n\n    public *dictionaryBatches(): Iterable<FileBlock> {\n        for (let block, i = -1, n = this.numDictionaries; ++i < n;) {\n            if (block = this.getDictionaryBatch(i)) { yield block; }\n        }\n    }\n\n    public getRecordBatch(index: number) {\n        return index >= 0\n            && index < this.numRecordBatches\n            && this._recordBatches[index] || null;\n    }\n\n    public getDictionaryBatch(index: number) {\n        return index >= 0\n            && index < this.numDictionaries\n            && this._dictionaryBatches[index] || null;\n    }\n}\n\nexport { Footer_ as Footer };\n\n/** @ignore */\nclass OffHeapFooter extends Footer_ {\n\n    public get numRecordBatches() { return this._footer.recordBatchesLength(); }\n    public get numDictionaries() { return this._footer.dictionariesLength(); }\n\n    constructor(schema: Schema, protected _footer: _Footer) {\n        super(schema, _footer.version());\n    }\n\n    public getRecordBatch(index: number) {\n        if (index >= 0 && index < this.numRecordBatches) {\n            const fileBlock = this._footer.recordBatches(index);\n            if (fileBlock) { return FileBlock.decode(fileBlock); }\n        }\n        return null;\n    }\n\n    public getDictionaryBatch(index: number) {\n        if (index >= 0 && index < this.numDictionaries) {\n            const fileBlock = this._footer.dictionaries(index);\n            if (fileBlock) { return FileBlock.decode(fileBlock); }\n        }\n        return null;\n    }\n}\n\n/** @ignore */\nexport class FileBlock {\n\n    /** @nocollapse */\n    public static decode(block: _Block) {\n        return new FileBlock(block.metaDataLength(), block.bodyLength(), block.offset());\n    }\n\n    /** @nocollapse */\n    public static encode(b: Builder, fileBlock: FileBlock) {\n        const { metaDataLength } = fileBlock;\n        const offset = new Long(fileBlock.offset, 0);\n        const bodyLength = new Long(fileBlock.bodyLength, 0);\n        return _Block.createBlock(b, offset, metaDataLength, bodyLength);\n    }\n\n    public offset: number;\n    public bodyLength: number;\n    public metaDataLength: number;\n\n    constructor(metaDataLength: number, bodyLength: Long | number, offset: Long | number) {\n        this.metaDataLength = metaDataLength;\n        this.offset = typeof offset === 'number' ? offset : offset.low;\n        this.bodyLength = typeof bodyLength === 'number' ? bodyLength : bodyLength.low;\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport streamAdapters from './adapters';\nimport { decodeUtf8 } from '../util/utf8';\nimport { ITERATOR_DONE, Readable, Writable, AsyncQueue } from './interfaces';\nimport { toUint8Array, joinUint8Arrays, ArrayBufferViewInput } from '../util/buffer';\n\nimport {\n    isPromise, isFetchResponse,\n    isIterable, isAsyncIterable,\n    isReadableDOMStream, isReadableNodeStream\n} from '../util/compat';\n\n/** @ignore */\nexport type WritableSink<T> = Writable<T> | WritableStream<T> | NodeJS.WritableStream | null;\n/** @ignore */\nexport type ReadableSource<T> = Readable<T> | PromiseLike<T> | AsyncIterable<T> | ReadableStream<T> | NodeJS.ReadableStream | null;\n\n/** @ignore */\nexport class AsyncByteQueue<T extends ArrayBufferViewInput = Uint8Array> extends AsyncQueue<Uint8Array, T> {\n    public write(value: ArrayBufferViewInput | Uint8Array) {\n        if ((value = toUint8Array(value)).byteLength > 0) {\n            return super.write(value as T);\n        }\n    }\n    public toString(sync: true): string;\n    public toString(sync?: false): Promise<string>;\n    public toString(sync = false) {\n        return sync\n            ? decodeUtf8(this.toUint8Array(true))\n            : this.toUint8Array(false).then(decodeUtf8);\n    }\n    public toUint8Array(sync: true): Uint8Array;\n    public toUint8Array(sync?: false): Promise<Uint8Array>;\n    public toUint8Array(sync = false) {\n        return sync ? joinUint8Arrays(this._values as any[])[0] : (async () => {\n            let buffers = [], byteLength = 0;\n            for await (const chunk of this) {\n                buffers.push(chunk);\n                byteLength += chunk.byteLength;\n            }\n            return joinUint8Arrays(buffers, byteLength)[0];\n        })();\n    }\n}\n\n/** @ignore */\nexport class ByteStream implements IterableIterator<Uint8Array> {\n    // @ts-ignore\n    private source: ByteStreamSource<Uint8Array>;\n    constructor(source?: Iterable<ArrayBufferViewInput> | ArrayBufferViewInput) {\n        if (source) {\n            this.source = new ByteStreamSource(streamAdapters.fromIterable(source));\n        }\n    }\n    [Symbol.iterator]() { return this; }\n    public next(value?: any) { return this.source.next(value); }\n    public throw(value?: any) { return this.source.throw(value); }\n    public return(value?: any) { return this.source.return(value); }\n    public peek(size?: number | null) { return this.source.peek(size); }\n    public read(size?: number | null) { return this.source.read(size); }\n}\n\n/** @ignore */\nexport class AsyncByteStream implements Readable<Uint8Array>, AsyncIterableIterator<Uint8Array> {\n    // @ts-ignore\n    private source: AsyncByteStreamSource<Uint8Array>;\n    constructor(source?: PromiseLike<ArrayBufferViewInput> | Response | ReadableStream<ArrayBufferViewInput> | NodeJS.ReadableStream | AsyncIterable<ArrayBufferViewInput> | Iterable<ArrayBufferViewInput>) {\n        if (source instanceof AsyncByteStream) {\n            this.source = (source as AsyncByteStream).source;\n        } else if (source instanceof AsyncByteQueue) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromAsyncIterable(source));\n        } else if (isReadableNodeStream(source)) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromNodeStream(source));\n        } else if (isReadableDOMStream<ArrayBufferViewInput>(source)) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromDOMStream(source));\n        } else if (isFetchResponse(source)) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromDOMStream(source.body!));\n        } else if (isIterable<ArrayBufferViewInput>(source)) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromIterable(source));\n        } else if (isPromise<ArrayBufferViewInput>(source)) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromAsyncIterable(source));\n        } else if (isAsyncIterable<ArrayBufferViewInput>(source)) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromAsyncIterable(source));\n        }\n    }\n    [Symbol.asyncIterator]() { return this; }\n    public next(value?: any) { return this.source.next(value); }\n    public throw(value?: any) { return this.source.throw(value); }\n    public return(value?: any) { return this.source.return(value); }\n    public get closed(): Promise<void> { return this.source.closed; }\n    public cancel(reason?: any) { return this.source.cancel(reason); }\n    public peek(size?: number | null) { return this.source.peek(size); }\n    public read(size?: number | null) { return this.source.read(size); }\n}\n\n/** @ignore */\ninterface ByteStreamSourceIterator<T> extends IterableIterator<T> {\n    next(value?: { cmd: 'peek' | 'read', size?: number | null }): IteratorResult<T>;\n}\n\n/** @ignore */\ninterface AsyncByteStreamSourceIterator<T> extends AsyncIterableIterator<T> {\n    next(value?: { cmd: 'peek' | 'read', size?: number | null }): Promise<IteratorResult<T>>;\n}\n\n/** @ignore */\nclass ByteStreamSource<T> {\n    constructor(protected source: ByteStreamSourceIterator<T>) {}\n    public cancel(reason?: any) { this.return(reason); }\n    public peek(size?: number | null): T | null { return this.next(size, 'peek').value; }\n    public read(size?: number | null): T | null { return this.next(size, 'read').value; }\n    public next(size?: number | null, cmd: 'peek' | 'read' = 'read') { return this.source.next({ cmd, size }); }\n    public throw(value?: any) { return Object.create((this.source.throw && this.source.throw(value)) || ITERATOR_DONE); }\n    public return(value?: any) { return Object.create((this.source.return && this.source.return(value)) || ITERATOR_DONE); }\n}\n\n/** @ignore */\nclass AsyncByteStreamSource<T> implements Readable<T> {\n\n    private _closedPromise: Promise<void>;\n    private _closedPromiseResolve?: (value?: any) => void;\n    constructor (protected source: ByteStreamSourceIterator<T> | AsyncByteStreamSourceIterator<T>) {\n        this._closedPromise = new Promise((r) => this._closedPromiseResolve = r);\n    }\n    public async cancel(reason?: any) { await this.return(reason); }\n    public get closed(): Promise<void> { return this._closedPromise; }\n    public async read(size?: number | null): Promise<T | null> { return (await this.next(size, 'read')).value; }\n    public async peek(size?: number | null): Promise<T | null> { return (await this.next(size, 'peek')).value; }\n    public async next(size?: number | null, cmd: 'peek' | 'read' = 'read') { return (await this.source.next({ cmd, size })); }\n    public async throw(value?: any) {\n        const result = (this.source.throw && await this.source.throw(value)) || ITERATOR_DONE;\n        this._closedPromiseResolve && this._closedPromiseResolve();\n        this._closedPromiseResolve = undefined;\n        return Object.create(result);\n    }\n    public async return(value?: any) {\n        const result = (this.source.return && await this.source.return(value)) || ITERATOR_DONE;\n        this._closedPromiseResolve && this._closedPromiseResolve();\n        this._closedPromiseResolve = undefined;\n        return Object.create(result);\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { FileHandle } from './interfaces';\nimport { ByteStream, AsyncByteStream } from './stream';\nimport { ArrayBufferViewInput, toUint8Array } from '../util/buffer';\n\n/** @ignore */\nexport class RandomAccessFile extends ByteStream {\n    public size: number;\n    public position: number = 0;\n    protected buffer: Uint8Array | null;\n    constructor(buffer: ArrayBufferViewInput, byteLength?: number) {\n        super();\n        this.buffer = toUint8Array(buffer);\n        this.size = typeof byteLength === 'undefined' ? this.buffer.byteLength : byteLength;\n    }\n    public readInt32(position: number) {\n        const { buffer, byteOffset } = this.readAt(position, 4);\n        return new DataView(buffer, byteOffset).getInt32(0, true);\n    }\n    public seek(position: number) {\n        this.position = Math.min(position, this.size);\n        return position < this.size;\n    }\n    public read(nBytes?: number | null) {\n        const { buffer, size, position } = this;\n        if (buffer && position < size) {\n            if (typeof nBytes !== 'number') { nBytes = Infinity; }\n            this.position = Math.min(size,\n                 position + Math.min(size - position, nBytes));\n            return buffer.subarray(position, this.position);\n        }\n        return null;\n    }\n    public readAt(position: number, nBytes: number) {\n        const buf = this.buffer;\n        const end = Math.min(this.size, position + nBytes);\n        return buf ? buf.subarray(position, end) : new Uint8Array(nBytes);\n    }\n    public close() { this.buffer && (this.buffer = null); }\n    public throw(value?: any) { this.close(); return { done: true, value }; }\n    public return(value?: any) { this.close(); return { done: true, value }; }\n}\n\n/** @ignore */\nexport class AsyncRandomAccessFile extends AsyncByteStream {\n    // @ts-ignore\n    public size: number;\n    public position: number = 0;\n    public _pending?: Promise<void>;\n    protected _handle: FileHandle | null;\n    constructor(file: FileHandle, byteLength?: number) {\n        super();\n        this._handle = file;\n        if (typeof byteLength === 'number') {\n            this.size = byteLength;\n        } else {\n            this._pending = (async () => {\n                this.size = (await file.stat()).size;\n                delete this._pending;\n            })();\n        }\n    }\n    public async readInt32(position: number) {\n        const { buffer, byteOffset } = await this.readAt(position, 4);\n        return new DataView(buffer, byteOffset).getInt32(0, true);\n    }\n    public async seek(position: number) {\n        this._pending && await this._pending;\n        this.position = Math.min(position, this.size);\n        return position < this.size;\n    }\n    public async read(nBytes?: number | null) {\n        this._pending && await this._pending;\n        const { _handle: file, size, position } = this;\n        if (file && position < size) {\n            if (typeof nBytes !== 'number') { nBytes = Infinity; }\n            let pos = position, offset = 0, bytesRead = 0;\n            let end = Math.min(size, pos + Math.min(size - pos, nBytes));\n            let buffer = new Uint8Array(Math.max(0, (this.position = end) - pos));\n            while ((pos += bytesRead) < end && (offset += bytesRead) < buffer.byteLength) {\n                ({ bytesRead } = await file.read(buffer, offset, buffer.byteLength - offset, pos));\n            }\n            return buffer;\n        }\n        return null;\n    }\n    public async readAt(position: number, nBytes: number) {\n        this._pending && await this._pending;\n        const { _handle: file, size } = this;\n        if (file && (position + nBytes) < size) {\n            const end = Math.min(size, position + nBytes);\n            const buffer = new Uint8Array(end - position);\n            return (await file.read(buffer, 0, nBytes, position)).buffer;\n        }\n        return new Uint8Array(nBytes);\n    }\n    public async close() { const f = this._handle; this._handle = null; f && await f.close(); }\n    public async throw(value?: any) { await this.close(); return { done: true, value }; }\n    public async return(value?: any) { await this.close(); return { done: true, value }; }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/** @ignore */\nconst carryBit16 = 1 << 16;\n\n/** @ignore */\nfunction intAsHex(value: number): string {\n    if (value < 0) {\n        value = 0xFFFFFFFF + value + 1;\n    }\n    return `0x${value.toString(16)}`;\n}\n\n/** @ignore */\nconst kInt32DecimalDigits = 8;\n/** @ignore */\nconst kPowersOfTen = [1,\n                      10,\n                      100,\n                      1000,\n                      10000,\n                      100000,\n                      1000000,\n                      10000000,\n                      100000000];\n\n/** @ignore */\nexport class BaseInt64 {\n    constructor (protected buffer: Uint32Array) {}\n\n    public high(): number { return this.buffer[1]; }\n    public low (): number { return this.buffer[0]; }\n\n    protected _times(other: BaseInt64) {\n        // Break the left and right numbers into 16 bit chunks\n        // so that we can multiply them without overflow.\n        const L = new Uint32Array([\n            this.buffer[1] >>> 16,\n            this.buffer[1] & 0xFFFF,\n            this.buffer[0] >>> 16,\n            this.buffer[0] & 0xFFFF\n        ]);\n\n        const R = new Uint32Array([\n            other.buffer[1] >>> 16,\n            other.buffer[1] & 0xFFFF,\n            other.buffer[0] >>> 16,\n            other.buffer[0] & 0xFFFF\n        ]);\n\n        let product = L[3] * R[3];\n        this.buffer[0] = product & 0xFFFF;\n\n        let sum = product >>> 16;\n\n        product = L[2] * R[3];\n        sum += product;\n\n        product = (L[3] * R[2]) >>> 0;\n        sum += product;\n\n        this.buffer[0] += sum << 16;\n\n        this.buffer[1] = (sum >>> 0 < product ? carryBit16 : 0);\n\n        this.buffer[1] += sum >>> 16;\n        this.buffer[1] += L[1] * R[3] + L[2] * R[2] + L[3] * R[1];\n        this.buffer[1] += (L[0] * R[3] + L[1] * R[2] + L[2] * R[1] + L[3] * R[0]) << 16;\n\n        return this;\n      }\n\n    protected _plus(other: BaseInt64) {\n        const sum = (this.buffer[0] + other.buffer[0]) >>> 0;\n        this.buffer[1] += other.buffer[1];\n        if (sum < (this.buffer[0] >>> 0)) {\n          ++this.buffer[1];\n        }\n        this.buffer[0] = sum;\n    }\n\n    public lessThan(other: BaseInt64): boolean {\n        return this.buffer[1] < other.buffer[1] ||\n            (this.buffer[1] === other.buffer[1] && this.buffer[0] < other.buffer[0]);\n    }\n\n    public equals(other: BaseInt64): boolean {\n        return this.buffer[1] === other.buffer[1] && this.buffer[0] == other.buffer[0];\n    }\n\n    public greaterThan(other: BaseInt64): boolean {\n        return other.lessThan(this);\n    }\n\n    public hex(): string {\n        return `${intAsHex(this.buffer[1])} ${intAsHex(this.buffer[0])}`;\n    }\n}\n\n/** @ignore */\nexport class Uint64 extends BaseInt64 {\n    public times(other: Uint64): Uint64 {\n        this._times(other);\n        return this;\n    }\n\n    public plus(other: Uint64): Uint64 {\n        this._plus(other);\n        return this;\n    }\n\n    /** @nocollapse */\n    public static from(val: any, out_buffer = new Uint32Array(2)): Uint64 {\n        return Uint64.fromString(\n            typeof(val) === 'string' ? val : val.toString(),\n            out_buffer\n        );\n    }\n\n    /** @nocollapse */\n    public static fromNumber(num: number, out_buffer = new Uint32Array(2)): Uint64 {\n        // Always parse numbers as strings - pulling out high and low bits\n        // directly seems to lose precision sometimes\n        // For example:\n        //     > -4613034156400212000 >>> 0\n        //     721782784\n        // The correct lower 32-bits are 721782752\n        return Uint64.fromString(num.toString(), out_buffer);\n    }\n\n    /** @nocollapse */\n    public static fromString(str: string, out_buffer = new Uint32Array(2)): Uint64 {\n        const length = str.length;\n\n        let out = new Uint64(out_buffer);\n        for (let posn = 0; posn < length;) {\n            const group = kInt32DecimalDigits < length - posn ?\n                          kInt32DecimalDigits : length - posn;\n            const chunk = new Uint64(new Uint32Array([parseInt(str.substr(posn, group), 10), 0]));\n            const multiple = new Uint64(new Uint32Array([kPowersOfTen[group], 0]));\n\n            out.times(multiple);\n            out.plus(chunk);\n\n            posn += group;\n        }\n\n        return out;\n    }\n\n    /** @nocollapse */\n    public static convertArray(values: (string|number)[]): Uint32Array {\n        const data = new Uint32Array(values.length * 2);\n        for (let i = -1, n = values.length; ++i < n;) {\n            Uint64.from(values[i], new Uint32Array(data.buffer, data.byteOffset + 2 * i * 4, 2));\n        }\n        return data;\n    }\n\n    /** @nocollapse */\n    public static multiply(left: Uint64, right: Uint64): Uint64 {\n        let rtrn = new Uint64(new Uint32Array(left.buffer));\n        return rtrn.times(right);\n    }\n\n    /** @nocollapse */\n    public static add(left: Uint64, right: Uint64): Uint64 {\n        let rtrn = new Uint64(new Uint32Array(left.buffer));\n        return rtrn.plus(right);\n    }\n}\n\n/** @ignore */\nexport class Int64 extends BaseInt64 {\n    public negate(): Int64 {\n        this.buffer[0] = ~this.buffer[0] + 1;\n        this.buffer[1] = ~this.buffer[1];\n\n        if (this.buffer[0] == 0) { ++this.buffer[1]; }\n        return this;\n    }\n\n    public times(other: Int64): Int64 {\n        this._times(other);\n        return this;\n    }\n\n    public plus(other: Int64): Int64 {\n        this._plus(other);\n        return this;\n    }\n\n    public lessThan(other: Int64): boolean {\n        // force high bytes to be signed\n        const this_high = this.buffer[1] << 0;\n        const other_high = other.buffer[1] << 0;\n        return this_high < other_high ||\n            (this_high === other_high && this.buffer[0] < other.buffer[0]);\n    }\n\n    /** @nocollapse */\n    public static from(val: any, out_buffer = new Uint32Array(2)): Int64 {\n        return Int64.fromString(\n            typeof(val) === 'string' ? val : val.toString(),\n            out_buffer\n        );\n    }\n\n    /** @nocollapse */\n    public static fromNumber(num: number, out_buffer = new Uint32Array(2)): Int64 {\n        // Always parse numbers as strings - pulling out high and low bits\n        // directly seems to lose precision sometimes\n        // For example:\n        //     > -4613034156400212000 >>> 0\n        //     721782784\n        // The correct lower 32-bits are 721782752\n        return Int64.fromString(num.toString(), out_buffer);\n    }\n\n    /** @nocollapse */\n    public static fromString(str: string, out_buffer = new Uint32Array(2)): Int64 {\n        // TODO: Assert that out_buffer is 0 and length = 2\n        const negate = str.startsWith('-');\n        const length = str.length;\n\n        let out = new Int64(out_buffer);\n        for (let posn = negate ? 1 : 0; posn < length;) {\n            const group = kInt32DecimalDigits < length - posn ?\n                          kInt32DecimalDigits : length - posn;\n            const chunk = new Int64(new Uint32Array([parseInt(str.substr(posn, group), 10), 0]));\n            const multiple = new Int64(new Uint32Array([kPowersOfTen[group], 0]));\n\n            out.times(multiple);\n            out.plus(chunk);\n\n            posn += group;\n        }\n        return negate ? out.negate() : out;\n    }\n\n    /** @nocollapse */\n    public static convertArray(values: (string|number)[]): Uint32Array {\n        const data = new Uint32Array(values.length * 2);\n        for (let i = -1, n = values.length; ++i < n;) {\n            Int64.from(values[i], new Uint32Array(data.buffer, data.byteOffset + 2 * i * 4, 2));\n        }\n        return data;\n    }\n\n    /** @nocollapse */\n    public static multiply(left: Int64, right: Int64): Int64 {\n        let rtrn = new Int64(new Uint32Array(left.buffer));\n        return rtrn.times(right);\n    }\n\n    /** @nocollapse */\n    public static add(left: Int64, right: Int64): Int64 {\n        let rtrn = new Int64(new Uint32Array(left.buffer));\n        return rtrn.plus(right);\n    }\n}\n\n/** @ignore */\nexport class Int128 {\n    constructor (private buffer: Uint32Array) {\n        // buffer[3] MSB (high)\n        // buffer[2]\n        // buffer[1]\n        // buffer[0] LSB (low)\n    }\n\n    public high(): Int64 {\n        return new Int64(new Uint32Array(this.buffer.buffer, this.buffer.byteOffset + 8, 2));\n    }\n\n    public low(): Int64 {\n        return new Int64(new Uint32Array(this.buffer.buffer, this.buffer.byteOffset, 2));\n    }\n\n    public negate(): Int128 {\n        this.buffer[0] = ~this.buffer[0] + 1;\n        this.buffer[1] = ~this.buffer[1];\n        this.buffer[2] = ~this.buffer[2];\n        this.buffer[3] = ~this.buffer[3];\n\n        if (this.buffer[0] == 0) { ++this.buffer[1]; }\n        if (this.buffer[1] == 0) { ++this.buffer[2]; }\n        if (this.buffer[2] == 0) { ++this.buffer[3]; }\n        return this;\n    }\n\n    public times(other: Int128): Int128 {\n        // Break the left and right numbers into 32 bit chunks\n        // so that we can multiply them without overflow.\n        const L0 = new Uint64(new Uint32Array([this.buffer[3],  0]));\n        const L1 = new Uint64(new Uint32Array([this.buffer[2],  0]));\n        const L2 = new Uint64(new Uint32Array([this.buffer[1],  0]));\n        const L3 = new Uint64(new Uint32Array([this.buffer[0],  0]));\n\n        const R0 = new Uint64(new Uint32Array([other.buffer[3], 0]));\n        const R1 = new Uint64(new Uint32Array([other.buffer[2], 0]));\n        const R2 = new Uint64(new Uint32Array([other.buffer[1], 0]));\n        const R3 = new Uint64(new Uint32Array([other.buffer[0], 0]));\n\n        let product = Uint64.multiply(L3, R3);\n        this.buffer[0] = product.low();\n\n        let sum = new Uint64(new Uint32Array([product.high(), 0]));\n\n        product = Uint64.multiply(L2, R3);\n        sum.plus(product);\n\n        product = Uint64.multiply(L3, R2);\n        sum.plus(product);\n\n        this.buffer[1] = sum.low();\n\n        this.buffer[3] = (sum.lessThan(product) ? 1 : 0);\n\n        this.buffer[2] = sum.high();\n        let high = new Uint64(new Uint32Array(this.buffer.buffer, this.buffer.byteOffset + 8, 2));\n\n        high.plus(Uint64.multiply(L1, R3))\n            .plus(Uint64.multiply(L2, R2))\n            .plus(Uint64.multiply(L3, R1));\n        this.buffer[3] += Uint64.multiply(L0, R3)\n                        .plus(Uint64.multiply(L1, R2))\n                        .plus(Uint64.multiply(L2, R1))\n                        .plus(Uint64.multiply(L3, R0)).low();\n\n        return this;\n    }\n\n    public plus(other: Int128): Int128 {\n        let sums = new Uint32Array(4);\n        sums[3] = (this.buffer[3] + other.buffer[3]) >>> 0;\n        sums[2] = (this.buffer[2] + other.buffer[2]) >>> 0;\n        sums[1] = (this.buffer[1] + other.buffer[1]) >>> 0;\n        sums[0] = (this.buffer[0] + other.buffer[0]) >>> 0;\n\n        if (sums[0] < (this.buffer[0] >>> 0)) {\n            ++sums[1];\n        }\n        if (sums[1] < (this.buffer[1] >>> 0)) {\n            ++sums[2];\n        }\n        if (sums[2] < (this.buffer[2] >>> 0)) {\n            ++sums[3];\n        }\n\n        this.buffer[3] = sums[3];\n        this.buffer[2] = sums[2];\n        this.buffer[1] = sums[1];\n        this.buffer[0] = sums[0];\n\n        return this;\n    }\n\n    public hex(): string {\n        return `${intAsHex(this.buffer[3])} ${intAsHex(this.buffer[2])} ${intAsHex(this.buffer[1])} ${intAsHex(this.buffer[0])}`;\n    }\n\n    /** @nocollapse */\n    public static multiply(left: Int128, right: Int128): Int128 {\n        let rtrn = new Int128(new Uint32Array(left.buffer));\n        return rtrn.times(right);\n    }\n\n    /** @nocollapse */\n    public static add(left: Int128, right: Int128): Int128 {\n        let rtrn = new Int128(new Uint32Array(left.buffer));\n        return rtrn.plus(right);\n    }\n\n    /** @nocollapse */\n    public static from(val: any, out_buffer = new Uint32Array(4)): Int128 {\n        return Int128.fromString(\n            typeof(val) === 'string' ? val : val.toString(),\n            out_buffer\n        );\n    }\n\n    /** @nocollapse */\n    public static fromNumber(num: number, out_buffer = new Uint32Array(4)): Int128 {\n        // Always parse numbers as strings - pulling out high and low bits\n        // directly seems to lose precision sometimes\n        // For example:\n        //     > -4613034156400212000 >>> 0\n        //     721782784\n        // The correct lower 32-bits are 721782752\n        return Int128.fromString(num.toString(), out_buffer);\n    }\n\n    /** @nocollapse */\n    public static fromString(str: string, out_buffer = new Uint32Array(4)): Int128 {\n        // TODO: Assert that out_buffer is 0 and length = 4\n        const negate = str.startsWith('-');\n        const length = str.length;\n\n        let out = new Int128(out_buffer);\n        for (let posn = negate ? 1 : 0; posn < length;) {\n            const group = kInt32DecimalDigits < length - posn ?\n                          kInt32DecimalDigits : length - posn;\n            const chunk = new Int128(new Uint32Array([parseInt(str.substr(posn, group), 10), 0, 0, 0]));\n            const multiple = new Int128(new Uint32Array([kPowersOfTen[group], 0, 0, 0]));\n\n            out.times(multiple);\n            out.plus(chunk);\n\n            posn += group;\n        }\n\n        return negate ? out.negate() : out;\n    }\n\n    /** @nocollapse */\n    public static convertArray(values: (string|number)[]): Uint32Array {\n        // TODO: Distinguish between string and number at compile-time\n        const data = new Uint32Array(values.length * 4);\n        for (let i = -1, n = values.length; ++i < n;) {\n            Int128.from(values[i], new Uint32Array(data.buffer, data.byteOffset + 4 * 4 * i, 4));\n        }\n        return data;\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport * as type from '../type';\nimport { Field } from '../schema';\nimport { Vector } from '../vector';\nimport { DataType } from '../type';\nimport { Visitor } from '../visitor';\nimport { packBools } from '../util/bit';\nimport { encodeUtf8 } from '../util/utf8';\nimport { Int64, Int128 } from '../util/int';\nimport { UnionMode, DateUnit } from '../enum';\nimport { toArrayBufferView } from '../util/buffer';\nimport { BufferRegion, FieldNode } from '../ipc/metadata/message';\n\n/** @ignore */\nexport interface VectorLoader extends Visitor {\n    visit<T extends DataType>(node: Field<T> | T): Data<T>;\n    visitMany<T extends DataType>(nodes: (Field<T> | T)[]): Data<T>[];\n}\n\n/** @ignore */\nexport class VectorLoader extends Visitor {\n    private bytes: Uint8Array;\n    private nodes: FieldNode[];\n    private nodesIndex: number = -1;\n    private buffers: BufferRegion[];\n    private buffersIndex: number = -1;\n    private dictionaries: Map<number, Vector<any>>;\n    constructor(bytes: Uint8Array, nodes: FieldNode[], buffers: BufferRegion[], dictionaries: Map<number, Vector<any>>) {\n        super();\n        this.bytes = bytes;\n        this.nodes = nodes;\n        this.buffers = buffers;\n        this.dictionaries = dictionaries;\n    }\n\n    public visit<T extends DataType>(node: Field<T> | T): Data<T> {\n        return super.visit(node instanceof Field ? node.type : node);\n    }\n\n    public visitNull            <T extends type.Null>            (type: T, { length,           } = this.nextFieldNode()) { return            Data.Null(type, 0, length);                                                                                                                                 }\n    public visitBool            <T extends type.Bool>            (type: T, { length, nullCount } = this.nextFieldNode()) { return            Data.Bool(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitInt             <T extends type.Int>             (type: T, { length, nullCount } = this.nextFieldNode()) { return             Data.Int(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitFloat           <T extends type.Float>           (type: T, { length, nullCount } = this.nextFieldNode()) { return           Data.Float(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitUtf8            <T extends type.Utf8>            (type: T, { length, nullCount } = this.nextFieldNode()) { return            Data.Utf8(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.readData(type));                                   }\n    public visitBinary          <T extends type.Binary>          (type: T, { length, nullCount } = this.nextFieldNode()) { return          Data.Binary(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.readData(type));                                   }\n    public visitFixedSizeBinary <T extends type.FixedSizeBinary> (type: T, { length, nullCount } = this.nextFieldNode()) { return Data.FixedSizeBinary(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitDate            <T extends type.Date_>           (type: T, { length, nullCount } = this.nextFieldNode()) { return            Data.Date(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitTimestamp       <T extends type.Timestamp>       (type: T, { length, nullCount } = this.nextFieldNode()) { return       Data.Timestamp(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitTime            <T extends type.Time>            (type: T, { length, nullCount } = this.nextFieldNode()) { return            Data.Time(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitDecimal         <T extends type.Decimal>         (type: T, { length, nullCount } = this.nextFieldNode()) { return         Data.Decimal(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitList            <T extends type.List>            (type: T, { length, nullCount } = this.nextFieldNode()) { return            Data.List(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.visit(type.children[0]));                          }\n    public visitStruct          <T extends type.Struct>          (type: T, { length, nullCount } = this.nextFieldNode()) { return          Data.Struct(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.visitMany(type.children));                                                 }\n    public visitUnion           <T extends type.Union>           (type: T                                              ) { return type.mode === UnionMode.Sparse ? this.visitSparseUnion(type as type.SparseUnion) : this.visitDenseUnion(type as type.DenseUnion);                                      }\n    public visitDenseUnion      <T extends type.DenseUnion>      (type: T, { length, nullCount } = this.nextFieldNode()) { return           Data.Union(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readTypeIds(type), this.readOffsets(type), this.visitMany(type.children)); }\n    public visitSparseUnion     <T extends type.SparseUnion>     (type: T, { length, nullCount } = this.nextFieldNode()) { return           Data.Union(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readTypeIds(type), this.visitMany(type.children));                         }\n    public visitDictionary      <T extends type.Dictionary>      (type: T, { length, nullCount } = this.nextFieldNode()) { return      Data.Dictionary(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type.indices), this.readDictionary(type));                        }\n    public visitInterval        <T extends type.Interval>        (type: T, { length, nullCount } = this.nextFieldNode()) { return        Data.Interval(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitFixedSizeList   <T extends type.FixedSizeList>   (type: T, { length, nullCount } = this.nextFieldNode()) { return   Data.FixedSizeList(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.visit(type.children[0]));                                                  }\n    public visitMap             <T extends type.Map_>            (type: T, { length, nullCount } = this.nextFieldNode()) { return             Data.Map(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.visit(type.children[0]));                          }\n\n    protected nextFieldNode() { return this.nodes[++this.nodesIndex]; }\n    protected nextBufferRange() { return this.buffers[++this.buffersIndex]; }\n    protected readNullBitmap<T extends DataType>(type: T, nullCount: number, buffer = this.nextBufferRange()) {\n        return nullCount > 0 && this.readData(type, buffer) || new Uint8Array(0);\n    }\n    protected readOffsets<T extends DataType>(type: T, buffer?: BufferRegion) { return this.readData(type, buffer); }\n    protected readTypeIds<T extends DataType>(type: T, buffer?: BufferRegion) { return this.readData(type, buffer); }\n    protected readData<T extends DataType>(_type: T, { length, offset } = this.nextBufferRange()) {\n        return this.bytes.subarray(offset, offset + length);\n    }\n    protected readDictionary<T extends type.Dictionary>(type: T): Vector<T['dictionary']> {\n        return this.dictionaries.get(type.id)!;\n    }\n}\n\n/** @ignore */\nexport class JSONVectorLoader extends VectorLoader {\n    private sources: any[][];\n    constructor(sources: any[][], nodes: FieldNode[], buffers: BufferRegion[], dictionaries: Map<number, Vector<any>>) {\n        super(new Uint8Array(0), nodes, buffers, dictionaries);\n        this.sources = sources;\n    }\n    protected readNullBitmap<T extends DataType>(_type: T, nullCount: number, { offset } = this.nextBufferRange()) {\n        return nullCount <= 0 ? new Uint8Array(0) : packBools(this.sources[offset]);\n    }\n    protected readOffsets<T extends DataType>(_type: T, { offset } = this.nextBufferRange()) {\n        return toArrayBufferView(Uint8Array, toArrayBufferView(Int32Array, this.sources[offset]));\n    }\n    protected readTypeIds<T extends DataType>(type: T, { offset } = this.nextBufferRange()) {\n        return toArrayBufferView(Uint8Array, toArrayBufferView(type.ArrayType, this.sources[offset]));\n    }\n    protected readData<T extends DataType>(type: T, { offset } = this.nextBufferRange()) {\n        const { sources } = this;\n        if (DataType.isTimestamp(type)) {\n            return toArrayBufferView(Uint8Array, Int64.convertArray(sources[offset] as string[]));\n        } else if ((DataType.isInt(type) || DataType.isTime(type)) && type.bitWidth === 64) {\n            return toArrayBufferView(Uint8Array, Int64.convertArray(sources[offset] as string[]));\n        } else if (DataType.isDate(type) && type.unit === DateUnit.MILLISECOND) {\n            return toArrayBufferView(Uint8Array, Int64.convertArray(sources[offset] as string[]));\n        } else if (DataType.isDecimal(type)) {\n            return toArrayBufferView(Uint8Array, Int128.convertArray(sources[offset] as string[]));\n        } else if (DataType.isBinary(type) || DataType.isFixedSizeBinary(type)) {\n            return binaryDataFromJSON(sources[offset] as string[]);\n        } else if (DataType.isBool(type)) {\n            return packBools(sources[offset] as number[]);\n        } else if (DataType.isUtf8(type)) {\n            return encodeUtf8((sources[offset] as string[]).join(''));\n        }\n        return toArrayBufferView(Uint8Array, toArrayBufferView(type.ArrayType, sources[offset].map((x) => +x)));\n    }\n}\n\n/** @ignore */\nfunction binaryDataFromJSON(values: string[]) {\n    // \"DATA\": [\"49BC7D5B6C47D2\",\"3F5FB6D9322026\"]\n    // There are definitely more efficient ways to do this... but it gets the\n    // job done.\n    const joined = values.join('');\n    const data = new Uint8Array(joined.length / 2);\n    for (let i = 0; i < joined.length; i += 2) {\n        data[i >> 1] = parseInt(joined.substr(i, 2), 16);\n    }\n    return data;\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { flatbuffers } from 'flatbuffers';\nimport Long = flatbuffers.Long;\nimport Builder = flatbuffers.Builder;\nimport * as Schema_ from '../fb/Schema';\n\nimport * as type from '../type';\nimport { Visitor } from '../visitor';\n\nimport Null = Schema_.org.apache.arrow.flatbuf.Null;\nimport Int = Schema_.org.apache.arrow.flatbuf.Int;\nimport FloatingPoint = Schema_.org.apache.arrow.flatbuf.FloatingPoint;\nimport Binary = Schema_.org.apache.arrow.flatbuf.Binary;\nimport Bool = Schema_.org.apache.arrow.flatbuf.Bool;\nimport Utf8 = Schema_.org.apache.arrow.flatbuf.Utf8;\nimport Decimal = Schema_.org.apache.arrow.flatbuf.Decimal;\nimport Date = Schema_.org.apache.arrow.flatbuf.Date;\nimport Time = Schema_.org.apache.arrow.flatbuf.Time;\nimport Timestamp = Schema_.org.apache.arrow.flatbuf.Timestamp;\nimport Interval = Schema_.org.apache.arrow.flatbuf.Interval;\nimport List = Schema_.org.apache.arrow.flatbuf.List;\nimport Struct = Schema_.org.apache.arrow.flatbuf.Struct_;\nimport Union = Schema_.org.apache.arrow.flatbuf.Union;\nimport DictionaryEncoding = Schema_.org.apache.arrow.flatbuf.DictionaryEncoding;\nimport FixedSizeBinary = Schema_.org.apache.arrow.flatbuf.FixedSizeBinary;\nimport FixedSizeList = Schema_.org.apache.arrow.flatbuf.FixedSizeList;\nimport Map_ = Schema_.org.apache.arrow.flatbuf.Map;\n\n/** @ignore */\nexport interface TypeAssembler extends Visitor {\n    visit<T extends type.DataType>(node: T, builder: Builder): number | undefined;\n}\n\n/** @ignore */\nexport class TypeAssembler extends Visitor {\n    public visit<T extends type.DataType>(node: T, builder: Builder): number | undefined {\n        return (node == null || builder == null) ? undefined : super.visit(node, builder);\n    }\n    public visitNull<T extends type.Null>(_node: T, b: Builder) {\n        Null.startNull(b);\n        return Null.endNull(b);\n    }\n    public visitInt<T extends type.Int>(node: T, b: Builder) {\n        Int.startInt(b);\n        Int.addBitWidth(b, node.bitWidth);\n        Int.addIsSigned(b, node.isSigned);\n        return Int.endInt(b);\n    }\n    public visitFloat<T extends type.Float>(node: T, b: Builder) {\n        FloatingPoint.startFloatingPoint(b);\n        FloatingPoint.addPrecision(b, node.precision);\n        return FloatingPoint.endFloatingPoint(b);\n    }\n    public visitBinary<T extends type.Binary>(_node: T, b: Builder) {\n        Binary.startBinary(b);\n        return Binary.endBinary(b);\n    }\n    public visitBool<T extends type.Bool>(_node: T, b: Builder) {\n        Bool.startBool(b);\n        return Bool.endBool(b);\n    }\n    public visitUtf8<T extends type.Utf8>(_node: T, b: Builder) {\n        Utf8.startUtf8(b);\n        return Utf8.endUtf8(b);\n    }\n    public visitDecimal<T extends type.Decimal>(node: T, b: Builder) {\n        Decimal.startDecimal(b);\n        Decimal.addScale(b, node.scale);\n        Decimal.addPrecision(b, node.precision);\n        return Decimal.endDecimal(b);\n    }\n    public visitDate<T extends type.Date_>(node: T, b: Builder) {\n        Date.startDate(b);\n        Date.addUnit(b, node.unit);\n        return Date.endDate(b);\n    }\n    public visitTime<T extends type.Time>(node: T, b: Builder) {\n        Time.startTime(b);\n        Time.addUnit(b, node.unit);\n        Time.addBitWidth(b, node.bitWidth);\n        return Time.endTime(b);\n    }\n    public visitTimestamp<T extends type.Timestamp>(node: T, b: Builder) {\n        const timezone = (node.timezone && b.createString(node.timezone)) || undefined;\n        Timestamp.startTimestamp(b);\n        Timestamp.addUnit(b, node.unit);\n        if (timezone !== undefined) {\n            Timestamp.addTimezone(b, timezone);\n        }\n        return Timestamp.endTimestamp(b);\n    }\n    public visitInterval<T extends type.Interval>(node: T, b: Builder) {\n        Interval.startInterval(b);\n        Interval.addUnit(b, node.unit);\n        return Interval.endInterval(b);\n    }\n    public visitList<T extends type.List>(_node: T, b: Builder) {\n        List.startList(b);\n        return List.endList(b);\n    }\n    public visitStruct<T extends type.Struct>(_node: T, b: Builder) {\n        Struct.startStruct_(b);\n        return Struct.endStruct_(b);\n    }\n    public visitUnion<T extends type.Union>(node: T, b: Builder) {\n        Union.startTypeIdsVector(b, node.typeIds.length);\n        const typeIds = Union.createTypeIdsVector(b, node.typeIds);\n        Union.startUnion(b);\n        Union.addMode(b, node.mode);\n        Union.addTypeIds(b, typeIds);\n        return Union.endUnion(b);\n    }\n    public visitDictionary<T extends type.Dictionary>(node: T, b: Builder) {\n        const indexType = this.visit(node.indices, b);\n        DictionaryEncoding.startDictionaryEncoding(b);\n        DictionaryEncoding.addId(b, new Long(node.id, 0));\n        DictionaryEncoding.addIsOrdered(b, node.isOrdered);\n        if (indexType !== undefined) {\n            DictionaryEncoding.addIndexType(b, indexType);\n        }\n        return DictionaryEncoding.endDictionaryEncoding(b);\n    }\n    public visitFixedSizeBinary<T extends type.FixedSizeBinary>(node: T, b: Builder) {\n        FixedSizeBinary.startFixedSizeBinary(b);\n        FixedSizeBinary.addByteWidth(b, node.byteWidth);\n        return FixedSizeBinary.endFixedSizeBinary(b);\n    }\n    public visitFixedSizeList<T extends type.FixedSizeList>(node: T, b: Builder) {\n        FixedSizeList.startFixedSizeList(b);\n        FixedSizeList.addListSize(b, node.listSize);\n        return FixedSizeList.endFixedSizeList(b);\n    }\n    public visitMap<T extends type.Map_>(node: T, b: Builder) {\n        Map_.startMap(b);\n        Map_.addKeysSorted(b, node.keysSorted);\n        return Map_.endMap(b);\n    }\n}\n\n/** @ignore */\nexport const instance = new TypeAssembler();\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Schema, Field } from '../../schema';\nimport {\n    DataType, Dictionary, TimeBitWidth,\n    Utf8, Binary, Decimal, FixedSizeBinary,\n    List, FixedSizeList, Map_, Struct, Union,\n    Bool, Null, Int, Float, Date_, Time, Interval, Timestamp, IntBitWidth, Int32, TKeys,\n} from '../../type';\n\nimport { DictionaryBatch, RecordBatch, FieldNode, BufferRegion } from './message';\nimport { TimeUnit, Precision, IntervalUnit, UnionMode, DateUnit } from '../../enum';\n\n/** @ignore */\nexport function schemaFromJSON(_schema: any, dictionaries: Map<number, DataType> = new Map()) {\n    return new Schema(\n        schemaFieldsFromJSON(_schema, dictionaries),\n        customMetadataFromJSON(_schema['customMetadata']),\n        dictionaries\n    );\n}\n\n/** @ignore */\nexport function recordBatchFromJSON(b: any) {\n    return new RecordBatch(\n        b['count'],\n        fieldNodesFromJSON(b['columns']),\n        buffersFromJSON(b['columns'])\n    );\n}\n\n/** @ignore */\nexport function dictionaryBatchFromJSON(b: any) {\n    return new DictionaryBatch(\n        recordBatchFromJSON(b['data']),\n        b['id'], b['isDelta']\n    );\n}\n\n/** @ignore */\nfunction schemaFieldsFromJSON(_schema: any, dictionaries?: Map<number, DataType>) {\n    return (_schema['fields'] || []).filter(Boolean).map((f: any) => Field.fromJSON(f, dictionaries));\n}\n\n/** @ignore */\nfunction fieldChildrenFromJSON(_field: any, dictionaries?: Map<number, DataType>): Field[] {\n    return (_field['children'] || []).filter(Boolean).map((f: any) => Field.fromJSON(f, dictionaries));\n}\n\n/** @ignore */\nfunction fieldNodesFromJSON(xs: any[]): FieldNode[] {\n    return (xs || []).reduce<FieldNode[]>((fieldNodes, column: any) => [\n        ...fieldNodes,\n        new FieldNode(\n            column['count'],\n            nullCountFromJSON(column['VALIDITY'])\n        ),\n        ...fieldNodesFromJSON(column['children'])\n    ], [] as FieldNode[]);\n}\n\n/** @ignore */\nfunction buffersFromJSON(xs: any[], buffers: BufferRegion[] = []): BufferRegion[] {\n    for (let i = -1, n = (xs || []).length; ++i < n;) {\n        const column = xs[i];\n        column['VALIDITY'] && buffers.push(new BufferRegion(buffers.length, column['VALIDITY'].length));\n        column['TYPE'] && buffers.push(new BufferRegion(buffers.length, column['TYPE'].length));\n        column['OFFSET'] && buffers.push(new BufferRegion(buffers.length, column['OFFSET'].length));\n        column['DATA'] && buffers.push(new BufferRegion(buffers.length, column['DATA'].length));\n        buffers = buffersFromJSON(column['children'], buffers);\n    }\n    return buffers;\n}\n\n/** @ignore */\nfunction nullCountFromJSON(validity: number[]) {\n    return (validity || []).reduce((sum, val) => sum + +(val === 0), 0);\n}\n\n/** @ignore */\nexport function fieldFromJSON(_field: any, dictionaries?: Map<number, DataType>) {\n\n    let id: number;\n    let keys: TKeys | null;\n    let field: Field | void;\n    let dictMeta: any;\n    let type: DataType<any>;\n    let dictType: Dictionary;\n\n    // If no dictionary encoding\n    if (!dictionaries || !(dictMeta = _field['dictionary'])) {\n        type = typeFromJSON(_field, fieldChildrenFromJSON(_field, dictionaries));\n        field = new Field(_field['name'], type, _field['nullable'], customMetadataFromJSON(_field['customMetadata']));\n    }\n    // tslint:disable\n    // If dictionary encoded and the first time we've seen this dictionary id, decode\n    // the data type and child fields, then wrap in a Dictionary type and insert the\n    // data type into the dictionary types map.\n    else if (!dictionaries.has(id = dictMeta['id'])) {\n        // a dictionary index defaults to signed 32 bit int if unspecified\n        keys = (keys = dictMeta['indexType']) ? indexTypeFromJSON(keys) as TKeys : new Int32();\n        dictionaries.set(id, type = typeFromJSON(_field, fieldChildrenFromJSON(_field, dictionaries)));\n        dictType = new Dictionary(type, keys, id, dictMeta['isOrdered']);\n        field = new Field(_field['name'], dictType, _field['nullable'], customMetadataFromJSON(_field['customMetadata']));\n    }\n    // If dictionary encoded, and have already seen this dictionary Id in the schema, then reuse the\n    // data type and wrap in a new Dictionary type and field.\n    else {\n        // a dictionary index defaults to signed 32 bit int if unspecified\n        keys = (keys = dictMeta['indexType']) ? indexTypeFromJSON(keys) as TKeys : new Int32();\n        dictType = new Dictionary(dictionaries.get(id)!, keys, id, dictMeta['isOrdered']);\n        field = new Field(_field['name'], dictType, _field['nullable'], customMetadataFromJSON(_field['customMetadata']));\n    }\n    return field || null;\n}\n\n/** @ignore */\nfunction customMetadataFromJSON(_metadata?: object) {\n    return new Map<string, string>(Object.entries(_metadata || {}));\n}\n\n/** @ignore */\nfunction indexTypeFromJSON(_type: any) {\n    return new Int(_type['isSigned'], _type['bitWidth']);\n}\n\n/** @ignore */\nfunction typeFromJSON(f: any, children?: Field[]): DataType<any> {\n\n    const typeId = f['type']['name'];\n\n    switch (typeId) {\n        case 'NONE':   return new Null();\n        case 'null':   return new Null();\n        case 'binary': return new Binary();\n        case 'utf8':   return new Utf8();\n        case 'bool':   return new Bool();\n        case 'list':   return new List((children || [])[0]);\n        case 'struct': return new Struct(children || []);\n        case 'struct_': return new Struct(children || []);\n    }\n\n    switch (typeId) {\n        case 'int': {\n            const t = f['type'];\n            return new Int(t['isSigned'], t['bitWidth'] as IntBitWidth);\n        }\n        case 'floatingpoint': {\n            const t = f['type'];\n            return new Float(Precision[t['precision']] as any);\n        }\n        case 'decimal': {\n            const t = f['type'];\n            return new Decimal(t['scale'], t['precision']);\n        }\n        case 'date': {\n            const t = f['type'];\n            return new Date_(DateUnit[t['unit']] as any);\n        }\n        case 'time': {\n            const t = f['type'];\n            return new Time(TimeUnit[t['unit']] as any, t['bitWidth'] as TimeBitWidth);\n        }\n        case 'timestamp': {\n            const t = f['type'];\n            return new Timestamp(TimeUnit[t['unit']] as any, t['timezone']);\n        }\n        case 'interval': {\n            const t = f['type'];\n            return new Interval(IntervalUnit[t['unit']] as any);\n        }\n        case 'union': {\n            const t = f['type'];\n            return new Union(UnionMode[t['mode']] as any, (t['typeIds'] || []), children || []);\n        }\n        case 'fixedsizebinary': {\n            const t = f['type'];\n            return new FixedSizeBinary(t['byteWidth']);\n        }\n        case 'fixedsizelist': {\n            const t = f['type'];\n            return new FixedSizeList(t['listSize'], (children || [])[0]);\n        }\n        case 'map': {\n            const t = f['type'];\n            return new Map_((children || [])[0], t['keysSorted']);\n        }\n    }\n    throw new Error(`Unrecognized type: \"${typeId}\"`);\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { flatbuffers } from 'flatbuffers';\nimport * as Schema_ from '../../fb/Schema';\nimport * as Message_ from '../../fb/Message';\n\nimport { Schema, Field } from '../../schema';\nimport { toUint8Array } from '../../util/buffer';\nimport { ArrayBufferViewInput } from '../../util/buffer';\nimport { MessageHeader, MetadataVersion } from '../../enum';\nimport { instance as typeAssembler } from '../../visitor/typeassembler';\nimport { fieldFromJSON, schemaFromJSON, recordBatchFromJSON, dictionaryBatchFromJSON } from './json';\n\nimport Long = flatbuffers.Long;\nimport Builder = flatbuffers.Builder;\nimport ByteBuffer = flatbuffers.ByteBuffer;\nimport _Int = Schema_.org.apache.arrow.flatbuf.Int;\nimport Type = Schema_.org.apache.arrow.flatbuf.Type;\nimport _Field = Schema_.org.apache.arrow.flatbuf.Field;\nimport _Schema = Schema_.org.apache.arrow.flatbuf.Schema;\nimport _Buffer = Schema_.org.apache.arrow.flatbuf.Buffer;\nimport _Message = Message_.org.apache.arrow.flatbuf.Message;\nimport _KeyValue = Schema_.org.apache.arrow.flatbuf.KeyValue;\nimport _FieldNode = Message_.org.apache.arrow.flatbuf.FieldNode;\nimport _Endianness = Schema_.org.apache.arrow.flatbuf.Endianness;\nimport _RecordBatch = Message_.org.apache.arrow.flatbuf.RecordBatch;\nimport _DictionaryBatch = Message_.org.apache.arrow.flatbuf.DictionaryBatch;\nimport _DictionaryEncoding = Schema_.org.apache.arrow.flatbuf.DictionaryEncoding;\n\nimport {\n    DataType, Dictionary, TimeBitWidth,\n    Utf8, Binary, Decimal, FixedSizeBinary,\n    List, FixedSizeList, Map_, Struct, Union,\n    Bool, Null, Int, Float, Date_, Time, Interval, Timestamp, IntBitWidth, Int32, TKeys,\n} from '../../type';\n\n/**\n * @ignore\n * @private\n **/\nexport class Message<T extends MessageHeader = any> {\n\n    /** @nocollapse */\n    public static fromJSON<T extends MessageHeader>(msg: any, headerType: T): Message<T> {\n        const message = new Message(0, MetadataVersion.V4, headerType);\n        message._createHeader = messageHeaderFromJSON(msg, headerType);\n        return message;\n    }\n\n    /** @nocollapse */\n    public static decode(buf: ArrayBufferViewInput) {\n        buf = new ByteBuffer(toUint8Array(buf));\n        const _message = _Message.getRootAsMessage(buf);\n        const bodyLength: Long = _message.bodyLength()!;\n        const version: MetadataVersion = _message.version();\n        const headerType: MessageHeader = _message.headerType();\n        const message = new Message(bodyLength, version, headerType);\n        message._createHeader = decodeMessageHeader(_message, headerType);\n        return message;\n    }\n\n    /** @nocollapse */\n    public static encode<T extends MessageHeader>(message: Message<T>) {\n        let b = new Builder(), headerOffset = -1;\n        if (message.isSchema()) {\n            headerOffset = Schema.encode(b, message.header() as Schema);\n        } else if (message.isRecordBatch()) {\n            headerOffset = RecordBatch.encode(b, message.header() as RecordBatch);\n        } else if (message.isDictionaryBatch()) {\n            headerOffset = DictionaryBatch.encode(b, message.header() as DictionaryBatch);\n        }\n        _Message.startMessage(b);\n        _Message.addVersion(b, MetadataVersion.V4);\n        _Message.addHeader(b, headerOffset);\n        _Message.addHeaderType(b, message.headerType);\n        _Message.addBodyLength(b, new Long(message.bodyLength, 0));\n        _Message.finishMessageBuffer(b, _Message.endMessage(b));\n        return b.asUint8Array();\n    }\n\n    /** @nocollapse */\n    public static from(header: Schema | RecordBatch | DictionaryBatch, bodyLength = 0) {\n        if (header instanceof Schema) {\n            return new Message(0, MetadataVersion.V4, MessageHeader.Schema, header);\n        }\n        if (header instanceof RecordBatch) {\n            return new Message(bodyLength, MetadataVersion.V4, MessageHeader.RecordBatch, header);\n        }\n        if (header instanceof DictionaryBatch) {\n            return new Message(bodyLength, MetadataVersion.V4, MessageHeader.DictionaryBatch, header);\n        }\n        throw new Error(`Unrecognized Message header: ${header}`);\n    }\n\n    // @ts-ignore\n    public body: Uint8Array;\n    protected _headerType: T;\n    protected _bodyLength: number;\n    protected _version: MetadataVersion;\n    public get type() { return this.headerType; }\n    public get version() { return this._version; }\n    public get headerType() { return this._headerType; }\n    public get bodyLength() { return this._bodyLength; }\n    // @ts-ignore\n    protected _createHeader: MessageHeaderDecoder;\n    public header() { return this._createHeader<T>(); }\n    public isSchema(): this is Message<MessageHeader.Schema> { return this.headerType === MessageHeader.Schema; }\n    public isRecordBatch(): this is Message<MessageHeader.RecordBatch> { return this.headerType === MessageHeader.RecordBatch; }\n    public isDictionaryBatch(): this is Message<MessageHeader.DictionaryBatch> { return this.headerType === MessageHeader.DictionaryBatch; }\n\n    constructor(bodyLength: Long | number, version: MetadataVersion, headerType: T, header?: any) {\n        this._version = version;\n        this._headerType = headerType;\n        this.body = new Uint8Array(0);\n        header && (this._createHeader = () => header);\n        this._bodyLength = typeof bodyLength === 'number' ? bodyLength : bodyLength.low;\n    }\n}\n\n/**\n * @ignore\n * @private\n **/\nexport class RecordBatch {\n    protected _length: number;\n    protected _nodes: FieldNode[];\n    protected _buffers: BufferRegion[];\n    public get nodes() { return this._nodes; }\n    public get length() { return this._length; }\n    public get buffers() { return this._buffers; }\n    constructor(length: Long | number, nodes: FieldNode[], buffers: BufferRegion[]) {\n        this._nodes = nodes;\n        this._buffers = buffers;\n        this._length = typeof length === 'number' ? length : length.low;\n    }\n}\n\n/**\n * @ignore\n * @private\n **/\nexport class DictionaryBatch {\n\n    protected _id: number;\n    protected _isDelta: boolean;\n    protected _data: RecordBatch;\n    public get id() { return this._id; }\n    public get data() { return this._data; }\n    public get isDelta() { return this._isDelta; }\n    public get length(): number { return this.data.length; }\n    public get nodes(): FieldNode[] { return this.data.nodes; }\n    public get buffers(): BufferRegion[] { return this.data.buffers; }\n\n    constructor(data: RecordBatch, id: Long | number, isDelta: boolean = false) {\n        this._data = data;\n        this._isDelta = isDelta;\n        this._id = typeof id === 'number' ? id : id.low;\n    }\n}\n\n/**\n * @ignore\n * @private\n **/\nexport class BufferRegion {\n    public offset: number;\n    public length: number;\n    constructor(offset: Long | number, length: Long | number) {\n        this.offset = typeof offset === 'number' ? offset : offset.low;\n        this.length = typeof length === 'number' ? length : length.low;\n    }\n}\n\n/**\n * @ignore\n * @private\n **/\nexport class FieldNode {\n    public length: number;\n    public nullCount: number;\n    constructor(length: Long | number, nullCount: Long | number) {\n        this.length = typeof length === 'number' ? length : length.low;\n        this.nullCount = typeof nullCount === 'number' ? nullCount : nullCount.low;\n    }\n}\n\n/** @ignore */\nfunction messageHeaderFromJSON(message: any, type: MessageHeader) {\n    return (() => {\n        switch (type) {\n            case MessageHeader.Schema: return Schema.fromJSON(message);\n            case MessageHeader.RecordBatch: return RecordBatch.fromJSON(message);\n            case MessageHeader.DictionaryBatch: return DictionaryBatch.fromJSON(message);\n        }\n        throw new Error(`Unrecognized Message type: { name: ${MessageHeader[type]}, type: ${type} }`);\n    }) as MessageHeaderDecoder;\n}\n\n/** @ignore */\nfunction decodeMessageHeader(message: _Message, type: MessageHeader) {\n    return (() => {\n        switch (type) {\n            case MessageHeader.Schema: return Schema.decode(message.header(new _Schema())!);\n            case MessageHeader.RecordBatch: return RecordBatch.decode(message.header(new _RecordBatch())!, message.version());\n            case MessageHeader.DictionaryBatch: return DictionaryBatch.decode(message.header(new _DictionaryBatch())!, message.version());\n        }\n        throw new Error(`Unrecognized Message type: { name: ${MessageHeader[type]}, type: ${type} }`);\n    }) as MessageHeaderDecoder;\n}\n\nField['encode'] = encodeField;\nField['decode'] = decodeField;\nField['fromJSON'] = fieldFromJSON;\n\nSchema['encode'] = encodeSchema;\nSchema['decode'] = decodeSchema;\nSchema['fromJSON'] = schemaFromJSON;\n\nRecordBatch['encode'] = encodeRecordBatch;\nRecordBatch['decode'] = decodeRecordBatch;\nRecordBatch['fromJSON'] = recordBatchFromJSON;\n\nDictionaryBatch['encode'] = encodeDictionaryBatch;\nDictionaryBatch['decode'] = decodeDictionaryBatch;\nDictionaryBatch['fromJSON'] = dictionaryBatchFromJSON;\n\nFieldNode['encode'] = encodeFieldNode;\nFieldNode['decode'] = decodeFieldNode;\n\nBufferRegion['encode'] = encodeBufferRegion;\nBufferRegion['decode'] = decodeBufferRegion;\n\ndeclare module '../../schema' {\n    namespace Field {\n        export { encodeField as encode };\n        export { decodeField as decode };\n        export { fieldFromJSON as fromJSON };\n    }\n    namespace Schema {\n        export { encodeSchema as encode };\n        export { decodeSchema as decode };\n        export { schemaFromJSON as fromJSON };\n    }\n}\n\ndeclare module './message' {\n    namespace RecordBatch {\n        export { encodeRecordBatch as encode };\n        export { decodeRecordBatch as decode };\n        export { recordBatchFromJSON as fromJSON };\n    }\n    namespace DictionaryBatch {\n        export { encodeDictionaryBatch as encode };\n        export { decodeDictionaryBatch as decode };\n        export { dictionaryBatchFromJSON as fromJSON };\n    }\n    namespace FieldNode {\n        export { encodeFieldNode as encode };\n        export { decodeFieldNode as decode };\n    }\n    namespace BufferRegion {\n        export { encodeBufferRegion as encode };\n        export { decodeBufferRegion as decode };\n    }\n}\n\n/** @ignore */\nfunction decodeSchema(_schema: _Schema, dictionaries: Map<number, DataType> = new Map()) {\n    const fields = decodeSchemaFields(_schema, dictionaries);\n    return new Schema(fields, decodeCustomMetadata(_schema), dictionaries);\n}\n\n/** @ignore */\nfunction decodeRecordBatch(batch: _RecordBatch, version = MetadataVersion.V4) {\n    return new RecordBatch(batch.length(), decodeFieldNodes(batch), decodeBuffers(batch, version));\n}\n\n/** @ignore */\nfunction decodeDictionaryBatch(batch: _DictionaryBatch, version = MetadataVersion.V4) {\n    return new DictionaryBatch(RecordBatch.decode(batch.data()!, version), batch.id(), batch.isDelta());\n}\n\n/** @ignore */\nfunction decodeBufferRegion(b: _Buffer) {\n    return new BufferRegion(b.offset(), b.length());\n}\n\n/** @ignore */\nfunction decodeFieldNode(f: _FieldNode) {\n    return new FieldNode(f.length(), f.nullCount());\n}\n\n/** @ignore */\nfunction decodeFieldNodes(batch: _RecordBatch) {\n    const nodes = [] as FieldNode[];\n    for (let f, i = -1, j = -1, n = batch.nodesLength(); ++i < n;) {\n        if (f = batch.nodes(i)) {\n            nodes[++j] = FieldNode.decode(f);\n        }\n    }\n    return nodes;\n}\n\n/** @ignore */\nfunction decodeBuffers(batch: _RecordBatch, version: MetadataVersion) {\n    const bufferRegions = [] as BufferRegion[];\n    for (let b, i = -1, j = -1, n = batch.buffersLength(); ++i < n;) {\n        if (b = batch.buffers(i)) {\n        // If this Arrow buffer was written before version 4,\n        // advance the buffer's bb_pos 8 bytes to skip past\n        // the now-removed page_id field\n        if (version < MetadataVersion.V4) {\n                b.bb_pos += (8 * (i + 1));\n            }\n            bufferRegions[++j] = BufferRegion.decode(b);\n        }\n    }\n    return bufferRegions;\n}\n\n/** @ignore */\nfunction decodeSchemaFields(schema: _Schema, dictionaries?: Map<number, DataType>) {\n    const fields = [] as Field[];\n    for (let f, i = -1, j = -1, n = schema.fieldsLength(); ++i < n;) {\n        if (f = schema.fields(i)) {\n            fields[++j] = Field.decode(f, dictionaries);\n        }\n    }\n    return fields;\n}\n\n/** @ignore */\nfunction decodeFieldChildren(field: _Field, dictionaries?: Map<number, DataType>): Field[] {\n    const children = [] as Field[];\n    for (let f, i = -1, j = -1, n = field.childrenLength(); ++i < n;) {\n        if (f = field.children(i)) {\n            children[++j] = Field.decode(f, dictionaries);\n        }\n    }\n    return children;\n}\n\n/** @ignore */\nfunction decodeField(f: _Field, dictionaries?: Map<number, DataType>) {\n\n    let id: number;\n    let field: Field | void;\n    let type: DataType<any>;\n    let keys: _Int | TKeys | null;\n    let dictType: Dictionary;\n    let dictMeta: _DictionaryEncoding | null;\n\n    // If no dictionary encoding\n    if (!dictionaries || !(dictMeta = f.dictionary())) {\n        type = decodeFieldType(f, decodeFieldChildren(f, dictionaries));\n        field = new Field(f.name()!, type, f.nullable(), decodeCustomMetadata(f));\n    }\n    // tslint:disable\n    // If dictionary encoded and the first time we've seen this dictionary id, decode\n    // the data type and child fields, then wrap in a Dictionary type and insert the\n    // data type into the dictionary types map.\n    else if (!dictionaries.has(id = dictMeta.id().low)) {\n        // a dictionary index defaults to signed 32 bit int if unspecified\n        keys = (keys = dictMeta.indexType()) ? decodeIndexType(keys) as TKeys : new Int32();\n        dictionaries.set(id, type = decodeFieldType(f, decodeFieldChildren(f, dictionaries)));\n        dictType = new Dictionary(type, keys, id, dictMeta.isOrdered());\n        field = new Field(f.name()!, dictType, f.nullable(), decodeCustomMetadata(f));\n    }\n    // If dictionary encoded, and have already seen this dictionary Id in the schema, then reuse the\n    // data type and wrap in a new Dictionary type and field.\n    else {\n        // a dictionary index defaults to signed 32 bit int if unspecified\n        keys = (keys = dictMeta.indexType()) ? decodeIndexType(keys) as TKeys : new Int32();\n        dictType = new Dictionary(dictionaries.get(id)!, keys, id, dictMeta.isOrdered());\n        field = new Field(f.name()!, dictType, f.nullable(), decodeCustomMetadata(f));\n    }\n    return field || null;\n}\n\n/** @ignore */\nfunction decodeCustomMetadata(parent?: _Schema | _Field | null) {\n    const data = new Map<string, string>();\n    if (parent) {\n        for (let entry, key, i = -1, n = parent.customMetadataLength() | 0; ++i < n;) {\n            if ((entry = parent.customMetadata(i)) && (key = entry.key()) != null) {\n                data.set(key, entry.value()!);\n            }\n        }\n    }\n    return data;\n}\n\n/** @ignore */\nfunction decodeIndexType(_type: _Int) {\n    return new Int(_type.isSigned(), _type.bitWidth() as IntBitWidth);\n}\n\n/** @ignore */\nfunction decodeFieldType(f: _Field, children?: Field[]): DataType<any> {\n\n    const typeId = f.typeType();\n\n    switch (typeId) {\n        case Type.NONE:    return new Null();\n        case Type.Null:    return new Null();\n        case Type.Binary:  return new Binary();\n        case Type.Utf8:    return new Utf8();\n        case Type.Bool:    return new Bool();\n        case Type.List:    return new List((children || [])[0]);\n        case Type.Struct_: return new Struct(children || []);\n    }\n\n    switch (typeId) {\n        case Type.Int: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Int())!;\n            return new Int(t.isSigned(), t.bitWidth());\n        }\n        case Type.FloatingPoint: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.FloatingPoint())!;\n            return new Float(t.precision());\n        }\n        case Type.Decimal: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Decimal())!;\n            return new Decimal(t.scale(), t.precision());\n        }\n        case Type.Date: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Date())!;\n            return new Date_(t.unit());\n        }\n        case Type.Time: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Time())!;\n            return new Time(t.unit(), t.bitWidth() as TimeBitWidth);\n        }\n        case Type.Timestamp: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Timestamp())!;\n            return new Timestamp(t.unit(), t.timezone());\n        }\n        case Type.Interval: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Interval())!;\n            return new Interval(t.unit());\n        }\n        case Type.Union: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Union())!;\n            return new Union(t.mode(), t.typeIdsArray() || [], children || []);\n        }\n        case Type.FixedSizeBinary: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.FixedSizeBinary())!;\n            return new FixedSizeBinary(t.byteWidth());\n        }\n        case Type.FixedSizeList: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.FixedSizeList())!;\n            return new FixedSizeList(t.listSize(), (children || [])[0]);\n        }\n        case Type.Map: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Map())!;\n            return new Map_((children || [])[0], t.keysSorted());\n        }\n    }\n    throw new Error(`Unrecognized type: \"${Type[typeId]}\" (${typeId})`);\n}\n\n/** @ignore */\nfunction encodeSchema(b: Builder, schema: Schema) {\n\n    const fieldOffsets = schema.fields.map((f) => Field.encode(b, f));\n\n    _Schema.startFieldsVector(b, fieldOffsets.length);\n\n    const fieldsVectorOffset = _Schema.createFieldsVector(b, fieldOffsets);\n\n    const metadataOffset = !(schema.metadata && schema.metadata.size > 0) ? -1 :\n        _Schema.createCustomMetadataVector(b, [...schema.metadata].map(([k, v]) => {\n            const key = b.createString(`${k}`);\n            const val = b.createString(`${v}`);\n            _KeyValue.startKeyValue(b);\n            _KeyValue.addKey(b, key);\n            _KeyValue.addValue(b, val);\n            return _KeyValue.endKeyValue(b);\n        }));\n\n    _Schema.startSchema(b);\n    _Schema.addFields(b, fieldsVectorOffset);\n    _Schema.addEndianness(b, platformIsLittleEndian ? _Endianness.Little : _Endianness.Big);\n\n    if (metadataOffset !== -1) { _Schema.addCustomMetadata(b, metadataOffset); }\n\n    return _Schema.endSchema(b);\n}\n\n/** @ignore */\nfunction encodeField(b: Builder, field: Field) {\n\n    let nameOffset = -1;\n    let typeOffset = -1;\n    let dictionaryOffset = -1;\n\n    let type = field.type;\n    let typeId: Type = <any> field.typeId;\n\n    if (!DataType.isDictionary(type)) {\n        typeOffset = typeAssembler.visit(type, b)!;\n    } else {\n        typeId = type.dictionary.typeId;\n        dictionaryOffset = typeAssembler.visit(type, b)!;\n        typeOffset = typeAssembler.visit(type.dictionary, b)!;\n    }\n\n    const childOffsets = (type.children || []).map((f: Field) => Field.encode(b, f));\n    const childrenVectorOffset = _Field.createChildrenVector(b, childOffsets);\n\n    const metadataOffset = !(field.metadata && field.metadata.size > 0) ? -1 :\n        _Field.createCustomMetadataVector(b, [...field.metadata].map(([k, v]) => {\n            const key = b.createString(`${k}`);\n            const val = b.createString(`${v}`);\n            _KeyValue.startKeyValue(b);\n            _KeyValue.addKey(b, key);\n            _KeyValue.addValue(b, val);\n            return _KeyValue.endKeyValue(b);\n        }));\n\n    if (field.name) {\n        nameOffset = b.createString(field.name);\n    }\n\n    _Field.startField(b);\n    _Field.addType(b, typeOffset);\n    _Field.addTypeType(b, typeId);\n    _Field.addChildren(b, childrenVectorOffset);\n    _Field.addNullable(b, !!field.nullable);\n\n    if (nameOffset !== -1) { _Field.addName(b, nameOffset); }\n    if (dictionaryOffset !== -1) { _Field.addDictionary(b, dictionaryOffset); }\n    if (metadataOffset !== -1) { _Field.addCustomMetadata(b, metadataOffset); }\n\n    return _Field.endField(b);\n}\n\n/** @ignore */\nfunction encodeRecordBatch(b: Builder, recordBatch: RecordBatch) {\n\n    const nodes = recordBatch.nodes || [];\n    const buffers = recordBatch.buffers || [];\n\n    _RecordBatch.startNodesVector(b, nodes.length);\n    nodes.slice().reverse().forEach((n) => FieldNode.encode(b, n));\n\n    const nodesVectorOffset = b.endVector();\n\n    _RecordBatch.startBuffersVector(b, buffers.length);\n    buffers.slice().reverse().forEach((b_) => BufferRegion.encode(b, b_));\n\n    const buffersVectorOffset = b.endVector();\n\n    _RecordBatch.startRecordBatch(b);\n    _RecordBatch.addLength(b, new Long(recordBatch.length, 0));\n    _RecordBatch.addNodes(b, nodesVectorOffset);\n    _RecordBatch.addBuffers(b, buffersVectorOffset);\n    return _RecordBatch.endRecordBatch(b);\n}\n\n/** @ignore */\nfunction encodeDictionaryBatch(b: Builder, dictionaryBatch: DictionaryBatch) {\n    const dataOffset = RecordBatch.encode(b, dictionaryBatch.data);\n    _DictionaryBatch.startDictionaryBatch(b);\n    _DictionaryBatch.addId(b, new Long(dictionaryBatch.id, 0));\n    _DictionaryBatch.addIsDelta(b, dictionaryBatch.isDelta);\n    _DictionaryBatch.addData(b, dataOffset);\n    return _DictionaryBatch.endDictionaryBatch(b);\n}\n\n/** @ignore */\nfunction encodeFieldNode(b: Builder, node: FieldNode) {\n    return _FieldNode.createFieldNode(b, new Long(node.length, 0), new Long(node.nullCount, 0));\n}\n\n/** @ignore */\nfunction encodeBufferRegion(b: Builder, node: BufferRegion) {\n    return _Buffer.createBuffer(b, new Long(node.offset, 0), new Long(node.length, 0));\n}\n\n/** @ignore */\nconst platformIsLittleEndian = (function() {\n    const buffer = new ArrayBuffer(2);\n    new DataView(buffer).setInt16(0, 256, true /* littleEndian */);\n    // Int16Array uses the platform's endianness.\n    return new Int16Array(buffer)[0] === 256;\n})();\n\n/** @ignore */\ntype MessageHeaderDecoder = <T extends MessageHeader>() => T extends MessageHeader.Schema ? Schema\n                                                         : T extends MessageHeader.RecordBatch ? RecordBatch\n                                                         : T extends MessageHeader.DictionaryBatch ? DictionaryBatch : never;\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { MessageHeader } from '../enum';\nimport { flatbuffers } from 'flatbuffers';\nimport ByteBuffer = flatbuffers.ByteBuffer;\nimport { Message } from './metadata/message';\nimport { isFileHandle } from '../util/compat';\nimport { AsyncRandomAccessFile } from '../io/file';\nimport { toUint8Array, ArrayBufferViewInput } from '../util/buffer';\nimport { ByteStream, ReadableSource, AsyncByteStream } from '../io/stream';\nimport { ArrowJSON, ArrowJSONLike, ITERATOR_DONE, FileHandle } from '../io/interfaces';\n\n/** @ignore */ const invalidMessageType       = (type: MessageHeader) => `Expected ${MessageHeader[type]} Message in stream, but was null or length 0.`;\n/** @ignore */ const nullMessage              = (type: MessageHeader) => `Header pointer of flatbuffer-encoded ${MessageHeader[type]} Message is null or length 0.`;\n/** @ignore */ const invalidMessageMetadata   = (expected: number, actual: number) => `Expected to read ${expected} metadata bytes, but only read ${actual}.`;\n/** @ignore */ const invalidMessageBodyLength = (expected: number, actual: number) => `Expected to read ${expected} bytes for message body, but only read ${actual}.`;\n\n/** @ignore */\nexport class MessageReader implements IterableIterator<Message> {\n    protected source: ByteStream;\n    constructor(source: ByteStream | ArrayBufferViewInput | Iterable<ArrayBufferViewInput>) {\n        this.source = source instanceof ByteStream ? source : new ByteStream(source);\n    }\n    public [Symbol.iterator](): IterableIterator<Message> { return this as IterableIterator<Message>; }\n    public next(): IteratorResult<Message> {\n        let r;\n        if ((r = this.readMetadataLength()).done) { return ITERATOR_DONE; }\n        // ARROW-6313: If the first 4 bytes are continuation indicator (-1), read\n        // the next 4 for the 32-bit metadata length. Otherwise, assume this is a\n        // pre-v0.15 message, where the first 4 bytes are the metadata length.\n        if ((r.value === -1) &&\n            (r = this.readMetadataLength()).done) { return ITERATOR_DONE; }\n        if ((r = this.readMetadata(r.value)).done) { return ITERATOR_DONE; }\n        return (<any> r) as IteratorResult<Message>;\n    }\n    public throw(value?: any) { return this.source.throw(value); }\n    public return(value?: any) { return this.source.return(value); }\n    public readMessage<T extends MessageHeader>(type?: T | null) {\n        let r: IteratorResult<Message<T>>;\n        if ((r = this.next()).done) { return null; }\n        if ((type != null) && r.value.headerType !== type) {\n            throw new Error(invalidMessageType(type));\n        }\n        return r.value;\n    }\n    public readMessageBody(bodyLength: number): Uint8Array {\n        if (bodyLength <= 0) { return new Uint8Array(0); }\n        const buf = toUint8Array(this.source.read(bodyLength));\n        if (buf.byteLength < bodyLength) {\n            throw new Error(invalidMessageBodyLength(bodyLength, buf.byteLength));\n        }\n        // 1. Work around bugs in fs.ReadStream's internal Buffer pooling, see: https://github.com/nodejs/node/issues/24817\n        // 2. Work around https://github.com/whatwg/streams/blob/0ebe4b042e467d9876d80ae045de3843092ad797/reference-implementation/lib/helpers.js#L126\n        return /* 1. */ (buf.byteOffset % 8 === 0) &&\n               /* 2. */ (buf.byteOffset + buf.byteLength) <= buf.buffer.byteLength ? buf : buf.slice();\n    }\n    public readSchema(throwIfNull = false) {\n        const type = MessageHeader.Schema;\n        const message = this.readMessage(type);\n        const schema = message && message.header();\n        if (throwIfNull && !schema) {\n            throw new Error(nullMessage(type));\n        }\n        return schema;\n    }\n    protected readMetadataLength(): IteratorResult<number> {\n        const buf = this.source.read(PADDING);\n        const bb = buf && new ByteBuffer(buf);\n        const len = bb && bb.readInt32(0) || 0;\n        return { done: len === 0, value: len };\n    }\n    protected readMetadata(metadataLength: number): IteratorResult<Message> {\n        const buf = this.source.read(metadataLength);\n        if (!buf) { return ITERATOR_DONE; }\n        if (buf.byteLength < metadataLength) {\n            throw new Error(invalidMessageMetadata(metadataLength, buf.byteLength));\n        }\n        return { done: false, value: Message.decode(buf) };\n    }\n}\n\n/** @ignore */\nexport class AsyncMessageReader implements AsyncIterableIterator<Message> {\n    protected source: AsyncByteStream;\n    constructor(source: ReadableSource<Uint8Array>);\n    constructor(source: FileHandle, byteLength?: number);\n    constructor(source: any, byteLength?: number) {\n        this.source = source instanceof AsyncByteStream ? source\n            : isFileHandle(source)\n            ? new AsyncRandomAccessFile(source, byteLength!)\n            : new AsyncByteStream(source);\n    }\n    public [Symbol.asyncIterator](): AsyncIterableIterator<Message> { return this as AsyncIterableIterator<Message>; }\n    public async next(): Promise<IteratorResult<Message>> {\n        let r;\n        if ((r = await this.readMetadataLength()).done) { return ITERATOR_DONE; }\n        // ARROW-6313: If the first 4 bytes are continuation indicator (-1), read\n        // the next 4 for the 32-bit metadata length. Otherwise, assume this is a\n        // pre-v0.15 message, where the first 4 bytes are the metadata length.\n        if ((r.value === -1) &&\n            (r = await this.readMetadataLength()).done) { return ITERATOR_DONE; }\n        if ((r = await this.readMetadata(r.value)).done) { return ITERATOR_DONE; }\n        return (<any> r) as IteratorResult<Message>;\n    }\n    public async throw(value?: any) { return await this.source.throw(value); }\n    public async return(value?: any) { return await this.source.return(value); }\n    public async readMessage<T extends MessageHeader>(type?: T | null) {\n        let r: IteratorResult<Message<T>>;\n        if ((r = await this.next()).done) { return null; }\n        if ((type != null) && r.value.headerType !== type) {\n            throw new Error(invalidMessageType(type));\n        }\n        return r.value;\n    }\n    public async readMessageBody(bodyLength: number): Promise<Uint8Array> {\n        if (bodyLength <= 0) { return new Uint8Array(0); }\n        const buf = toUint8Array(await this.source.read(bodyLength));\n        if (buf.byteLength < bodyLength) {\n            throw new Error(invalidMessageBodyLength(bodyLength, buf.byteLength));\n        }\n        // 1. Work around bugs in fs.ReadStream's internal Buffer pooling, see: https://github.com/nodejs/node/issues/24817\n        // 2. Work around https://github.com/whatwg/streams/blob/0ebe4b042e467d9876d80ae045de3843092ad797/reference-implementation/lib/helpers.js#L126\n        return /* 1. */ (buf.byteOffset % 8 === 0) &&\n               /* 2. */ (buf.byteOffset + buf.byteLength) <= buf.buffer.byteLength ? buf : buf.slice();\n    }\n    public async readSchema(throwIfNull = false) {\n        const type = MessageHeader.Schema;\n        const message = await this.readMessage(type);\n        const schema = message && message.header();\n        if (throwIfNull && !schema) {\n            throw new Error(nullMessage(type));\n        }\n        return schema;\n    }\n    protected async readMetadataLength(): Promise<IteratorResult<number>> {\n        const buf = await this.source.read(PADDING);\n        const bb = buf && new ByteBuffer(buf);\n        const len = bb && bb.readInt32(0) || 0;\n        return { done: len === 0, value: len };\n    }\n    protected async readMetadata(metadataLength: number): Promise<IteratorResult<Message>> {\n        const buf = await this.source.read(metadataLength);\n        if (!buf) { return ITERATOR_DONE; }\n        if (buf.byteLength < metadataLength) {\n            throw new Error(invalidMessageMetadata(metadataLength, buf.byteLength));\n        }\n        return { done: false, value: Message.decode(buf) };\n    }\n}\n\n/** @ignore */\nexport class JSONMessageReader extends MessageReader {\n    private _schema = false;\n    private _json: ArrowJSON;\n    private _body: any[] = [];\n    private _batchIndex = 0;\n    private _dictionaryIndex = 0;\n    constructor(source: ArrowJSON | ArrowJSONLike) {\n        super(new Uint8Array(0));\n        this._json = source instanceof ArrowJSON ? source : new ArrowJSON(source);\n    }\n    public next() {\n        const { _json } = this;\n        if (!this._schema) {\n            this._schema = true;\n            const message = Message.fromJSON(_json.schema, MessageHeader.Schema);\n            return { done: false, value: message };\n        }\n        if (this._dictionaryIndex < _json.dictionaries.length) {\n            const batch = _json.dictionaries[this._dictionaryIndex++];\n            this._body = batch['data']['columns'];\n            const message = Message.fromJSON(batch, MessageHeader.DictionaryBatch);\n            return { done: false, value: message };\n        }\n        if (this._batchIndex < _json.batches.length) {\n            const batch = _json.batches[this._batchIndex++];\n            this._body = batch['columns'];\n            const message = Message.fromJSON(batch, MessageHeader.RecordBatch);\n            return { done: false, value: message };\n        }\n        this._body = [];\n        return ITERATOR_DONE;\n    }\n    public readMessageBody(_bodyLength?: number) {\n        return flattenDataSources(this._body) as any;\n        function flattenDataSources(xs: any[]): any[][] {\n            return (xs || []).reduce<any[][]>((buffers, column: any) => [\n                ...buffers,\n                ...(column['VALIDITY'] && [column['VALIDITY']] || []),\n                ...(column['TYPE'] && [column['TYPE']] || []),\n                ...(column['OFFSET'] && [column['OFFSET']] || []),\n                ...(column['DATA'] && [column['DATA']] || []),\n                ...flattenDataSources(column['children'])\n            ], [] as any[][]);\n        }\n    }\n    public readMessage<T extends MessageHeader>(type?: T | null) {\n        let r: IteratorResult<Message<T>>;\n        if ((r = this.next()).done) { return null; }\n        if ((type != null) && r.value.headerType !== type) {\n            throw new Error(invalidMessageType(type));\n        }\n        return r.value;\n    }\n    public readSchema() {\n        const type = MessageHeader.Schema;\n        const message = this.readMessage(type);\n        const schema = message && message.header();\n        if (!message || !schema) {\n            throw new Error(nullMessage(type));\n        }\n        return schema;\n    }\n}\n\n/** @ignore */\nexport const PADDING = 4;\n/** @ignore */\nexport const MAGIC_STR = 'ARROW1';\n/** @ignore */\nexport const MAGIC = new Uint8Array(MAGIC_STR.length);\n\nfor (let i = 0; i < MAGIC_STR.length; i += 1 | 0) {\n    MAGIC[i] = MAGIC_STR.charCodeAt(i);\n}\n\n/** @ignore */\nexport function checkForMagicArrowString(buffer: Uint8Array, index = 0) {\n    for (let i = -1, n = MAGIC.length; ++i < n;) {\n        if (MAGIC[i] !== buffer[index + i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\n/** @ignore */\nexport const magicLength = MAGIC.length;\n/** @ignore */\nexport const magicAndPadding = magicLength + PADDING;\n/** @ignore */\nexport const magicX2AndPadding = magicLength * 2 + PADDING;\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Vector } from '../vector';\nimport { Visitor } from '../visitor';\nimport { Type, UnionMode } from '../enum';\nimport { RecordBatch } from '../recordbatch';\nimport { VectorType as V } from '../interfaces';\nimport { rebaseValueOffsets } from '../util/buffer';\nimport { packBools, truncateBitmap } from '../util/bit';\nimport { selectVectorChildrenArgs } from '../util/args';\nimport { BufferRegion, FieldNode } from '../ipc/metadata/message';\nimport {\n    DataType, Dictionary,\n    Float, Int, Date_, Interval, Time, Timestamp, Union,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\n} from '../type';\n\n/** @ignore */\nexport interface VectorAssembler extends Visitor {\n    visit<T extends Vector>(node: T): this;\n    visitMany<T extends Vector>(nodes: T[]): this[];\n    getVisitFn<T extends Type>(node: T): (vector: V<T>) => this;\n    getVisitFn<T extends DataType>(node: V<T> | Data<T> | T): (vector: V<T>) => this;\n\n    visitBool                 <T extends Bool>            (vector: V<T>): this;\n    visitInt                  <T extends Int>             (vector: V<T>): this;\n    visitFloat                <T extends Float>           (vector: V<T>): this;\n    visitUtf8                 <T extends Utf8>            (vector: V<T>): this;\n    visitBinary               <T extends Binary>          (vector: V<T>): this;\n    visitFixedSizeBinary      <T extends FixedSizeBinary> (vector: V<T>): this;\n    visitDate                 <T extends Date_>           (vector: V<T>): this;\n    visitTimestamp            <T extends Timestamp>       (vector: V<T>): this;\n    visitTime                 <T extends Time>            (vector: V<T>): this;\n    visitDecimal              <T extends Decimal>         (vector: V<T>): this;\n    visitList                 <T extends List>            (vector: V<T>): this;\n    visitStruct               <T extends Struct>          (vector: V<T>): this;\n    visitUnion                <T extends Union>           (vector: V<T>): this;\n    visitInterval             <T extends Interval>        (vector: V<T>): this;\n    visitFixedSizeList        <T extends FixedSizeList>   (vector: V<T>): this;\n    visitMap                  <T extends Map_>            (vector: V<T>): this;\n}\n\n/** @ignore */\nexport class VectorAssembler extends Visitor {\n\n    /** @nocollapse */\n    public static assemble<T extends Vector | RecordBatch>(...args: (T | T[])[]) {\n        const assembler = new VectorAssembler();\n        const vectorChildren = selectVectorChildrenArgs(RecordBatch, args);\n        const [assembleResult = assembler] = assembler.visitMany(vectorChildren);\n        return assembleResult;\n    }\n\n    private constructor() { super(); }\n\n    public visit<T extends Vector>(vector: T): this {\n        if (!DataType.isDictionary(vector.type)) {\n            const { data, length, nullCount } = vector;\n            if (length > 2147483647) {\n                /* istanbul ignore next */\n                throw new RangeError('Cannot write arrays larger than 2^31 - 1 in length');\n            }\n            if (!DataType.isNull(vector.type)) {\n                addBuffer.call(this, nullCount <= 0\n                    ? new Uint8Array(0) // placeholder validity buffer\n                    : truncateBitmap(data.offset, length, data.nullBitmap)\n                );\n            }\n            this.nodes.push(new FieldNode(length, nullCount));\n        }\n        return super.visit(vector);\n    }\n\n    public visitNull<T extends Null>(_nullV: V<T>) {\n        return this;\n    }\n    public visitDictionary<T extends Dictionary>(vector: V<T>) {\n        // Assemble the indices here, Dictionary assembled separately.\n        return this.visit(vector.indices);\n    }\n\n    public get nodes() { return this._nodes; }\n    public get buffers() { return this._buffers; }\n    public get byteLength() { return this._byteLength; }\n    public get bufferRegions() { return this._bufferRegions; }\n\n    protected _byteLength = 0;\n    protected _nodes: FieldNode[] = [];\n    protected _buffers: ArrayBufferView[] = [];\n    protected _bufferRegions: BufferRegion[] = [];\n}\n\n/** @ignore */\nfunction addBuffer(this: VectorAssembler, values: ArrayBufferView) {\n    const byteLength = (values.byteLength + 7) & ~7; // Round up to a multiple of 8\n    this.buffers.push(values);\n    this.bufferRegions.push(new BufferRegion(this._byteLength, byteLength));\n    this._byteLength += byteLength;\n    return this;\n}\n\n/** @ignore */\nfunction assembleUnion<T extends Union>(this: VectorAssembler, vector: V<T>) {\n    const { type, length, typeIds, valueOffsets } = vector;\n    // All Union Vectors have a typeIds buffer\n    addBuffer.call(this, typeIds);\n    // If this is a Sparse Union, treat it like all other Nested types\n    if (type.mode === UnionMode.Sparse) {\n        return assembleNestedVector.call(this, vector);\n    } else if (type.mode === UnionMode.Dense) {\n        // If this is a Dense Union, add the valueOffsets buffer and potentially slice the children\n        if (vector.offset <= 0) {\n            // If the Vector hasn't been sliced, write the existing valueOffsets\n            addBuffer.call(this, valueOffsets);\n            // We can treat this like all other Nested types\n            return assembleNestedVector.call(this, vector);\n        } else {\n            // A sliced Dense Union is an unpleasant case. Because the offsets are different for\n            // each child vector, we need to \"rebase\" the valueOffsets for each child\n            // Union typeIds are not necessary 0-indexed\n            const maxChildTypeId = typeIds.reduce((x, y) => Math.max(x, y), typeIds[0]);\n            const childLengths = new Int32Array(maxChildTypeId + 1);\n            // Set all to -1 to indicate that we haven't observed a first occurrence of a particular child yet\n            const childOffsets = new Int32Array(maxChildTypeId + 1).fill(-1);\n            const shiftedOffsets = new Int32Array(length);\n            // If we have a non-zero offset, then the value offsets do not start at\n            // zero. We must a) create a new offsets array with shifted offsets and\n            // b) slice the values array accordingly\n            const unshiftedOffsets = rebaseValueOffsets(-valueOffsets[0], length, valueOffsets);\n            for (let typeId, shift, index = -1; ++index < length;) {\n                if ((shift = childOffsets[typeId = typeIds[index]]) === -1) {\n                    shift = childOffsets[typeId] = unshiftedOffsets[typeId];\n                }\n                shiftedOffsets[index] = unshiftedOffsets[index] - shift;\n                ++childLengths[typeId];\n            }\n            addBuffer.call(this, shiftedOffsets);\n            // Slice and visit children accordingly\n            for (let child: Vector | null, childIndex = -1, numChildren = type.children.length; ++childIndex < numChildren;) {\n                if (child = vector.getChildAt(childIndex)) {\n                    const typeId = type.typeIds[childIndex];\n                    const childLength = Math.min(length, childLengths[typeId]);\n                    this.visit(child.slice(childOffsets[typeId], childLength));\n                }\n            }\n        }\n    }\n    return this;\n}\n\n/** @ignore */\nfunction assembleBoolVector<T extends Bool>(this: VectorAssembler, vector: V<T>) {\n    // Bool vector is a special case of FlatVector, as its data buffer needs to stay packed\n    let values: Uint8Array;\n    if (vector.nullCount >= vector.length) {\n        // If all values are null, just insert a placeholder empty data buffer (fastest path)\n        return addBuffer.call(this, new Uint8Array(0));\n    } else if ((values = vector.values) instanceof Uint8Array) {\n        // If values is already a Uint8Array, slice the bitmap (fast path)\n        return addBuffer.call(this, truncateBitmap(vector.offset, vector.length, values));\n    }\n    // Otherwise if the underlying data *isn't* a Uint8Array, enumerate the\n    // values as bools and re-pack them into a Uint8Array. This code isn't\n    // reachable unless you're trying to manipulate the Data internals,\n    // we we're only doing this for safety.\n    /* istanbul ignore next */\n    return addBuffer.call(this, packBools(vector));\n}\n\n/** @ignore */\nfunction assembleFlatVector<T extends Int | Float | FixedSizeBinary | Date_ | Timestamp | Time | Decimal | Interval>(this: VectorAssembler, vector: V<T>) {\n    return addBuffer.call(this, vector.values.subarray(0, vector.length * vector.stride));\n}\n\n/** @ignore */\nfunction assembleFlatListVector<T extends Utf8 | Binary>(this: VectorAssembler, vector: V<T>) {\n    const { length, values, valueOffsets } = vector;\n    const firstOffset = valueOffsets[0];\n    const lastOffset = valueOffsets[length];\n    const byteLength = Math.min(lastOffset - firstOffset, values.byteLength - firstOffset);\n    // Push in the order FlatList types read their buffers\n    addBuffer.call(this, rebaseValueOffsets(-valueOffsets[0], length, valueOffsets)); // valueOffsets buffer first\n    addBuffer.call(this, values.subarray(firstOffset, firstOffset + byteLength)); // sliced values buffer second\n    return this;\n}\n\n/** @ignore */\nfunction assembleListVector<T extends Map_ | List | FixedSizeList>(this: VectorAssembler, vector: V<T>) {\n    const { length, valueOffsets } = vector;\n    // If we have valueOffsets (MapVector, ListVector), push that buffer first\n    if (valueOffsets) {\n        addBuffer.call(this, rebaseValueOffsets(valueOffsets[0], length, valueOffsets));\n    }\n    // Then insert the List's values child\n    return this.visit(vector.getChildAt(0)!);\n}\n\n/** @ignore */\nfunction assembleNestedVector<T extends Struct | Union>(this: VectorAssembler, vector: V<T>) {\n    return this.visitMany(vector.type.children.map((_, i) => vector.getChildAt(i)!).filter(Boolean))[0];\n}\n\nVectorAssembler.prototype.visitBool            =     assembleBoolVector;\nVectorAssembler.prototype.visitInt             =     assembleFlatVector;\nVectorAssembler.prototype.visitFloat           =     assembleFlatVector;\nVectorAssembler.prototype.visitUtf8            = assembleFlatListVector;\nVectorAssembler.prototype.visitBinary          = assembleFlatListVector;\nVectorAssembler.prototype.visitFixedSizeBinary =     assembleFlatVector;\nVectorAssembler.prototype.visitDate            =     assembleFlatVector;\nVectorAssembler.prototype.visitTimestamp       =     assembleFlatVector;\nVectorAssembler.prototype.visitTime            =     assembleFlatVector;\nVectorAssembler.prototype.visitDecimal         =     assembleFlatVector;\nVectorAssembler.prototype.visitList            =     assembleListVector;\nVectorAssembler.prototype.visitStruct          =   assembleNestedVector;\nVectorAssembler.prototype.visitUnion           =          assembleUnion;\nVectorAssembler.prototype.visitInterval        =     assembleFlatVector;\nVectorAssembler.prototype.visitFixedSizeList   =     assembleListVector;\nVectorAssembler.prototype.visitMap             =     assembleListVector;\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Table } from '../table';\nimport { MAGIC } from './message';\nimport { Vector } from '../vector';\nimport { Column } from '../column';\nimport { DataType } from '../type';\nimport { Schema, Field } from '../schema';\nimport { Message } from './metadata/message';\nimport * as metadata from './metadata/message';\nimport { FileBlock, Footer } from './metadata/file';\nimport { MessageHeader, MetadataVersion } from '../enum';\nimport { WritableSink, AsyncByteQueue } from '../io/stream';\nimport { VectorAssembler } from '../visitor/vectorassembler';\nimport { JSONTypeAssembler } from '../visitor/jsontypeassembler';\nimport { JSONVectorAssembler } from '../visitor/jsonvectorassembler';\nimport { ArrayBufferViewInput, toUint8Array } from '../util/buffer';\nimport { RecordBatch, _InternalEmptyPlaceholderRecordBatch } from '../recordbatch';\nimport { Writable, ReadableInterop, ReadableDOMStreamOptions } from '../io/interfaces';\nimport { isPromise, isAsyncIterable, isWritableDOMStream, isWritableNodeStream, isIterable, isObject } from '../util/compat';\n\nexport interface RecordBatchStreamWriterOptions {\n    /**\n     *\n     */\n    autoDestroy?: boolean;\n    /**\n     * A flag indicating whether the RecordBatchWriter should construct pre-0.15.0\n     * encapsulated IPC Messages, which reserves  4 bytes for the Message metadata\n     * length instead of 8.\n     * @see https://issues.apache.org/jira/browse/ARROW-6313\n     */\n    writeLegacyIpcFormat?: boolean;\n}\n\nexport class RecordBatchWriter<T extends { [key: string]: DataType } = any> extends ReadableInterop<Uint8Array> implements Writable<RecordBatch<T>> {\n\n    /** @nocollapse */\n    // @ts-ignore\n    public static throughNode(options?: import('stream').DuplexOptions & { autoDestroy: boolean }): import('stream').Duplex {\n        throw new Error(`\"throughNode\" not available in this environment`);\n    }\n    /** @nocollapse */\n    public static throughDOM<T extends { [key: string]: DataType }>(\n        // @ts-ignore\n        writableStrategy?: QueuingStrategy<RecordBatch<T>> & { autoDestroy: boolean },\n        // @ts-ignore\n        readableStrategy?: { highWaterMark?: number, size?: any }\n    ): { writable: WritableStream<Table<T> | RecordBatch<T>>, readable: ReadableStream<Uint8Array> } {\n        throw new Error(`\"throughDOM\" not available in this environment`);\n    }\n\n    constructor(options?: RecordBatchStreamWriterOptions) {\n        super();\n        isObject(options) || (options = { autoDestroy: true, writeLegacyIpcFormat: false });\n        this._autoDestroy = (typeof options.autoDestroy === 'boolean') ? options.autoDestroy : true;\n        this._writeLegacyIpcFormat = (typeof options.writeLegacyIpcFormat === 'boolean') ? options.writeLegacyIpcFormat : false;\n    }\n\n    protected _position = 0;\n    protected _started = false;\n    protected _autoDestroy: boolean;\n    protected _writeLegacyIpcFormat: boolean;\n    // @ts-ignore\n    protected _sink = new AsyncByteQueue();\n    protected _schema: Schema | null = null;\n    protected _dictionaryBlocks: FileBlock[] = [];\n    protected _recordBatchBlocks: FileBlock[] = [];\n    protected _dictionaryDeltaOffsets = new Map<number, number>();\n\n    public toString(sync: true): string;\n    public toString(sync?: false): Promise<string>;\n    public toString(sync: any = false) {\n        return this._sink.toString(sync) as Promise<string> | string;\n    }\n    public toUint8Array(sync: true): Uint8Array;\n    public toUint8Array(sync?: false): Promise<Uint8Array>;\n    public toUint8Array(sync: any = false) {\n        return this._sink.toUint8Array(sync) as Promise<Uint8Array> | Uint8Array;\n    }\n\n    public writeAll(input: Table<T> | Iterable<RecordBatch<T>>): this;\n    public writeAll(input: AsyncIterable<RecordBatch<T>>): Promise<this>;\n    public writeAll(input: PromiseLike<AsyncIterable<RecordBatch<T>>>): Promise<this>;\n    public writeAll(input: PromiseLike<Table<T> | Iterable<RecordBatch<T>>>): Promise<this>;\n    public writeAll(input: PromiseLike<any> | Table<T> | Iterable<RecordBatch<T>> | AsyncIterable<RecordBatch<T>>) {\n        if (isPromise<any>(input)) {\n            return input.then((x) => this.writeAll(x));\n        } else if (isAsyncIterable<RecordBatch<T>>(input)) {\n            return writeAllAsync(this, input);\n        }\n        return writeAll(this, <any> input);\n    }\n\n    public get closed() { return this._sink.closed; }\n    public [Symbol.asyncIterator]() { return this._sink[Symbol.asyncIterator](); }\n    public toDOMStream(options?: ReadableDOMStreamOptions) { return this._sink.toDOMStream(options); }\n    public toNodeStream(options?: import('stream').ReadableOptions) { return this._sink.toNodeStream(options); }\n\n    public close() {\n        return this.reset()._sink.close();\n    }\n    public abort(reason?: any) {\n        return this.reset()._sink.abort(reason);\n    }\n    public finish() {\n        this._autoDestroy ? this.close() : this.reset(this._sink, this._schema);\n        return this;\n    }\n    public reset(sink: WritableSink<ArrayBufferViewInput> = this._sink, schema: Schema<T> | null = null) {\n\n        if ((sink === this._sink) || (sink instanceof AsyncByteQueue)) {\n            this._sink = sink as AsyncByteQueue;\n        } else {\n            this._sink = new AsyncByteQueue();\n            if (sink && isWritableDOMStream(sink)) {\n                this.toDOMStream({ type: 'bytes' }).pipeTo(sink);\n            } else if (sink && isWritableNodeStream(sink)) {\n                this.toNodeStream({ objectMode: false }).pipe(sink);\n            }\n        }\n\n        if (this._started && this._schema) {\n            this._writeFooter(this._schema);\n        }\n\n        this._started = false;\n        this._dictionaryBlocks = [];\n        this._recordBatchBlocks = [];\n        this._dictionaryDeltaOffsets = new Map();\n\n        if (!schema || !(schema.compareTo(this._schema))) {\n            if (schema === null) {\n                this._position = 0;\n                this._schema = null;\n            } else {\n                this._started = true;\n                this._schema = schema;\n                this._writeSchema(schema);\n            }\n        }\n\n        return this;\n    }\n\n    public write(payload?: Table<T> | RecordBatch<T> | Iterable<RecordBatch<T>> | null) {\n\n        let schema: Schema<T> | null = null;\n\n        if (!this._sink) {\n            throw new Error(`RecordBatchWriter is closed`);\n        } else if (payload === null || payload === undefined) {\n            return this.finish() && undefined;\n        } else if (payload instanceof Table && !(schema = payload.schema)) {\n            return this.finish() && undefined;\n        } else if (payload instanceof RecordBatch && !(schema = payload.schema)) {\n            return this.finish() && undefined;\n        }\n\n        if (schema && !schema.compareTo(this._schema)) {\n            if (this._started && this._autoDestroy) {\n                return this.close();\n            }\n            this.reset(this._sink, schema);\n        }\n\n        if (payload instanceof RecordBatch) {\n            if (!(payload instanceof _InternalEmptyPlaceholderRecordBatch)) {\n                this._writeRecordBatch(payload);\n            }\n        } else if (payload instanceof Table) {\n            this.writeAll(payload.chunks);\n        } else if (isIterable(payload)) {\n            this.writeAll(payload);\n        }\n    }\n\n    protected _writeMessage<T extends MessageHeader>(message: Message<T>, alignment = 8) {\n\n        const a = alignment - 1;\n        const buffer = Message.encode(message);\n        const flatbufferSize = buffer.byteLength;\n        const prefixSize = !this._writeLegacyIpcFormat ? 8 : 4;\n        const alignedSize = (flatbufferSize + prefixSize + a) & ~a;\n        const nPaddingBytes = alignedSize - flatbufferSize - prefixSize;\n\n        if (message.headerType === MessageHeader.RecordBatch) {\n            this._recordBatchBlocks.push(new FileBlock(alignedSize, message.bodyLength, this._position));\n        } else if (message.headerType === MessageHeader.DictionaryBatch) {\n            this._dictionaryBlocks.push(new FileBlock(alignedSize, message.bodyLength, this._position));\n        }\n\n        // If not in legacy pre-0.15.0 mode, write the stream continuation indicator\n        if (!this._writeLegacyIpcFormat) {\n            this._write(Int32Array.of(-1));\n        }\n        // Write the flatbuffer size prefix including padding\n        this._write(Int32Array.of(alignedSize - prefixSize));\n        // Write the flatbuffer\n        if (flatbufferSize > 0) { this._write(buffer); }\n        // Write any padding\n        return this._writePadding(nPaddingBytes);\n    }\n\n    protected _write(chunk: ArrayBufferViewInput) {\n        if (this._started) {\n            const buffer = toUint8Array(chunk);\n            if (buffer && buffer.byteLength > 0) {\n                this._sink.write(buffer);\n                this._position += buffer.byteLength;\n            }\n        }\n        return this;\n    }\n\n    protected _writeSchema(schema: Schema<T>) {\n        return this._writeMessage(Message.from(schema));\n    }\n\n    // @ts-ignore\n    protected _writeFooter(schema: Schema<T>) {\n        // eos bytes\n        return this._writeLegacyIpcFormat\n            ? this._write(Int32Array.of(0))\n            : this._write(Int32Array.of(-1, 0));\n    }\n\n    protected _writeMagic() {\n        return this._write(MAGIC);\n    }\n\n    protected _writePadding(nBytes: number) {\n        return nBytes > 0 ? this._write(new Uint8Array(nBytes)) : this;\n    }\n\n    protected _writeRecordBatch(batch: RecordBatch<T>) {\n        const { byteLength, nodes, bufferRegions, buffers } = VectorAssembler.assemble(batch);\n        const recordBatch = new metadata.RecordBatch(batch.length, nodes, bufferRegions);\n        const message = Message.from(recordBatch, byteLength);\n        return this\n            ._writeDictionaries(batch)\n            ._writeMessage(message)\n            ._writeBodyBuffers(buffers);\n    }\n\n    protected _writeDictionaryBatch(dictionary: Vector, id: number, isDelta = false) {\n        this._dictionaryDeltaOffsets.set(id, dictionary.length + (this._dictionaryDeltaOffsets.get(id) || 0));\n        const { byteLength, nodes, bufferRegions, buffers } = VectorAssembler.assemble(dictionary);\n        const recordBatch = new metadata.RecordBatch(dictionary.length, nodes, bufferRegions);\n        const dictionaryBatch = new metadata.DictionaryBatch(recordBatch, id, isDelta);\n        const message = Message.from(dictionaryBatch, byteLength);\n        return this\n            ._writeMessage(message)\n            ._writeBodyBuffers(buffers);\n    }\n\n    protected _writeBodyBuffers(buffers: ArrayBufferView[]) {\n        let buffer: ArrayBufferView;\n        let size: number, padding: number;\n        for (let i = -1, n = buffers.length; ++i < n;) {\n            if ((buffer = buffers[i]) && (size = buffer.byteLength) > 0) {\n                this._write(buffer);\n                if ((padding = ((size + 7) & ~7) - size) > 0) {\n                    this._writePadding(padding);\n                }\n            }\n        }\n        return this;\n    }\n\n    protected _writeDictionaries(batch: RecordBatch<T>) {\n        for (let [id, dictionary] of batch.dictionaries) {\n            let offset = this._dictionaryDeltaOffsets.get(id) || 0;\n            if (offset === 0 || (dictionary = dictionary.slice(offset)).length > 0) {\n                const chunks = 'chunks' in dictionary ? (dictionary as any).chunks : [dictionary];\n                for (const chunk of chunks) {\n                    this._writeDictionaryBatch(chunk, id, offset > 0);\n                    offset += chunk.length;\n                }\n            }\n        }\n        return this;\n    }\n}\n\n/** @ignore */\nexport class RecordBatchStreamWriter<T extends { [key: string]: DataType } = any> extends RecordBatchWriter<T> {\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: Table<T> | Iterable<RecordBatch<T>>, options?: RecordBatchStreamWriterOptions): RecordBatchStreamWriter<T>;\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: AsyncIterable<RecordBatch<T>>, options?: RecordBatchStreamWriterOptions): Promise<RecordBatchStreamWriter<T>>;\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: PromiseLike<AsyncIterable<RecordBatch<T>>>, options?: RecordBatchStreamWriterOptions): Promise<RecordBatchStreamWriter<T>>;\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: PromiseLike<Table<T> | Iterable<RecordBatch<T>>>, options?: RecordBatchStreamWriterOptions): Promise<RecordBatchStreamWriter<T>>;\n    /** @nocollapse */\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: any, options?: RecordBatchStreamWriterOptions) {\n        const writer = new RecordBatchStreamWriter<T>(options);\n        if (isPromise<any>(input)) {\n            return input.then((x) => writer.writeAll(x));\n        } else if (isAsyncIterable<RecordBatch<T>>(input)) {\n            return writeAllAsync(writer, input);\n        }\n        return writeAll(writer, input);\n    }\n}\n\n/** @ignore */\nexport class RecordBatchFileWriter<T extends { [key: string]: DataType } = any> extends RecordBatchWriter<T> {\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: Table<T> | Iterable<RecordBatch<T>>): RecordBatchFileWriter<T>;\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: AsyncIterable<RecordBatch<T>>): Promise<RecordBatchFileWriter<T>>;\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: PromiseLike<AsyncIterable<RecordBatch<T>>>): Promise<RecordBatchFileWriter<T>>;\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: PromiseLike<Table<T> | Iterable<RecordBatch<T>>>): Promise<RecordBatchFileWriter<T>>;\n    /** @nocollapse */\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: any) {\n        const writer = new RecordBatchFileWriter<T>();\n        if (isPromise<any>(input)) {\n            return input.then((x) => writer.writeAll(x));\n        } else if (isAsyncIterable<RecordBatch<T>>(input)) {\n            return writeAllAsync(writer, input);\n        }\n        return writeAll(writer, input);\n    }\n\n    constructor() {\n        super();\n        this._autoDestroy = true;\n    }\n\n    // @ts-ignore\n    protected _writeSchema(schema: Schema<T>) {\n        return this._writeMagic()._writePadding(2);\n    }\n\n    protected _writeFooter(schema: Schema<T>) {\n        const buffer = Footer.encode(new Footer(\n            schema, MetadataVersion.V4,\n            this._recordBatchBlocks, this._dictionaryBlocks\n        ));\n        return super\n            ._writeFooter(schema) // EOS bytes for sequential readers\n            ._write(buffer) // Write the flatbuffer\n            ._write(Int32Array.of(buffer.byteLength)) // then the footer size suffix\n            ._writeMagic(); // then the magic suffix\n    }\n}\n\n/** @ignore */\nexport class RecordBatchJSONWriter<T extends { [key: string]: DataType } = any> extends RecordBatchWriter<T> {\n\n    public static writeAll<T extends { [key: string]: DataType } = any>(this: typeof RecordBatchWriter, input: Table<T> | Iterable<RecordBatch<T>>): RecordBatchJSONWriter<T>;\n    // @ts-ignore\n    public static writeAll<T extends { [key: string]: DataType } = any>(this: typeof RecordBatchWriter, input: AsyncIterable<RecordBatch<T>>): Promise<RecordBatchJSONWriter<T>>;\n    public static writeAll<T extends { [key: string]: DataType } = any>(this: typeof RecordBatchWriter, input: PromiseLike<AsyncIterable<RecordBatch<T>>>): Promise<RecordBatchJSONWriter<T>>;\n    public static writeAll<T extends { [key: string]: DataType } = any>(this: typeof RecordBatchWriter, input: PromiseLike<Table<T> | Iterable<RecordBatch<T>>>): Promise<RecordBatchJSONWriter<T>>;\n    /** @nocollapse */\n    public static writeAll<T extends { [key: string]: DataType } = any>(this: typeof RecordBatchWriter, input: any) {\n        return new RecordBatchJSONWriter<T>().writeAll(input as any);\n    }\n\n    private _recordBatches: RecordBatch[];\n    private _dictionaries: RecordBatch[];\n\n    constructor() {\n        super();\n        this._autoDestroy = true;\n        this._recordBatches = [];\n        this._dictionaries = [];\n    }\n\n    protected _writeMessage() { return this; }\n    // @ts-ignore\n    protected _writeFooter(schema: Schema<T>) { return this; }\n    protected _writeSchema(schema: Schema<T>) {\n        return this._write(`{\\n  \"schema\": ${\n            JSON.stringify({ fields: schema.fields.map(fieldToJSON) }, null, 2)\n        }`);\n    }\n    protected _writeDictionaries(batch: RecordBatch<T>) {\n        if (batch.dictionaries.size > 0) {\n            this._dictionaries.push(batch);\n        }\n        return this;\n    }\n    protected _writeDictionaryBatch(dictionary: Vector, id: number, isDelta = false) {\n        this._dictionaryDeltaOffsets.set(id, dictionary.length + (this._dictionaryDeltaOffsets.get(id) || 0));\n        this._write(this._dictionaryBlocks.length === 0 ? `    ` : `,\\n    `);\n        this._write(`${dictionaryBatchToJSON(dictionary, id, isDelta)}`);\n        this._dictionaryBlocks.push(new FileBlock(0, 0, 0));\n        return this;\n    }\n    protected _writeRecordBatch(batch: RecordBatch<T>) {\n        this._writeDictionaries(batch);\n        this._recordBatches.push(batch);\n        return this;\n    }\n    public close() {\n\n        if (this._dictionaries.length > 0) {\n            this._write(`,\\n  \"dictionaries\": [\\n`);\n            for (const batch of this._dictionaries) {\n                super._writeDictionaries(batch);\n            }\n            this._write(`\\n  ]`);\n        }\n\n        if (this._recordBatches.length > 0) {\n            for (let i = -1, n = this._recordBatches.length; ++i < n;) {\n                this._write(i === 0 ? `,\\n  \"batches\": [\\n    ` : `,\\n    `);\n                this._write(`${recordBatchToJSON(this._recordBatches[i])}`);\n                this._recordBatchBlocks.push(new FileBlock(0, 0, 0));\n            }\n            this._write(`\\n  ]`);\n        }\n\n        if (this._schema) {\n            this._write(`\\n}`);\n        }\n\n        this._dictionaries = [];\n        this._recordBatches = [];\n\n        return super.close();\n    }\n}\n\n/** @ignore */\nfunction writeAll<T extends { [key: string]: DataType } = any>(writer: RecordBatchWriter<T>, input: Table<T> | Iterable<RecordBatch<T>>) {\n    let chunks = input as Iterable<RecordBatch<T>>;\n    if (input instanceof Table) {\n        chunks = input.chunks;\n        writer.reset(undefined, input.schema);\n    }\n    for (const batch of chunks) {\n        writer.write(batch);\n    }\n    return writer.finish();\n}\n\n/** @ignore */\nasync function writeAllAsync<T extends { [key: string]: DataType } = any>(writer: RecordBatchWriter<T>, batches: AsyncIterable<RecordBatch<T>>) {\n    for await (const batch of batches) {\n        writer.write(batch);\n    }\n    return writer.finish();\n}\n\n/** @ignore */\nfunction fieldToJSON({ name, type, nullable }: Field): object {\n    const assembler = new JSONTypeAssembler();\n    return {\n        'name': name, 'nullable': nullable,\n        'type': assembler.visit(type),\n        'children': (type.children || []).map(fieldToJSON),\n        'dictionary': !DataType.isDictionary(type) ? undefined : {\n            'id': type.id,\n            'isOrdered': type.isOrdered,\n            'indexType': assembler.visit(type.indices)\n        }\n    };\n}\n\n/** @ignore */\nfunction dictionaryBatchToJSON(dictionary: Vector, id: number, isDelta = false) {\n    const field = new Field(`${id}`, dictionary.type, dictionary.nullCount > 0);\n    const columns = JSONVectorAssembler.assemble(new Column(field, [dictionary]));\n    return JSON.stringify({\n        'id': id,\n        'isDelta': isDelta,\n        'data': {\n            'count': dictionary.length,\n            'columns': columns\n        }\n    }, null, 2);\n}\n\n/** @ignore */\nfunction recordBatchToJSON(records: RecordBatch) {\n    return JSON.stringify({\n        'count': records.length,\n        'columns': JSONVectorAssembler.assemble(records)\n    }, null, 2);\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Column } from '../column';\nimport { Vector } from '../vector';\nimport { DataType } from '../type';\nimport { Data, Buffers } from '../data';\nimport { Schema, Field } from '../schema';\nimport { Chunked } from '../vector/chunked';\nimport { RecordBatch } from '../recordbatch';\n\nconst noopBuf = new Uint8Array(0);\nconst nullBufs = (bitmapLength: number) => <unknown> [\n    noopBuf, noopBuf, new Uint8Array(bitmapLength), noopBuf\n] as Buffers<any>;\n\n/** @ignore */\nexport function ensureSameLengthData<T extends { [key: string]: DataType } = any>(\n    schema: Schema<T>,\n    chunks: Data<T[keyof T]>[],\n    batchLength = chunks.reduce((l, c) => Math.max(l, c.length), 0)\n) {\n    let data: Data<T[keyof T]>;\n    let field: Field<T[keyof T]>;\n    let i = -1, n = chunks.length;\n    const fields = [...schema.fields];\n    const batchData = [] as Data<T[keyof T]>[];\n    const bitmapLength = ((batchLength + 63) & ~63) >> 3;\n    while (++i < n) {\n        if ((data = chunks[i]) && data.length === batchLength) {\n            batchData[i] = data;\n        } else {\n            (field = fields[i]).nullable || (fields[i] = fields[i].clone({ nullable: true }) as Field<T[keyof T]>);\n            batchData[i] = data ? data._changeLengthAndBackfillNullBitmap(batchLength)\n                : Data.new(field.type, 0, batchLength, batchLength, nullBufs(bitmapLength)) as Data<T[keyof T]>;\n        }\n    }\n    return [new Schema<T>(fields), batchLength, batchData] as [Schema<T>, number, Data<T[keyof T]>[]];\n}\n\n/** @ignore */\nexport function distributeColumnsIntoRecordBatches<T extends { [key: string]: DataType } = any>(columns: Column<T[keyof T]>[]): [Schema<T>, RecordBatch<T>[]] {\n    return distributeVectorsIntoRecordBatches<T>(new Schema<T>(columns.map(({ field }) => field)), columns);\n}\n\n/** @ignore */\nexport function distributeVectorsIntoRecordBatches<T extends { [key: string]: DataType } = any>(schema: Schema<T>, vecs: (Vector<T[keyof T]> | Chunked<T[keyof T]>)[]): [Schema<T>, RecordBatch<T>[]] {\n    return uniformlyDistributeChunksAcrossRecordBatches<T>(schema, vecs.map((v) => v instanceof Chunked ? v.chunks.map((c) => c.data) : [v.data]));\n}\n\n/** @ignore */\nfunction uniformlyDistributeChunksAcrossRecordBatches<T extends { [key: string]: DataType } = any>(schema: Schema<T>, columns: Data<T[keyof T]>[][]): [Schema<T>, RecordBatch<T>[]] {\n\n    const fields = [...schema.fields];\n    const batchArgs = [] as [number, Data<T[keyof T]>[]][];\n    const memo = { numBatches: columns.reduce((n, c) => Math.max(n, c.length), 0) };\n\n    let numBatches = 0, batchLength = 0;\n    let i: number = -1, numColumns = columns.length;\n    let child: Data<T[keyof T]>, childData: Data<T[keyof T]>[] = [];\n\n    while (memo.numBatches-- > 0) {\n\n        for (batchLength = Number.POSITIVE_INFINITY, i = -1; ++i < numColumns;) {\n            childData[i] = child = columns[i].shift()!;\n            batchLength = Math.min(batchLength, child ? child.length : batchLength);\n        }\n\n        if (isFinite(batchLength)) {\n            childData = distributeChildData(fields, batchLength, childData, columns, memo);\n            if (batchLength > 0) {\n                batchArgs[numBatches++] = [batchLength, childData.slice()];\n            }\n        }\n    }\n    return [\n        schema = new Schema<T>(fields, schema.metadata),\n        batchArgs.map((xs) => new RecordBatch(schema, ...xs))\n    ];\n}\n\n/** @ignore */\nfunction distributeChildData<T extends { [key: string]: DataType } = any>(fields: Field<T[keyof T]>[], batchLength: number, childData: Data<T[keyof T]>[], columns: Data<T[keyof T]>[][], memo: { numBatches: number }) {\n    let data: Data<T[keyof T]>;\n    let field: Field<T[keyof T]>;\n    let length = 0, i = -1, n = columns.length;\n    const bitmapLength = ((batchLength + 63) & ~63) >> 3;\n    while (++i < n) {\n        if ((data = childData[i]) && ((length = data.length) >= batchLength)) {\n            if (length === batchLength) {\n                childData[i] = data;\n            } else {\n                childData[i] = data.slice(0, batchLength);\n                data = data.slice(batchLength, length - batchLength);\n                memo.numBatches = Math.max(memo.numBatches, columns[i].unshift(data));\n            }\n        } else {\n            (field = fields[i]).nullable || (fields[i] = field.clone({ nullable: true }) as Field<T[keyof T]>);\n            childData[i] = data ? data._changeLengthAndBackfillNullBitmap(batchLength)\n                : Data.new(field.type, 0, batchLength, batchLength, nullBufs(bitmapLength)) as Data<T[keyof T]>;\n        }\n    }\n    return childData;\n}\n","import objectWithoutPropertiesLoose from \"./objectWithoutPropertiesLoose\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Type } from '../enum';\nimport { DataType } from '../type';\nimport { Chunked } from './chunked';\nimport { clampRange } from '../util/vector';\nimport { VectorType as V } from '../interfaces';\nimport { AbstractVector, Vector, Clonable, Sliceable, Applicative } from '../vector';\n\n/** @ignore */\nexport interface BaseVector<T extends DataType = any> extends Clonable<V<T>>, Sliceable<V<T>>, Applicative<T, Chunked<T>> {\n    slice(begin?: number, end?: number): V<T>;\n    concat(...others: Vector<T>[]): Chunked<T>;\n    clone<R extends DataType = T>(data: Data<R>, children?: Vector<R>[]): V<R>;\n}\n\n/** @ignore */\nexport abstract class BaseVector<T extends DataType = any> extends AbstractVector<T>\n    implements Clonable<V<T>>, Sliceable<V<T>>, Applicative<T, Chunked<T>> {\n\n    protected _children?: Vector[];\n\n    constructor(data: Data<T>, children?: Vector[]) {\n        super();\n        this._children = children;\n        this.numChildren = data.childData.length;\n        this._bindDataAccessors(this.data = data);\n    }\n\n    public readonly data: Data<T>;\n    public readonly numChildren: number;\n\n    public get type() { return this.data.type; }\n    public get typeId() { return this.data.typeId; }\n    public get length() { return this.data.length; }\n    public get offset() { return this.data.offset; }\n    public get stride() { return this.data.stride; }\n    public get nullCount() { return this.data.nullCount; }\n    public get byteLength() { return this.data.byteLength; }\n    public get VectorName() { return `${Type[this.typeId]}Vector`; }\n\n    public get ArrayType(): T['ArrayType'] { return this.type.ArrayType; }\n\n    public get values() { return this.data.values; }\n    public get typeIds() { return this.data.typeIds; }\n    public get nullBitmap() { return this.data.nullBitmap; }\n    public get valueOffsets() { return this.data.valueOffsets; }\n\n    public get [Symbol.toStringTag]() { return `${this.VectorName}<${this.type[Symbol.toStringTag]}>`; }\n\n    public clone<R extends DataType = T>(data: Data<R>, children = this._children) {\n        return Vector.new<R>(data, children) as any;\n    }\n\n    public concat(...others: Vector<T>[]) {\n        return Chunked.concat<T>(this, ...others);\n    }\n\n    public slice(begin?: number, end?: number) {\n        // Adjust args similar to Array.prototype.slice. Normalize begin/end to\n        // clamp between 0 and length, and wrap around on negative indices, e.g.\n        // slice(-1, 5) or slice(5, -1)\n        return clampRange(this, begin, end, this._sliceInternal);\n    }\n\n    public isValid(index: number): boolean {\n        if (this.nullCount > 0) {\n            const idx = this.offset + index;\n            const val = this.nullBitmap[idx >> 3];\n            const mask = (val & (1 << (idx % 8)));\n            return mask !== 0;\n        }\n        return true;\n    }\n\n    public getChildAt<R extends DataType = any>(index: number): Vector<R> | null {\n        return index < 0 || index >= this.numChildren ? null : (\n            (this._children || (this._children = []))[index] ||\n            (this._children[index] = Vector.new<R>(this.data.childData[index] as Data<R>))\n        ) as Vector<R>;\n    }\n\n    public toJSON(): any { return [...this]; }\n\n    protected _sliceInternal(self: this, begin: number, end: number) {\n        return self.clone(self.data.slice(begin, end - begin), null!);\n    }\n\n    // @ts-ignore\n    protected _bindDataAccessors(data: Data<T>) {\n        // Implementation in src/vectors/index.ts due to circular dependency/packaging shenanigans\n    }\n}\n\n(BaseVector.prototype as any)[Symbol.isConcatSpreadable] = true;\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from '../vector';\nimport { BaseVector } from './base';\nimport { Binary, Utf8 } from '../type';\n\n/** @ignore */\nexport class BinaryVector extends BaseVector<Binary> {\n    public asUtf8() {\n        return Vector.new(this.data.clone(new Utf8()));\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Bool } from '../type';\nimport { Chunked } from './chunked';\nimport { BaseVector } from './base';\nimport { VectorBuilderOptions } from './index';\nimport { vectorFromValuesWithType } from './index';\nimport { VectorBuilderOptionsAsync } from './index';\n\n/** @ignore */\nexport class BoolVector extends BaseVector<Bool> {\n    public static from<TNull = any>(input: Iterable<boolean | TNull>): BoolVector;\n    public static from<TNull = any>(input: AsyncIterable<boolean | TNull>): Promise<BoolVector>;\n    public static from<TNull = any>(input: VectorBuilderOptions<Bool, TNull>): Chunked<Bool>;\n    public static from<TNull = any>(input: VectorBuilderOptionsAsync<Bool, TNull>): Promise<Chunked<Bool>>;\n    /** @nocollapse */\n    public static from<TNull = any>(input: Iterable<boolean | TNull> | AsyncIterable<boolean | TNull> | VectorBuilderOptions<Bool, TNull> | VectorBuilderOptionsAsync<Bool, TNull>) {\n        return vectorFromValuesWithType(() => new Bool(), input);\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { DateUnit } from '../enum';\nimport { Chunked } from './chunked';\nimport { BaseVector } from './base';\nimport { VectorType as V } from '../interfaces';\nimport { VectorBuilderOptions } from './index';\nimport { vectorFromValuesWithType } from './index';\nimport { VectorBuilderOptionsAsync } from './index';\nimport { Date_, DateDay, DateMillisecond  } from '../type';\n\n/** @ignore */\ntype FromArgs<T extends Date_> = [Iterable<Date>, T['unit']];\n\n/** @ignore */\nexport class DateVector<T extends Date_ = Date_> extends BaseVector<T> {\n    public static from<T extends DateUnit.DAY>(...args: FromArgs<DateDay>): V<DateDay>;\n    public static from<T extends DateUnit.MILLISECOND>(...args: FromArgs<DateMillisecond>): V<DateMillisecond>;\n    public static from<T extends Date_, TNull = any>(input: Iterable<Date | TNull>): V<T>;\n    public static from<T extends Date_, TNull = any>(input: AsyncIterable<Date | TNull>): Promise<V<T>>;\n    public static from<T extends Date_, TNull = any>(input: VectorBuilderOptions<T, TNull>): Chunked<T>;\n    public static from<T extends Date_, TNull = any>(input: VectorBuilderOptionsAsync<T, TNull>): Promise<Chunked<T>>;\n    /** @nocollapse */\n    public static from<T extends Date_, TNull = any>(...args: FromArgs<T> | [Iterable<Date | TNull> | AsyncIterable<Date | TNull> | VectorBuilderOptions<T, TNull> | VectorBuilderOptionsAsync<T, TNull>]) {\n        if (args.length === 2) {\n            return vectorFromValuesWithType(() => args[1] === DateUnit.DAY ? new DateDay() : new DateMillisecond() as T, args[0]);\n        }\n        return vectorFromValuesWithType(() => new DateMillisecond() as T, args[0]);\n    }\n}\n\n/** @ignore */\nexport class DateDayVector extends DateVector<DateDay> {}\n\n/** @ignore */\nexport class DateMillisecondVector extends DateVector<DateMillisecond> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Decimal } from '../type';\nimport { BaseVector } from './base';\n\n/** @ignore */\nexport class DecimalVector extends BaseVector<Decimal> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Vector } from '../vector';\nimport { BaseVector } from './base';\nimport { VectorType as V } from '../interfaces';\nimport { VectorBuilderOptions } from './index';\nimport { vectorFromValuesWithType } from './index';\nimport { VectorBuilderOptionsAsync } from './index';\nimport { DataType, Dictionary, TKeys } from '../type';\n\n/** @ignore */\ntype FromArgs<T extends DataType = any, TKey extends TKeys = TKeys> = [Vector<T>, TKey, ArrayLike<number> | TKey['TArray']];\n\n/** @ignore */\nexport class DictionaryVector<T extends DataType = any, TKey extends TKeys = TKeys> extends BaseVector<Dictionary<T, TKey>> {\n    public static from<T extends DataType = any, TKey extends TKeys = TKeys>(...args: FromArgs<T, TKey>): V<Dictionary<T, TKey>>;\n    public static from<T extends DataType = any, TKey extends TKeys = TKeys>(input: VectorBuilderOptions<Dictionary<T, TKey>>): Vector<Dictionary<T, TKey>>;\n    public static from<T extends DataType = any, TKey extends TKeys = TKeys>(input: VectorBuilderOptionsAsync<Dictionary<T, TKey>>): Promise<Vector<Dictionary<T, TKey>>>;\n    /** @nocollapse */\n    public static from<T extends DataType = any, TKey extends TKeys = TKeys>(...args: any[]) {\n        if (args.length === 3) {\n            const [values, indices, keys] = args as FromArgs<T, TKey>;\n            const type = new Dictionary(values.type, indices, null, null);\n            return Vector.new(Data.Dictionary(type, 0, keys.length, 0, null, keys, values));\n        }\n        return vectorFromValuesWithType(() => args[0].type, args[0]);\n    }\n\n    constructor(data: Data<Dictionary<T, TKey>>) {\n        super(data);\n        this.indices = Vector.new(data.clone(this.type.indices));\n    }\n\n    public readonly indices: V<TKey>;\n\n    public get dictionary() { return <Vector<T>> this.data.dictionary; }\n    public reverseLookup(value: T) { return this.dictionary.indexOf(value); }\n    public getKey(idx: number): TKey['TValue'] | null { return this.indices.get(idx); }\n    public getValue(key: number): T['TValue'] | null { return this.dictionary.get(key); }\n    public setKey(idx: number, key: TKey['TValue'] | null) { return this.indices.set(idx, key); }\n    public setValue(key: number, value: T['TValue'] | null) { return this.dictionary.set(key, value); }\n}\n\n(DictionaryVector.prototype as any).indices = null;\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { BaseVector } from './base';\nimport { FixedSizeBinary } from '../type';\n\n/** @ignore */\nexport class FixedSizeBinaryVector extends BaseVector<FixedSizeBinary> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { BaseVector } from './base';\nimport { DataType, FixedSizeList } from '../type';\n\n/** @ignore */\nexport class FixedSizeListVector<T extends DataType = any> extends BaseVector<FixedSizeList<T>> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Vector } from '../vector';\nimport { Chunked } from './chunked';\nimport { BaseVector } from './base';\nimport { VectorBuilderOptions } from './index';\nimport { vectorFromValuesWithType } from './index';\nimport { VectorBuilderOptionsAsync } from './index';\nimport { Float, Float16, Float32, Float64, FloatArray } from '../type';\nimport { VectorType as V, TypedArrayConstructor } from '../interfaces';\n\n/** @ignore */\ntype FloatVectorConstructors =\n    typeof FloatVector   |\n    typeof Float16Vector |\n    typeof Float32Vector |\n    typeof Float64Vector ;\n\n/** @ignore */\ntype FromInput<T extends Float, TNull = any> =\n    FloatArray                          |\n    Iterable<T['TValue'] | TNull>       |\n    AsyncIterable<T['TValue'] | TNull>  |\n    VectorBuilderOptions<T, TNull>      |\n    VectorBuilderOptionsAsync<T, TNull> ;\n\n/** @ignore */\ntype FloatArrayCtor = TypedArrayConstructor<FloatArray>;\n\n/** @ignore */\nexport class FloatVector<T extends Float = Float> extends BaseVector<T> {\n\n    // Guaranteed zero-copy variants\n    public static from(this: typeof FloatVector, input: Uint16Array): Float16Vector;\n    public static from(this: typeof FloatVector, input: Float32Array): Float32Vector;\n    public static from(this: typeof FloatVector, input: Float64Array): Float64Vector;\n\n    // Zero-copy if input is a TypedArray of the same type as the\n    // Vector that from is called on, otherwise uses the Builders\n    public static from<TNull = any>(this: typeof Float16Vector,  input: FromInput<Float16, TNull>): Float16Vector;\n    public static from<TNull = any>(this: typeof Float32Vector,  input: FromInput<Float32, TNull>): Float32Vector;\n    public static from<TNull = any>(this: typeof Float64Vector,  input: FromInput<Float64, TNull>): Float64Vector;\n\n    // Not zero-copy\n    public static from<T extends Float, TNull = any>(this: typeof FloatVector, input: Iterable<T['TValue'] | TNull>): V<T>;\n    public static from<T extends Float, TNull = any>(this: typeof FloatVector, input: AsyncIterable<T['TValue'] | TNull>): Promise<V<T>>;\n    public static from<T extends Float, TNull = any>(this: typeof FloatVector, input: VectorBuilderOptions<T, TNull>): Chunked<T>;\n    public static from<T extends Float, TNull = any>(this: typeof FloatVector, input: VectorBuilderOptionsAsync<T, TNull>): Promise<Chunked<T>>;\n    /** @nocollapse */\n    public static from<T extends Float, TNull = any>(this: FloatVectorConstructors, input: FromInput<T, TNull>) {\n\n        let ArrowType = vectorTypeToDataType(this);\n\n        if ((input instanceof ArrayBuffer) || ArrayBuffer.isView(input)) {\n            let InputType = arrayTypeToDataType(input.constructor as FloatArrayCtor) || ArrowType;\n            // Special case, infer the Arrow DataType from the input if calling the base\n            // FloatVector.from with a TypedArray, e.g. `FloatVector.from(new Float32Array())`\n            if (ArrowType === null) {\n                ArrowType = InputType;\n            }\n            // If the DataType inferred from the Vector constructor matches the\n            // DataType inferred from the input arguments, return zero-copy view\n            if (ArrowType && ArrowType === InputType) {\n                let type = new ArrowType();\n                let length = input.byteLength / type.ArrayType.BYTES_PER_ELEMENT;\n                // If the ArrowType is Float16 but the input type isn't a Uint16Array,\n                // let the Float16Builder handle casting the input values to Uint16s.\n                if (!convertTo16Bit(ArrowType, input.constructor)) {\n                    return Vector.new(Data.Float(type, 0, length, 0, null, input as FloatArray));\n                }\n            }\n        }\n\n        if (ArrowType) {\n            // If the DataType inferred from the Vector constructor is different than\n            // the DataType inferred from the input TypedArray, or if input isn't a\n            // TypedArray, use the Builders to construct the result Vector\n            return vectorFromValuesWithType(() => new ArrowType!() as T, input);\n        }\n\n        if ((input instanceof DataView) || (input instanceof ArrayBuffer)) {\n            throw new TypeError(`Cannot infer float type from instance of ${input.constructor.name}`);\n        }\n\n        throw new TypeError('Unrecognized FloatVector input');\n    }\n}\n\n/** @ignore */\nexport class Float16Vector extends FloatVector<Float16> {\n    // Since JS doesn't have half floats, `toArray()` returns a zero-copy slice\n    // of the underlying Uint16Array data. This behavior ensures we don't incur\n    // extra compute or copies if you're calling `toArray()` in order to create\n    // a buffer for something like WebGL. Buf if you're using JS and want typed\n    // arrays of 4-to-8-byte precision, these methods will enumerate the values\n    // and clamp to the desired byte lengths.\n    public toFloat32Array() { return new Float32Array(this as Iterable<number>); }\n    public toFloat64Array() { return new Float64Array(this as Iterable<number>); }\n}\n\n/** @ignore */\nexport class Float32Vector extends FloatVector<Float32> {}\n/** @ignore */\nexport class Float64Vector extends FloatVector<Float64> {}\n\nconst convertTo16Bit = (typeCtor: any, dataCtor: any) => {\n    return (typeCtor === Float16) && (dataCtor !== Uint16Array);\n};\n\n/** @ignore */\nconst arrayTypeToDataType = (ctor: FloatArrayCtor) => {\n    switch (ctor) {\n        case Uint16Array:    return Float16;\n        case Float32Array:   return Float32;\n        case Float64Array:   return Float64;\n        default: return null;\n    }\n};\n\n/** @ignore */\nconst vectorTypeToDataType = (ctor: FloatVectorConstructors) => {\n    switch (ctor) {\n        case Float16Vector: return Float16;\n        case Float32Vector: return Float32;\n        case Float64Vector: return Float64;\n        default: return null;\n    }\n};\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { BaseVector } from './base';\nimport { Interval, IntervalDayTime, IntervalYearMonth } from '../type';\n\n/** @ignore */\nexport class IntervalVector<T extends Interval = Interval> extends BaseVector<T> {}\n/** @ignore */\nexport class IntervalDayTimeVector extends IntervalVector<IntervalDayTime> {}\n/** @ignore */\nexport class IntervalYearMonthVector extends IntervalVector<IntervalYearMonth> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Vector } from '../vector';\nimport { Chunked } from './chunked';\nimport { BaseVector } from './base';\nimport { VectorBuilderOptions } from './index';\nimport { vectorFromValuesWithType } from './index';\nimport { VectorBuilderOptionsAsync } from './index';\nimport { BigInt64Array, BigUint64Array } from '../util/compat';\nimport { toBigInt64Array, toBigUint64Array } from '../util/buffer';\nimport { Int, Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64, IntArray } from '../type';\nimport { VectorType as V, TypedArrayConstructor, BigIntArrayConstructor, BigIntArray } from '../interfaces';\n\n/** @ignore */\ntype IntVectorConstructors =\n    typeof IntVector    |\n    typeof Int8Vector   |\n    typeof Int16Vector  |\n    typeof Int32Vector  |\n    typeof Uint8Vector  |\n    typeof Uint16Vector |\n    typeof Uint32Vector |\n    typeof Int64Vector  |\n    typeof Uint64Vector ;\n\n/** @ignore */\ntype FromInput<T extends Int, TNull = any> =\n    IntArray | BigIntArray              |\n    Iterable<T['TValue'] | TNull>       |\n    AsyncIterable<T['TValue'] | TNull>  |\n    VectorBuilderOptions<T, TNull>      |\n    VectorBuilderOptionsAsync<T, TNull> ;\n\n/** @ignore */\ntype FromArgs<T extends Int, TNull = any> = [FromInput<T, TNull>, boolean?];\n\n/** @ignore */\ntype IntArrayCtor = TypedArrayConstructor<IntArray> | BigIntArrayConstructor<BigIntArray>;\n\n/** @ignore */\nexport class IntVector<T extends Int = Int> extends BaseVector<T> {\n\n    // Guaranteed zero-copy variants\n    public static from(this: typeof IntVector, input: Int8Array): Int8Vector;\n    public static from(this: typeof IntVector, input: Int16Array): Int16Vector;\n    public static from(this: typeof IntVector, input: Int32Array): Int32Vector;\n    public static from(this: typeof IntVector, input: BigInt64Array): Int64Vector;\n    public static from(this: typeof IntVector, input: Int32Array, is64bit: true): Int64Vector;\n    public static from(this: typeof IntVector, input: Uint8Array): Uint8Vector;\n    public static from(this: typeof IntVector, input: Uint16Array): Uint16Vector;\n    public static from(this: typeof IntVector, input: Uint32Array): Uint32Vector;\n    public static from(this: typeof IntVector, input: BigUint64Array): Uint64Vector;\n    public static from(this: typeof IntVector, input: Uint32Array, is64bit: true): Uint64Vector;\n\n    // Zero-copy if input is a TypedArray of the same type as the\n    // Vector that from is called on, otherwise uses the Builders\n    public static from<TNull = any>(this: typeof Int8Vector,   input: FromInput<Int8, TNull>): Int8Vector;\n    public static from<TNull = any>(this: typeof Int16Vector,  input: FromInput<Int16, TNull>): Int16Vector;\n    public static from<TNull = any>(this: typeof Int32Vector,  input: FromInput<Int32, TNull>): Int32Vector;\n    public static from<TNull = any>(this: typeof Int64Vector,  input: FromInput<Int64, TNull>): Int64Vector;\n    public static from<TNull = any>(this: typeof Uint8Vector,  input: FromInput<Uint8, TNull>): Uint8Vector;\n    public static from<TNull = any>(this: typeof Uint16Vector, input: FromInput<Uint16, TNull>): Uint16Vector;\n    public static from<TNull = any>(this: typeof Uint32Vector, input: FromInput<Uint32, TNull>): Uint32Vector;\n    public static from<TNull = any>(this: typeof Uint64Vector, input: FromInput<Uint64, TNull>): Uint64Vector;\n\n    // Not zero-copy\n    public static from<T extends Int, TNull = any>(this: typeof IntVector, input: Iterable<T['TValue'] | TNull>): V<T>;\n    public static from<T extends Int, TNull = any>(this: typeof IntVector, input: AsyncIterable<T['TValue'] | TNull>): Promise<V<T>>;\n    public static from<T extends Int, TNull = any>(this: typeof IntVector, input: VectorBuilderOptions<T, TNull>): Chunked<T>;\n    public static from<T extends Int, TNull = any>(this: typeof IntVector, input: VectorBuilderOptionsAsync<T, TNull>): Promise<Chunked<T>>;\n    /** @nocollapse */\n    public static from<T extends Int, TNull = any>(this: IntVectorConstructors, ...args: FromArgs<T, TNull>) {\n\n        let [input, is64bit = false] = args;\n        let ArrowType = vectorTypeToDataType(this, is64bit);\n\n        if ((input instanceof ArrayBuffer) || ArrayBuffer.isView(input)) {\n            let InputType = arrayTypeToDataType(input.constructor as IntArrayCtor, is64bit) || ArrowType;\n            // Special case, infer the Arrow DataType from the input if calling the base\n            // IntVector.from with a TypedArray, e.g. `IntVector.from(new Int32Array())`\n            if (ArrowType === null) {\n                ArrowType = InputType;\n            }\n            // If the DataType inferred from the Vector constructor matches the\n            // DataType inferred from the input arguments, return zero-copy view\n            if (ArrowType && ArrowType === InputType) {\n                let type = new ArrowType();\n                let length = input.byteLength / type.ArrayType.BYTES_PER_ELEMENT;\n                // If the ArrowType is 64bit but the input type is 32bit pairs, update the logical length\n                if (convert32To64Bit(ArrowType, input.constructor)) {\n                    length *= 0.5;\n                }\n                return Vector.new(Data.Int(type, 0, length, 0, null, input as IntArray));\n            }\n        }\n\n        if (ArrowType) {\n            // If the DataType inferred from the Vector constructor is different than\n            // the DataType inferred from the input TypedArray, or if input isn't a\n            // TypedArray, use the Builders to construct the result Vector\n            return vectorFromValuesWithType(() => new ArrowType!() as T, input);\n        }\n\n        if ((input instanceof DataView) || (input instanceof ArrayBuffer)) {\n            throw new TypeError(`Cannot infer integer type from instance of ${input.constructor.name}`);\n        }\n\n        throw new TypeError('Unrecognized IntVector input');\n    }\n}\n\n/** @ignore */\nexport class Int8Vector extends IntVector<Int8> {}\n/** @ignore */\nexport class Int16Vector extends IntVector<Int16> {}\n/** @ignore */\nexport class Int32Vector extends IntVector<Int32> {}\n/** @ignore */\nexport class Int64Vector extends IntVector<Int64> {\n    public toBigInt64Array() {\n        return toBigInt64Array(this.values);\n    }\n    // @ts-ignore\n    private _values64: BigInt64Array;\n    public get values64(): BigInt64Array {\n        return this._values64 || (this._values64 = this.toBigInt64Array());\n    }\n}\n\n/** @ignore */\nexport class Uint8Vector extends IntVector<Uint8> {}\n/** @ignore */\nexport class Uint16Vector extends IntVector<Uint16> {}\n/** @ignore */\nexport class Uint32Vector extends IntVector<Uint32> {}\n/** @ignore */\nexport class Uint64Vector extends IntVector<Uint64> {\n    public toBigUint64Array() {\n        return toBigUint64Array(this.values);\n    }\n    // @ts-ignore\n    private _values64: BigUint64Array;\n    public get values64(): BigUint64Array {\n        return this._values64 || (this._values64 = this.toBigUint64Array());\n    }\n}\n\nconst convert32To64Bit = (typeCtor: any, dataCtor: any) => {\n    return (typeCtor === Int64 || typeCtor === Uint64) &&\n           (dataCtor === Int32Array || dataCtor === Uint32Array);\n};\n\n/** @ignore */\nconst arrayTypeToDataType = (ctor: IntArrayCtor, is64bit: boolean) => {\n    switch (ctor) {\n        case Int8Array:      return Int8;\n        case Int16Array:     return Int16;\n        case Int32Array:     return is64bit ? Int64 : Int32;\n        case BigInt64Array:  return Int64;\n        case Uint8Array:     return Uint8;\n        case Uint16Array:    return Uint16;\n        case Uint32Array:    return is64bit ? Uint64 : Uint32;\n        case BigUint64Array: return Uint64;\n        default: return null;\n    }\n};\n\n/** @ignore */\nconst vectorTypeToDataType = (ctor: IntVectorConstructors, is64bit: boolean) => {\n    switch (ctor) {\n        case Int8Vector:   return Int8;\n        case Int16Vector:  return Int16;\n        case Int32Vector:  return is64bit ? Int64 : Int32;\n        case Int64Vector:  return Int64;\n        case Uint8Vector:  return Uint8;\n        case Uint16Vector: return Uint16;\n        case Uint32Vector: return is64bit ? Uint64 : Uint32;\n        case Uint64Vector: return Uint64;\n        default: return null;\n    }\n};\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { BaseVector } from './base';\nimport { DataType, List } from '../type';\n\n/** @ignore */\nexport class ListVector<T extends DataType = any> extends BaseVector<List<T>> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { MapRow } from './row';\nimport { Field } from '../schema';\nimport { Vector } from '../vector';\nimport { BaseVector } from './base';\nimport { DataType, Map_, Struct, List } from '../type';\n\n/** @ignore */\nexport class MapVector<K extends DataType = any, V extends DataType = any> extends BaseVector<Map_<K, V>> {\n    public asList() {\n        const child = this.type.children[0] as Field<Struct<{ key: K, value: V }>>;\n        return Vector.new(this.data.clone(new List<Struct<{ key: K, value: V }>>(child)));\n    }\n    public bind(index: number): Map_<K, V>['TValue'] {\n        const child = this.getChildAt<Struct<{ key: K, value: V }>>(0);\n        const { [index]: begin, [index + 1]: end } = this.valueOffsets;\n        return new MapRow(child!.slice(begin, end));\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Null } from '../type';\nimport { BaseVector } from './base';\n\n/** @ignore */\nexport class NullVector extends BaseVector<Null> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { StructRow } from './row';\nimport { BaseVector } from './base';\nimport { DataType, Struct } from '../type';\n\n/** @ignore */ const kRowIndex = Symbol.for('rowIndex');\n/** @ignore */\nexport class StructVector<T extends { [key: string]: DataType } = any> extends BaseVector<Struct<T>> {\n    // @ts-ignore\n    private _row: StructRow<T>;\n    public bind(index: number): Struct<T>['TValue'] {\n        const proto = this._row || (this._row = new StructRow<T>(this));\n        const bound = Object.create(proto);\n        bound[kRowIndex] = index;\n        return bound;\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { BaseVector } from './base';\nimport { Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond } from '../type';\n\n/** @ignore */\nexport class TimestampVector<T extends Timestamp = Timestamp> extends BaseVector<T> {}\n/** @ignore */\nexport class TimestampSecondVector extends TimestampVector<TimestampSecond> {}\n/** @ignore */\nexport class TimestampMillisecondVector extends TimestampVector<TimestampMillisecond> {}\n/** @ignore */\nexport class TimestampMicrosecondVector extends TimestampVector<TimestampMicrosecond> {}\n/** @ignore */\nexport class TimestampNanosecondVector extends TimestampVector<TimestampNanosecond> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { BaseVector } from './base';\nimport { Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond } from '../type';\n\n/** @ignore */\nexport class TimeVector<T extends Time = Time> extends BaseVector<T> {}\n/** @ignore */\nexport class TimeSecondVector extends TimeVector<TimeSecond> {}\n/** @ignore */\nexport class TimeMillisecondVector extends TimeVector<TimeMillisecond> {}\n/** @ignore */\nexport class TimeMicrosecondVector extends TimeVector<TimeMicrosecond> {}\n/** @ignore */\nexport class TimeNanosecondVector extends TimeVector<TimeNanosecond> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { BaseVector } from './base';\nimport { Union, DenseUnion, SparseUnion} from '../type';\n\n/** @ignore */\nexport class UnionVector<T extends Union = Union> extends BaseVector<T> {\n    public get typeIdToChildIndex() { return this.data.type.typeIdToChildIndex; }\n}\n\n/** @ignore */\nexport class DenseUnionVector extends UnionVector<DenseUnion> {\n    public get valueOffsets() { return this.data.valueOffsets!; }\n}\n\n/** @ignore */\nexport class SparseUnionVector extends UnionVector<SparseUnion> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from '../vector';\nimport { Chunked } from './chunked';\nimport { BaseVector } from './base';\nimport { Binary, Utf8 } from '../type';\nimport { VectorBuilderOptions } from './index';\nimport { vectorFromValuesWithType } from './index';\nimport { VectorBuilderOptionsAsync } from './index';\n\n/** @ignore */\nexport class Utf8Vector extends BaseVector<Utf8> {\n    public static from<TNull = any>(input: Iterable<string | TNull>): Utf8Vector;\n    public static from<TNull = any>(input: AsyncIterable<string | TNull>): Promise<Utf8Vector>;\n    public static from<TNull = any>(input: VectorBuilderOptions<Utf8, TNull>): Chunked<Utf8>;\n    public static from<TNull = any>(input: VectorBuilderOptionsAsync<Utf8, TNull>): Promise<Chunked<Utf8>>;\n    /** @nocollapse */\n    public static from<TNull = any>(input: Iterable<string | TNull> | AsyncIterable<string | TNull> | VectorBuilderOptions<Utf8, TNull> | VectorBuilderOptionsAsync<Utf8, TNull>) {\n        return vectorFromValuesWithType(() => new Utf8(), input);\n    }\n    public asBinary() {\n        return Vector.new(this.data.clone(new Binary()));\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/** @ignore */\nexport function partial0<T>(visit: (node: T) => any) {\n    return function(this: T) { return visit(this); };\n}\n\n/** @ignore */\nexport function partial1<T>(visit: (node: T, a: any) => any) {\n    return function(this: T, a: any) { return visit(this, a); };\n}\n\n/** @ignore */\nexport function partial2<T>(visit: (node: T, a: any, b: any) => any) {\n    return function(this: T, a: any, b: any) { return visit(this, a, b); };\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { BN } from '../util/bn';\nimport { Visitor } from '../visitor';\nimport { decodeUtf8 } from '../util/utf8';\nimport { VectorType } from '../interfaces';\nimport { uint16ToFloat64 } from '../util/math';\nimport { Type, UnionMode, Precision, DateUnit, TimeUnit, IntervalUnit } from '../enum';\nimport {\n    DataType, Dictionary,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\n    Float, Float16, Float32, Float64,\n    Int, Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64,\n    Date_, DateDay, DateMillisecond,\n    Interval, IntervalDayTime, IntervalYearMonth,\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\n    Union, DenseUnion, SparseUnion,\n} from '../type';\n\n/** @ignore */\nexport interface GetVisitor extends Visitor {\n    visit<T extends VectorType>  (node: T, index: number): T['TValue'];\n    visitMany<T extends VectorType>  (nodes: T[], indices: number[]): T['TValue'][];\n    getVisitFn<T extends Type>    (node: T): (vector: VectorType<T>, index: number) => VectorType<T>['TValue'];\n    getVisitFn<T extends DataType>(node: VectorType<T> | Data<T> | T): (vector: VectorType<T>, index: number) => VectorType<T>['TValue'];\n    visitNull                 <T extends Null>                 (vector: VectorType<T>, index: number): T['TValue'];\n    visitBool                 <T extends Bool>                 (vector: VectorType<T>, index: number): T['TValue'];\n    visitInt                  <T extends Int>                  (vector: VectorType<T>, index: number): T['TValue'];\n    visitInt8                 <T extends Int8>                 (vector: VectorType<T>, index: number): T['TValue'];\n    visitInt16                <T extends Int16>                (vector: VectorType<T>, index: number): T['TValue'];\n    visitInt32                <T extends Int32>                (vector: VectorType<T>, index: number): T['TValue'];\n    visitInt64                <T extends Int64>                (vector: VectorType<T>, index: number): T['TValue'];\n    visitUint8                <T extends Uint8>                (vector: VectorType<T>, index: number): T['TValue'];\n    visitUint16               <T extends Uint16>               (vector: VectorType<T>, index: number): T['TValue'];\n    visitUint32               <T extends Uint32>               (vector: VectorType<T>, index: number): T['TValue'];\n    visitUint64               <T extends Uint64>               (vector: VectorType<T>, index: number): T['TValue'];\n    visitFloat                <T extends Float>                (vector: VectorType<T>, index: number): T['TValue'];\n    visitFloat16              <T extends Float16>              (vector: VectorType<T>, index: number): T['TValue'];\n    visitFloat32              <T extends Float32>              (vector: VectorType<T>, index: number): T['TValue'];\n    visitFloat64              <T extends Float64>              (vector: VectorType<T>, index: number): T['TValue'];\n    visitUtf8                 <T extends Utf8>                 (vector: VectorType<T>, index: number): T['TValue'];\n    visitBinary               <T extends Binary>               (vector: VectorType<T>, index: number): T['TValue'];\n    visitFixedSizeBinary      <T extends FixedSizeBinary>      (vector: VectorType<T>, index: number): T['TValue'];\n    visitDate                 <T extends Date_>                (vector: VectorType<T>, index: number): T['TValue'];\n    visitDateDay              <T extends DateDay>              (vector: VectorType<T>, index: number): T['TValue'];\n    visitDateMillisecond      <T extends DateMillisecond>      (vector: VectorType<T>, index: number): T['TValue'];\n    visitTimestamp            <T extends Timestamp>            (vector: VectorType<T>, index: number): T['TValue'];\n    visitTimestampSecond      <T extends TimestampSecond>      (vector: VectorType<T>, index: number): T['TValue'];\n    visitTimestampMillisecond <T extends TimestampMillisecond> (vector: VectorType<T>, index: number): T['TValue'];\n    visitTimestampMicrosecond <T extends TimestampMicrosecond> (vector: VectorType<T>, index: number): T['TValue'];\n    visitTimestampNanosecond  <T extends TimestampNanosecond>  (vector: VectorType<T>, index: number): T['TValue'];\n    visitTime                 <T extends Time>                 (vector: VectorType<T>, index: number): T['TValue'];\n    visitTimeSecond           <T extends TimeSecond>           (vector: VectorType<T>, index: number): T['TValue'];\n    visitTimeMillisecond      <T extends TimeMillisecond>      (vector: VectorType<T>, index: number): T['TValue'];\n    visitTimeMicrosecond      <T extends TimeMicrosecond>      (vector: VectorType<T>, index: number): T['TValue'];\n    visitTimeNanosecond       <T extends TimeNanosecond>       (vector: VectorType<T>, index: number): T['TValue'];\n    visitDecimal              <T extends Decimal>              (vector: VectorType<T>, index: number): T['TValue'];\n    visitList                 <T extends List>                 (vector: VectorType<T>, index: number): T['TValue'];\n    visitStruct               <T extends Struct>               (vector: VectorType<T>, index: number): T['TValue'];\n    visitUnion                <T extends Union>                (vector: VectorType<T>, index: number): T['TValue'];\n    visitDenseUnion           <T extends DenseUnion>           (vector: VectorType<T>, index: number): T['TValue'];\n    visitSparseUnion          <T extends SparseUnion>          (vector: VectorType<T>, index: number): T['TValue'];\n    visitDictionary           <T extends Dictionary>           (vector: VectorType<T>, index: number): T['TValue'];\n    visitInterval             <T extends Interval>             (vector: VectorType<T>, index: number): T['TValue'];\n    visitIntervalDayTime      <T extends IntervalDayTime>      (vector: VectorType<T>, index: number): T['TValue'];\n    visitIntervalYearMonth    <T extends IntervalYearMonth>    (vector: VectorType<T>, index: number): T['TValue'];\n    visitFixedSizeList        <T extends FixedSizeList>        (vector: VectorType<T>, index: number): T['TValue'];\n    visitMap                  <T extends Map_>                 (vector: VectorType<T>, index: number): T['TValue'];\n}\n\n/** @ignore */\nexport class GetVisitor extends Visitor {}\n\n/** @ignore */const epochDaysToMs = (data: Int32Array, index: number) => 86400000 * data[index];\n/** @ignore */const epochMillisecondsLongToMs = (data: Int32Array, index: number) => 4294967296 * (data[index + 1]) + (data[index] >>> 0);\n/** @ignore */const epochMicrosecondsLongToMs = (data: Int32Array, index: number) => 4294967296 * (data[index + 1] / 1000) + ((data[index] >>> 0) / 1000);\n/** @ignore */const epochNanosecondsLongToMs = (data: Int32Array, index: number) => 4294967296 * (data[index + 1] / 1000000) + ((data[index] >>> 0) / 1000000);\n\n/** @ignore */const epochMillisecondsToDate = (epochMs: number) => new Date(epochMs);\n/** @ignore */const epochDaysToDate = (data: Int32Array, index: number) => epochMillisecondsToDate(epochDaysToMs(data, index));\n/** @ignore */const epochMillisecondsLongToDate = (data: Int32Array, index: number) => epochMillisecondsToDate(epochMillisecondsLongToMs(data, index));\n\n/** @ignore */\nconst getNull = <T extends Null>(_vector: VectorType<T>, _index: number): T['TValue'] => null;\n/** @ignore */\nconst getVariableWidthBytes = (values: Uint8Array, valueOffsets: Int32Array, index: number) => {\n    const { [index]: x, [index + 1]: y } = valueOffsets;\n    return x != null && y != null ? values.subarray(x, y) : null as any;\n};\n\n/** @ignore */\nconst getBool = <T extends Bool>({ offset, values }: VectorType<T>, index: number): T['TValue'] => {\n    const idx = offset + index;\n    const byte = values[idx >> 3];\n    return (byte & 1 << (idx % 8)) !== 0;\n};\n\n/** @ignore */\ntype Numeric1X = Int8 | Int16 | Int32 | Uint8 | Uint16 | Uint32 | Float32 | Float64;\n/** @ignore */\ntype Numeric2X = Int64 | Uint64;\n\n/** @ignore */\nconst getDateDay         = <T extends DateDay>        ({ values         }: VectorType<T>, index: number): T['TValue'] => epochDaysToDate(values, index);\n/** @ignore */\nconst getDateMillisecond = <T extends DateMillisecond>({ values         }: VectorType<T>, index: number): T['TValue'] => epochMillisecondsLongToDate(values, index * 2);\n/** @ignore */\nconst getNumeric         = <T extends Numeric1X>      ({ stride, values }: VectorType<T>, index: number): T['TValue'] => values[stride * index];\n/** @ignore */\nconst getFloat16         = <T extends Float16>        ({ stride, values }: VectorType<T>, index: number): T['TValue'] => uint16ToFloat64(values[stride * index]);\n/** @ignore */\nconst getBigInts         = <T extends Numeric2X>({ stride, values, type }: VectorType<T>, index: number): T['TValue'] => <any> BN.new(values.subarray(stride * index, stride * (index + 1)), type.isSigned);\n/** @ignore */\nconst getFixedSizeBinary = <T extends FixedSizeBinary>({ stride, values }: VectorType<T>, index: number): T['TValue'] => values.subarray(stride * index, stride * (index + 1));\n\n/** @ignore */\nconst getBinary = <T extends Binary>({ values, valueOffsets }: VectorType<T>, index: number): T['TValue'] => getVariableWidthBytes(values, valueOffsets, index);\n/** @ignore */\nconst getUtf8 = <T extends Utf8>({ values, valueOffsets }: VectorType<T>, index: number): T['TValue'] => {\n    const bytes = getVariableWidthBytes(values, valueOffsets, index);\n    return bytes !== null ? decodeUtf8(bytes) : null as any;\n};\n\n/* istanbul ignore next */\n/** @ignore */\nconst getInt = <T extends Int>(vector: VectorType<T>, index: number): T['TValue'] => (\n    vector.type.bitWidth < 64\n        ? getNumeric(vector as VectorType<Numeric1X>, index)\n        : getBigInts(vector as VectorType<Numeric2X>, index)\n);\n\n/* istanbul ignore next */\n/** @ignore */\nconst getFloat = <T extends Float> (vector: VectorType<T>, index: number): T['TValue'] => (\n    vector.type.precision !== Precision.HALF\n        ? getNumeric(vector as VectorType<Numeric1X>, index)\n        : getFloat16(vector as VectorType<Float16>, index)\n);\n\n/* istanbul ignore next */\n/** @ignore */\nconst getDate = <T extends Date_> (vector: VectorType<T>, index: number): T['TValue'] => (\n    vector.type.unit === DateUnit.DAY\n        ? getDateDay(vector as VectorType<DateDay>, index)\n        : getDateMillisecond(vector as VectorType<DateMillisecond>, index)\n);\n\n/** @ignore */\nconst getTimestampSecond      = <T extends TimestampSecond>     ({ values }: VectorType<T>, index: number): T['TValue'] => 1000 * epochMillisecondsLongToMs(values, index * 2);\n/** @ignore */\nconst getTimestampMillisecond = <T extends TimestampMillisecond>({ values }: VectorType<T>, index: number): T['TValue'] => epochMillisecondsLongToMs(values, index * 2);\n/** @ignore */\nconst getTimestampMicrosecond = <T extends TimestampMicrosecond>({ values }: VectorType<T>, index: number): T['TValue'] => epochMicrosecondsLongToMs(values, index * 2);\n/** @ignore */\nconst getTimestampNanosecond  = <T extends TimestampNanosecond> ({ values }: VectorType<T>, index: number): T['TValue'] => epochNanosecondsLongToMs(values, index * 2);\n/* istanbul ignore next */\n/** @ignore */\nconst getTimestamp            = <T extends Timestamp>(vector: VectorType<T>, index: number): T['TValue'] => {\n    switch (vector.type.unit) {\n        case TimeUnit.SECOND:      return      getTimestampSecond(vector as VectorType<TimestampSecond>, index);\n        case TimeUnit.MILLISECOND: return getTimestampMillisecond(vector as VectorType<TimestampMillisecond>, index);\n        case TimeUnit.MICROSECOND: return getTimestampMicrosecond(vector as VectorType<TimestampMicrosecond>, index);\n        case TimeUnit.NANOSECOND:  return  getTimestampNanosecond(vector as VectorType<TimestampNanosecond>, index);\n    }\n};\n\n/** @ignore */\nconst getTimeSecond      = <T extends TimeSecond>     ({ values, stride }: VectorType<T>, index: number): T['TValue'] => values[stride * index];\n/** @ignore */\nconst getTimeMillisecond = <T extends TimeMillisecond>({ values, stride }: VectorType<T>, index: number): T['TValue'] => values[stride * index];\n/** @ignore */\nconst getTimeMicrosecond = <T extends TimeMicrosecond>({ values         }: VectorType<T>, index: number): T['TValue'] => BN.signed(values.subarray(2 * index, 2 * (index + 1)));\n/** @ignore */\nconst getTimeNanosecond  = <T extends TimeNanosecond> ({ values         }: VectorType<T>, index: number): T['TValue'] => BN.signed(values.subarray(2 * index, 2 * (index + 1)));\n/* istanbul ignore next */\n/** @ignore */\nconst getTime            = <T extends Time>(vector: VectorType<T>, index: number): T['TValue'] => {\n    switch (vector.type.unit) {\n        case TimeUnit.SECOND:      return      getTimeSecond(vector as VectorType<TimeSecond>, index);\n        case TimeUnit.MILLISECOND: return getTimeMillisecond(vector as VectorType<TimeMillisecond>, index);\n        case TimeUnit.MICROSECOND: return getTimeMicrosecond(vector as VectorType<TimeMicrosecond>, index);\n        case TimeUnit.NANOSECOND:  return  getTimeNanosecond(vector as VectorType<TimeNanosecond>, index);\n    }\n};\n\n/** @ignore */\nconst getDecimal = <T extends Decimal>({ values }: VectorType<T>, index: number): T['TValue'] => BN.decimal(values.subarray(4 * index, 4 * (index + 1)));\n\n/** @ignore */\nconst getList = <T extends List>(vector: VectorType<T>, index: number): T['TValue'] => {\n    const child = vector.getChildAt(0)!, { valueOffsets, stride } = vector;\n    return child.slice(valueOffsets[index * stride], valueOffsets[(index * stride) + 1]) as T['TValue'];\n};\n\n/** @ignore */\nconst getMap = <T extends Map_>(vector: VectorType<T>, index: number): T['TValue'] => {\n    return vector.bind(index) as T['TValue'];\n};\n\n/** @ignore */\nconst getStruct = <T extends Struct>(vector: VectorType<T>, index: number): T['TValue'] => {\n    return vector.bind(index) as T['TValue'];\n};\n\n/* istanbul ignore next */\n/** @ignore */\nconst getUnion = <\n    V extends VectorType<Union> | VectorType<DenseUnion> | VectorType<SparseUnion>\n>(vector: V, index: number): V['TValue'] => {\n    return vector.type.mode === UnionMode.Dense ?\n        getDenseUnion(vector as VectorType<DenseUnion>, index) :\n        getSparseUnion(vector as VectorType<SparseUnion>, index);\n};\n\n/** @ignore */\nconst getDenseUnion = <T extends DenseUnion>(vector: VectorType<T>, index: number): T['TValue'] => {\n    const childIndex = vector.typeIdToChildIndex[vector.typeIds[index]];\n    const child = vector.getChildAt(childIndex);\n    return child ? child.get(vector.valueOffsets[index]) : null;\n};\n\n/** @ignore */\nconst getSparseUnion = <T extends SparseUnion>(vector: VectorType<T>, index: number): T['TValue'] => {\n    const childIndex = vector.typeIdToChildIndex[vector.typeIds[index]];\n    const child = vector.getChildAt(childIndex);\n    return child ? child.get(index) : null;\n};\n\n/** @ignore */\nconst getDictionary = <T extends Dictionary>(vector: VectorType<T>, index: number): T['TValue'] => {\n    return vector.getValue(vector.getKey(index)!);\n};\n\n/* istanbul ignore next */\n/** @ignore */\nconst getInterval = <T extends Interval>(vector: VectorType<T>, index: number): T['TValue'] =>\n    (vector.type.unit === IntervalUnit.DAY_TIME)\n        ? getIntervalDayTime(vector as VectorType<IntervalDayTime>, index)\n        : getIntervalYearMonth(vector as VectorType<IntervalYearMonth>, index);\n\n/** @ignore */\nconst getIntervalDayTime = <T extends IntervalDayTime>({ values }: VectorType<T>, index: number): T['TValue'] => values.subarray(2 * index, 2 * (index + 1));\n\n/** @ignore */\nconst getIntervalYearMonth = <T extends IntervalYearMonth>({ values }: VectorType<T>, index: number): T['TValue'] => {\n    const interval = values[index];\n    const int32s = new Int32Array(2);\n    int32s[0] = interval / 12 | 0; /* years */\n    int32s[1] = interval % 12 | 0; /* months */\n    return int32s;\n};\n\n/** @ignore */\nconst getFixedSizeList = <T extends FixedSizeList>(vector: VectorType<T>, index: number): T['TValue'] => {\n    const child = vector.getChildAt(0)!, { stride } = vector;\n    return child.slice(index * stride, (index + 1) * stride) as T['TValue'];\n};\n\nGetVisitor.prototype.visitNull                 =                 getNull;\nGetVisitor.prototype.visitBool                 =                 getBool;\nGetVisitor.prototype.visitInt                  =                  getInt;\nGetVisitor.prototype.visitInt8                 =              getNumeric;\nGetVisitor.prototype.visitInt16                =              getNumeric;\nGetVisitor.prototype.visitInt32                =              getNumeric;\nGetVisitor.prototype.visitInt64                =              getBigInts;\nGetVisitor.prototype.visitUint8                =              getNumeric;\nGetVisitor.prototype.visitUint16               =              getNumeric;\nGetVisitor.prototype.visitUint32               =              getNumeric;\nGetVisitor.prototype.visitUint64               =              getBigInts;\nGetVisitor.prototype.visitFloat                =                getFloat;\nGetVisitor.prototype.visitFloat16              =              getFloat16;\nGetVisitor.prototype.visitFloat32              =              getNumeric;\nGetVisitor.prototype.visitFloat64              =              getNumeric;\nGetVisitor.prototype.visitUtf8                 =                 getUtf8;\nGetVisitor.prototype.visitBinary               =               getBinary;\nGetVisitor.prototype.visitFixedSizeBinary      =      getFixedSizeBinary;\nGetVisitor.prototype.visitDate                 =                 getDate;\nGetVisitor.prototype.visitDateDay              =              getDateDay;\nGetVisitor.prototype.visitDateMillisecond      =      getDateMillisecond;\nGetVisitor.prototype.visitTimestamp            =            getTimestamp;\nGetVisitor.prototype.visitTimestampSecond      =      getTimestampSecond;\nGetVisitor.prototype.visitTimestampMillisecond = getTimestampMillisecond;\nGetVisitor.prototype.visitTimestampMicrosecond = getTimestampMicrosecond;\nGetVisitor.prototype.visitTimestampNanosecond  =  getTimestampNanosecond;\nGetVisitor.prototype.visitTime                 =                 getTime;\nGetVisitor.prototype.visitTimeSecond           =           getTimeSecond;\nGetVisitor.prototype.visitTimeMillisecond      =      getTimeMillisecond;\nGetVisitor.prototype.visitTimeMicrosecond      =      getTimeMicrosecond;\nGetVisitor.prototype.visitTimeNanosecond       =       getTimeNanosecond;\nGetVisitor.prototype.visitDecimal              =              getDecimal;\nGetVisitor.prototype.visitList                 =                 getList;\nGetVisitor.prototype.visitStruct               =               getStruct;\nGetVisitor.prototype.visitUnion                =                getUnion;\nGetVisitor.prototype.visitDenseUnion           =           getDenseUnion;\nGetVisitor.prototype.visitSparseUnion          =          getSparseUnion;\nGetVisitor.prototype.visitDictionary           =           getDictionary;\nGetVisitor.prototype.visitInterval             =             getInterval;\nGetVisitor.prototype.visitIntervalDayTime      =      getIntervalDayTime;\nGetVisitor.prototype.visitIntervalYearMonth    =    getIntervalYearMonth;\nGetVisitor.prototype.visitFixedSizeList        =        getFixedSizeList;\nGetVisitor.prototype.visitMap                  =                  getMap;\n\n/** @ignore */\nexport const instance = new GetVisitor();\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Type } from '../enum';\nimport { Visitor } from '../visitor';\nimport { VectorType } from '../interfaces';\nimport { getBool, iterateBits } from '../util/bit';\nimport { createElementComparator } from '../util/vector';\nimport {\n    DataType, Dictionary,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\n    Float, Float16, Float32, Float64,\n    Int, Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64,\n    Date_, DateDay, DateMillisecond,\n    Interval, IntervalDayTime, IntervalYearMonth,\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\n    Union, DenseUnion, SparseUnion,\n} from '../type';\n\n/** @ignore */\nexport interface IndexOfVisitor extends Visitor {\n    visit<T extends VectorType>  (node: T, value: T['TValue'] | null, index?: number): number;\n    visitMany <T extends VectorType>  (nodes: T[], values: (T['TValue'] | null)[], indices: (number | undefined)[]): number[];\n    getVisitFn<T extends Type>    (node: T): (vector: VectorType<T>, value: VectorType<T>['TValue'] | null, index?: number) => number;\n    getVisitFn<T extends DataType>(node: VectorType<T> | Data<T> | T): (vector: VectorType<T>, value:         T['TValue'] | null, index?: number) => number;\n    visitNull                 <T extends Null>                (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitBool                 <T extends Bool>                (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitInt                  <T extends Int>                 (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitInt8                 <T extends Int8>                (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitInt16                <T extends Int16>               (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitInt32                <T extends Int32>               (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitInt64                <T extends Int64>               (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitUint8                <T extends Uint8>               (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitUint16               <T extends Uint16>              (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitUint32               <T extends Uint32>              (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitUint64               <T extends Uint64>              (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitFloat                <T extends Float>               (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitFloat16              <T extends Float16>             (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitFloat32              <T extends Float32>             (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitFloat64              <T extends Float64>             (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitUtf8                 <T extends Utf8>                (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitBinary               <T extends Binary>              (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitFixedSizeBinary      <T extends FixedSizeBinary>     (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitDate                 <T extends Date_>               (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitDateDay              <T extends DateDay>             (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitDateMillisecond      <T extends DateMillisecond>     (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimestamp            <T extends Timestamp>           (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimestampSecond      <T extends TimestampSecond>     (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimestampMillisecond <T extends TimestampMillisecond>(vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimestampMicrosecond <T extends TimestampMicrosecond>(vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimestampNanosecond  <T extends TimestampNanosecond> (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitTime                 <T extends Time>                (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimeSecond           <T extends TimeSecond>          (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimeMillisecond      <T extends TimeMillisecond>     (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimeMicrosecond      <T extends TimeMicrosecond>     (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimeNanosecond       <T extends TimeNanosecond>      (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitDecimal              <T extends Decimal>             (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitList                 <T extends List>                (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitStruct               <T extends Struct>              (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitUnion                <T extends Union>               (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitDenseUnion           <T extends DenseUnion>          (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitSparseUnion          <T extends SparseUnion>         (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitDictionary           <T extends Dictionary>          (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitInterval             <T extends Interval>            (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitIntervalDayTime      <T extends IntervalDayTime>     (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitIntervalYearMonth    <T extends IntervalYearMonth>   (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitFixedSizeList        <T extends FixedSizeList>       (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitMap                  <T extends Map_>                (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n}\n\n/** @ignore */\nexport class IndexOfVisitor extends Visitor {}\n\n/** @ignore */\nfunction nullIndexOf(vector: VectorType<Null>, searchElement?: null) {\n    // if you're looking for nulls and the vector isn't empty, we've got 'em!\n    return searchElement === null && vector.length > 0 ? 0 : -1;\n}\n\n/** @ignore */\nfunction indexOfNull<T extends DataType>(vector: VectorType<T>, fromIndex?: number): number {\n    const { nullBitmap } = vector;\n    if (!nullBitmap || vector.nullCount <= 0) {\n        return -1;\n    }\n    let i = 0;\n    for (const isValid of iterateBits(nullBitmap, vector.data.offset + (fromIndex || 0), vector.length, nullBitmap, getBool)) {\n        if (!isValid) { return i; }\n        ++i;\n    }\n    return -1;\n}\n\n/** @ignore */\nfunction indexOfValue<T extends DataType>(vector: VectorType<T>, searchElement?: T['TValue'] | null, fromIndex?: number): number {\n    if (searchElement === undefined) { return -1; }\n    if (searchElement === null) { return indexOfNull(vector, fromIndex); }\n    const compare = createElementComparator(searchElement);\n    for (let i = (fromIndex || 0) - 1, n = vector.length; ++i < n;) {\n        if (compare(vector.get(i))) {\n            return i;\n        }\n    }\n    return -1;\n}\n\n/** @ignore */\nfunction indexOfUnion<T extends DataType>(vector: VectorType<T>, searchElement?: T['TValue'] | null, fromIndex?: number): number {\n    // Unions are special -- they do have a nullBitmap, but so can their children.\n    // If the searchElement is null, we don't know whether it came from the Union's\n    // bitmap or one of its childrens'. So we don't interrogate the Union's bitmap,\n    // since that will report the wrong index if a child has a null before the Union.\n    const compare = createElementComparator(searchElement);\n    for (let i = (fromIndex || 0) - 1, n = vector.length; ++i < n;) {\n        if (compare(vector.get(i))) {\n            return i;\n        }\n    }\n    return -1;\n}\n\nIndexOfVisitor.prototype.visitNull                 =  nullIndexOf;\nIndexOfVisitor.prototype.visitBool                 = indexOfValue;\nIndexOfVisitor.prototype.visitInt                  = indexOfValue;\nIndexOfVisitor.prototype.visitInt8                 = indexOfValue;\nIndexOfVisitor.prototype.visitInt16                = indexOfValue;\nIndexOfVisitor.prototype.visitInt32                = indexOfValue;\nIndexOfVisitor.prototype.visitInt64                = indexOfValue;\nIndexOfVisitor.prototype.visitUint8                = indexOfValue;\nIndexOfVisitor.prototype.visitUint16               = indexOfValue;\nIndexOfVisitor.prototype.visitUint32               = indexOfValue;\nIndexOfVisitor.prototype.visitUint64               = indexOfValue;\nIndexOfVisitor.prototype.visitFloat                = indexOfValue;\nIndexOfVisitor.prototype.visitFloat16              = indexOfValue;\nIndexOfVisitor.prototype.visitFloat32              = indexOfValue;\nIndexOfVisitor.prototype.visitFloat64              = indexOfValue;\nIndexOfVisitor.prototype.visitUtf8                 = indexOfValue;\nIndexOfVisitor.prototype.visitBinary               = indexOfValue;\nIndexOfVisitor.prototype.visitFixedSizeBinary      = indexOfValue;\nIndexOfVisitor.prototype.visitDate                 = indexOfValue;\nIndexOfVisitor.prototype.visitDateDay              = indexOfValue;\nIndexOfVisitor.prototype.visitDateMillisecond      = indexOfValue;\nIndexOfVisitor.prototype.visitTimestamp            = indexOfValue;\nIndexOfVisitor.prototype.visitTimestampSecond      = indexOfValue;\nIndexOfVisitor.prototype.visitTimestampMillisecond = indexOfValue;\nIndexOfVisitor.prototype.visitTimestampMicrosecond = indexOfValue;\nIndexOfVisitor.prototype.visitTimestampNanosecond  = indexOfValue;\nIndexOfVisitor.prototype.visitTime                 = indexOfValue;\nIndexOfVisitor.prototype.visitTimeSecond           = indexOfValue;\nIndexOfVisitor.prototype.visitTimeMillisecond      = indexOfValue;\nIndexOfVisitor.prototype.visitTimeMicrosecond      = indexOfValue;\nIndexOfVisitor.prototype.visitTimeNanosecond       = indexOfValue;\nIndexOfVisitor.prototype.visitDecimal              = indexOfValue;\nIndexOfVisitor.prototype.visitList                 = indexOfValue;\nIndexOfVisitor.prototype.visitStruct               = indexOfValue;\nIndexOfVisitor.prototype.visitUnion                = indexOfValue;\nIndexOfVisitor.prototype.visitDenseUnion           = indexOfUnion;\nIndexOfVisitor.prototype.visitSparseUnion          = indexOfUnion;\nIndexOfVisitor.prototype.visitDictionary           = indexOfValue;\nIndexOfVisitor.prototype.visitInterval             = indexOfValue;\nIndexOfVisitor.prototype.visitIntervalDayTime      = indexOfValue;\nIndexOfVisitor.prototype.visitIntervalYearMonth    = indexOfValue;\nIndexOfVisitor.prototype.visitFixedSizeList        = indexOfValue;\nIndexOfVisitor.prototype.visitMap                  = indexOfValue;\n\n/** @ignore */\nexport const instance = new IndexOfVisitor();\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Type } from '../enum';\nimport { Visitor } from '../visitor';\nimport { VectorType } from '../interfaces';\nimport { iterateBits } from '../util/bit';\nimport { instance as getVisitor } from './get';\nimport {\n    DataType, Dictionary,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\n    Float, Float16, Float32, Float64,\n    Int, Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64,\n    Date_, DateDay, DateMillisecond,\n    Interval, IntervalDayTime, IntervalYearMonth,\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\n    Union, DenseUnion, SparseUnion,\n} from '../type';\n\n/** @ignore */\nexport interface IteratorVisitor extends Visitor {\n    visit<T extends VectorType>(node: T): IterableIterator<T['TValue'] | null>;\n    visitMany <T extends VectorType>(nodes: T[]): IterableIterator<T['TValue'] | null>[];\n    getVisitFn<T extends Type>(node: T): (vector: VectorType<T>) => IterableIterator<VectorType<T>['TValue'] | null>;\n    getVisitFn<T extends DataType>(node: VectorType<T> | Data<T> | T): (vector: VectorType<T>) => IterableIterator<VectorType<T>['TValue'] | null>;\n    visitNull                 <T extends Null>                 (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitBool                 <T extends Bool>                 (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitInt                  <T extends Int>                  (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitInt8                 <T extends Int8>                 (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitInt16                <T extends Int16>                (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitInt32                <T extends Int32>                (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitInt64                <T extends Int64>                (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitUint8                <T extends Uint8>                (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitUint16               <T extends Uint16>               (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitUint32               <T extends Uint32>               (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitUint64               <T extends Uint64>               (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitFloat                <T extends Float>                (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitFloat16              <T extends Float16>              (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitFloat32              <T extends Float32>              (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitFloat64              <T extends Float64>              (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitUtf8                 <T extends Utf8>                 (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitBinary               <T extends Binary>               (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitFixedSizeBinary      <T extends FixedSizeBinary>      (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitDate                 <T extends Date_>                (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitDateDay              <T extends DateDay>              (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitDateMillisecond      <T extends DateMillisecond>      (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitTimestamp            <T extends Timestamp>            (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitTimestampSecond      <T extends TimestampSecond>      (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitTimestampMillisecond <T extends TimestampMillisecond> (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitTimestampMicrosecond <T extends TimestampMicrosecond> (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitTimestampNanosecond  <T extends TimestampNanosecond>  (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitTime                 <T extends Time>                 (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitTimeSecond           <T extends TimeSecond>           (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitTimeMillisecond      <T extends TimeMillisecond>      (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitTimeMicrosecond      <T extends TimeMicrosecond>      (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitTimeNanosecond       <T extends TimeNanosecond>       (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitDecimal              <T extends Decimal>              (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitList                 <T extends List>                 (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitStruct               <T extends Struct>               (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitUnion                <T extends Union>                (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitDenseUnion           <T extends DenseUnion>           (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitSparseUnion          <T extends SparseUnion>          (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitDictionary           <T extends Dictionary>           (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitInterval             <T extends Interval>             (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitIntervalDayTime      <T extends IntervalDayTime>      (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitIntervalYearMonth    <T extends IntervalYearMonth>    (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitFixedSizeList        <T extends FixedSizeList>        (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitMap                  <T extends Map_>                 (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n}\n\n/** @ignore */\nexport class IteratorVisitor extends Visitor {}\n\n/** @ignore */\nfunction nullableIterator<T extends DataType>(vector: VectorType<T>): IterableIterator<T['TValue'] | null> {\n    const getFn = getVisitor.getVisitFn(vector);\n    return iterateBits<T['TValue'] | null>(\n        vector.nullBitmap, vector.offset, vector.length, vector,\n        (vec: VectorType<T>, idx: number, nullByte: number, nullBit: number) =>\n            ((nullByte & 1 << nullBit) !== 0) ? getFn(vec, idx) : null\n    );\n}\n\n/** @ignore */\nfunction vectorIterator<T extends DataType>(vector: VectorType<T>): IterableIterator<T['TValue'] | null> {\n\n    // If nullable, iterate manually\n    if (vector.nullCount > 0) {\n        return nullableIterator<T>(vector);\n    }\n\n    const { type, typeId, length } = vector;\n\n    // Fast case, defer to native iterators if possible\n    if (vector.stride === 1 && (\n        (typeId === Type.Timestamp) ||\n        (typeId === Type.Int && (type as Int).bitWidth !== 64) ||\n        (typeId === Type.Time && (type as Time).bitWidth !== 64) ||\n        (typeId === Type.Float && (type as Float).precision > 0 /* Precision.HALF */)\n    )) {\n        return vector.values.subarray(0, length)[Symbol.iterator]();\n    }\n\n    // Otherwise, iterate manually\n    return (function* (getFn) {\n        for (let index = -1; ++index < length;) {\n            yield getFn(vector, index);\n        }\n    })(getVisitor.getVisitFn(vector));\n}\n\nIteratorVisitor.prototype.visitNull                 = vectorIterator;\nIteratorVisitor.prototype.visitBool                 = vectorIterator;\nIteratorVisitor.prototype.visitInt                  = vectorIterator;\nIteratorVisitor.prototype.visitInt8                 = vectorIterator;\nIteratorVisitor.prototype.visitInt16                = vectorIterator;\nIteratorVisitor.prototype.visitInt32                = vectorIterator;\nIteratorVisitor.prototype.visitInt64                = vectorIterator;\nIteratorVisitor.prototype.visitUint8                = vectorIterator;\nIteratorVisitor.prototype.visitUint16               = vectorIterator;\nIteratorVisitor.prototype.visitUint32               = vectorIterator;\nIteratorVisitor.prototype.visitUint64               = vectorIterator;\nIteratorVisitor.prototype.visitFloat                = vectorIterator;\nIteratorVisitor.prototype.visitFloat16              = vectorIterator;\nIteratorVisitor.prototype.visitFloat32              = vectorIterator;\nIteratorVisitor.prototype.visitFloat64              = vectorIterator;\nIteratorVisitor.prototype.visitUtf8                 = vectorIterator;\nIteratorVisitor.prototype.visitBinary               = vectorIterator;\nIteratorVisitor.prototype.visitFixedSizeBinary      = vectorIterator;\nIteratorVisitor.prototype.visitDate                 = vectorIterator;\nIteratorVisitor.prototype.visitDateDay              = vectorIterator;\nIteratorVisitor.prototype.visitDateMillisecond      = vectorIterator;\nIteratorVisitor.prototype.visitTimestamp            = vectorIterator;\nIteratorVisitor.prototype.visitTimestampSecond      = vectorIterator;\nIteratorVisitor.prototype.visitTimestampMillisecond = vectorIterator;\nIteratorVisitor.prototype.visitTimestampMicrosecond = vectorIterator;\nIteratorVisitor.prototype.visitTimestampNanosecond  = vectorIterator;\nIteratorVisitor.prototype.visitTime                 = vectorIterator;\nIteratorVisitor.prototype.visitTimeSecond           = vectorIterator;\nIteratorVisitor.prototype.visitTimeMillisecond      = vectorIterator;\nIteratorVisitor.prototype.visitTimeMicrosecond      = vectorIterator;\nIteratorVisitor.prototype.visitTimeNanosecond       = vectorIterator;\nIteratorVisitor.prototype.visitDecimal              = vectorIterator;\nIteratorVisitor.prototype.visitList                 = vectorIterator;\nIteratorVisitor.prototype.visitStruct               = vectorIterator;\nIteratorVisitor.prototype.visitUnion                = vectorIterator;\nIteratorVisitor.prototype.visitDenseUnion           = vectorIterator;\nIteratorVisitor.prototype.visitSparseUnion          = vectorIterator;\nIteratorVisitor.prototype.visitDictionary           = vectorIterator;\nIteratorVisitor.prototype.visitInterval             = vectorIterator;\nIteratorVisitor.prototype.visitIntervalDayTime      = vectorIterator;\nIteratorVisitor.prototype.visitIntervalYearMonth    = vectorIterator;\nIteratorVisitor.prototype.visitFixedSizeList        = vectorIterator;\nIteratorVisitor.prototype.visitMap                  = vectorIterator;\n\n/** @ignore */\nexport const instance = new IteratorVisitor();\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Type } from '../enum';\nimport { Visitor } from '../visitor';\nimport { VectorType } from '../interfaces';\nimport { instance as iteratorVisitor } from './iterator';\nimport {\n    DataType, Dictionary,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\n    Float, Float16, Float32, Float64,\n    Int, Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64,\n    Date_, DateDay, DateMillisecond,\n    Interval, IntervalDayTime, IntervalYearMonth,\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\n    Union, DenseUnion, SparseUnion,\n} from '../type';\n\n/** @ignore */\nexport interface ToArrayVisitor extends Visitor {\n    visit<T extends VectorType>(node: T): T['TArray'];\n    visitMany<T extends VectorType>(nodes: T[]): T['TArray'][];\n    getVisitFn<T extends Type>(node: T): (vector: VectorType<T>) => VectorType<T>['TArray'];\n    getVisitFn<T extends DataType>(node: VectorType<T> | Data<T> | T): (vector: VectorType<T>) => VectorType<T>['TArray'];\n    visitNull                                    <T extends Null>                (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitBool                                    <T extends Bool>                (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitInt                                     <T extends Int>                 (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitInt8                                    <T extends Int8>                (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitInt16                                   <T extends Int16>               (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitInt32                                   <T extends Int32>               (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitInt64                                   <T extends Int64>               (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitUint8                                   <T extends Uint8>               (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitUint16                                  <T extends Uint16>              (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitUint32                                  <T extends Uint32>              (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitUint64                                  <T extends Uint64>              (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitFloat                                   <T extends Float>               (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitFloat16                                 <T extends Float16>             (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitFloat32                                 <T extends Float32>             (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitFloat64                                 <T extends Float64>             (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitUtf8                                    <T extends Utf8>                (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitBinary                                  <T extends Binary>              (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitFixedSizeBinary                         <T extends FixedSizeBinary>     (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitDate                                    <T extends Date_>               (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitDateDay                                 <T extends DateDay>             (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitDateMillisecond                         <T extends DateMillisecond>     (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitTimestamp                               <T extends Timestamp>           (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitTimestampSecond                         <T extends TimestampSecond>     (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitTimestampMillisecond                    <T extends TimestampMillisecond>(vector: VectorType<T>): VectorType<T>['TArray'];\n    visitTimestampMicrosecond                    <T extends TimestampMicrosecond>(vector: VectorType<T>): VectorType<T>['TArray'];\n    visitTimestampNanosecond                     <T extends TimestampNanosecond> (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitTime                                    <T extends Time>                (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitTimeSecond                              <T extends TimeSecond>          (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitTimeMillisecond                         <T extends TimeMillisecond>     (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitTimeMicrosecond                         <T extends TimeMicrosecond>     (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitTimeNanosecond                          <T extends TimeNanosecond>      (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitDecimal                                 <T extends Decimal>             (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitList                <R extends DataType, T extends List<R>>             (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitStruct                                  <T extends Struct>              (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitUnion                                   <T extends Union>               (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitDenseUnion                              <T extends DenseUnion>          (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitSparseUnion                             <T extends SparseUnion>         (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitDictionary          <R extends DataType, T extends Dictionary<R>>       (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitInterval                                <T extends Interval>            (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitIntervalDayTime                         <T extends IntervalDayTime>     (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitIntervalYearMonth                       <T extends IntervalYearMonth>   (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitFixedSizeList       <R extends DataType, T extends FixedSizeList<R>>    (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitMap                                     <T extends Map_>                (vector: VectorType<T>): VectorType<T>['TArray'];\n}\n\n/** @ignore */\nexport class ToArrayVisitor extends Visitor {}\n\n/** @ignore */\nfunction arrayOfVector<T extends DataType>(vector: VectorType<T>): T['TArray'] {\n\n    const { type, length, stride } = vector;\n\n    // Fast case, return subarray if possible\n    switch (type.typeId) {\n        case Type.Int:\n        case Type.Float: case Type.Decimal:\n        case Type.Time: case Type.Timestamp:\n            return vector.values.subarray(0, length * stride);\n    }\n\n    // Otherwise if not primitive, slow copy\n    return [...iteratorVisitor.visit(vector)] as T['TArray'];\n}\n\nToArrayVisitor.prototype.visitNull                 = arrayOfVector;\nToArrayVisitor.prototype.visitBool                 = arrayOfVector;\nToArrayVisitor.prototype.visitInt                  = arrayOfVector;\nToArrayVisitor.prototype.visitInt8                 = arrayOfVector;\nToArrayVisitor.prototype.visitInt16                = arrayOfVector;\nToArrayVisitor.prototype.visitInt32                = arrayOfVector;\nToArrayVisitor.prototype.visitInt64                = arrayOfVector;\nToArrayVisitor.prototype.visitUint8                = arrayOfVector;\nToArrayVisitor.prototype.visitUint16               = arrayOfVector;\nToArrayVisitor.prototype.visitUint32               = arrayOfVector;\nToArrayVisitor.prototype.visitUint64               = arrayOfVector;\nToArrayVisitor.prototype.visitFloat                = arrayOfVector;\nToArrayVisitor.prototype.visitFloat16              = arrayOfVector;\nToArrayVisitor.prototype.visitFloat32              = arrayOfVector;\nToArrayVisitor.prototype.visitFloat64              = arrayOfVector;\nToArrayVisitor.prototype.visitUtf8                 = arrayOfVector;\nToArrayVisitor.prototype.visitBinary               = arrayOfVector;\nToArrayVisitor.prototype.visitFixedSizeBinary      = arrayOfVector;\nToArrayVisitor.prototype.visitDate                 = arrayOfVector;\nToArrayVisitor.prototype.visitDateDay              = arrayOfVector;\nToArrayVisitor.prototype.visitDateMillisecond      = arrayOfVector;\nToArrayVisitor.prototype.visitTimestamp            = arrayOfVector;\nToArrayVisitor.prototype.visitTimestampSecond      = arrayOfVector;\nToArrayVisitor.prototype.visitTimestampMillisecond = arrayOfVector;\nToArrayVisitor.prototype.visitTimestampMicrosecond = arrayOfVector;\nToArrayVisitor.prototype.visitTimestampNanosecond  = arrayOfVector;\nToArrayVisitor.prototype.visitTime                 = arrayOfVector;\nToArrayVisitor.prototype.visitTimeSecond           = arrayOfVector;\nToArrayVisitor.prototype.visitTimeMillisecond      = arrayOfVector;\nToArrayVisitor.prototype.visitTimeMicrosecond      = arrayOfVector;\nToArrayVisitor.prototype.visitTimeNanosecond       = arrayOfVector;\nToArrayVisitor.prototype.visitDecimal              = arrayOfVector;\nToArrayVisitor.prototype.visitList                 = arrayOfVector;\nToArrayVisitor.prototype.visitStruct               = arrayOfVector;\nToArrayVisitor.prototype.visitUnion                = arrayOfVector;\nToArrayVisitor.prototype.visitDenseUnion           = arrayOfVector;\nToArrayVisitor.prototype.visitSparseUnion          = arrayOfVector;\nToArrayVisitor.prototype.visitDictionary           = arrayOfVector;\nToArrayVisitor.prototype.visitInterval             = arrayOfVector;\nToArrayVisitor.prototype.visitIntervalDayTime      = arrayOfVector;\nToArrayVisitor.prototype.visitIntervalYearMonth    = arrayOfVector;\nToArrayVisitor.prototype.visitFixedSizeList        = arrayOfVector;\nToArrayVisitor.prototype.visitMap                  = arrayOfVector;\n\n/** @ignore */\nexport const instance = new ToArrayVisitor();\n","/* istanbul ignore file */\n\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Visitor } from '../visitor';\nimport { VectorType } from '../interfaces';\nimport { Type, TimeUnit } from '../enum';\nimport { Schema, Field } from '../schema';\nimport {\n    DataType, Dictionary,\n    Float, Int, Date_, Interval, Time, Timestamp,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary,\n    List, FixedSizeList, Map_, Struct, Union,\n} from '../type';\n\n/** @ignore */ const sum = (x: number, y: number) => x + y;\n/** @ignore */ const variableWidthColumnErrorMessage = (type: DataType) => `Cannot compute the byte width of variable-width column ${type}`;\n\n/** @ignore */\nexport interface ByteWidthVisitor extends Visitor {\n    visit<T extends DataType>(node: T): number;\n    visitMany<T extends DataType>(nodes: T[]): number[];\n    getVisitFn<T extends Type>    (node: T): (type: DataType<T>) => number;\n    getVisitFn<T extends DataType>(node: VectorType<T> | Data<T> | T): (type: T) => number;\n}\n\n/** @ignore */\nexport class ByteWidthVisitor extends Visitor {\n    public visitNull            (____: Null            ) { return 0; }\n    public visitInt             (type: Int             ) { return type.bitWidth / 8; }\n    public visitFloat           (type: Float           ) { return type.ArrayType.BYTES_PER_ELEMENT; }\n    public visitBinary          (type: Binary          ) { throw new Error(variableWidthColumnErrorMessage(type)); }\n    public visitUtf8            (type: Utf8            ) { throw new Error(variableWidthColumnErrorMessage(type)); }\n    public visitBool            (____: Bool            ) { return 1 / 8; }\n    public visitDecimal         (____: Decimal         ) { return 16; }\n    public visitDate            (type: Date_           ) { return (type.unit + 1) * 4; }\n    public visitTime            (type: Time            ) { return type.bitWidth / 8; }\n    public visitTimestamp       (type: Timestamp       ) { return type.unit === TimeUnit.SECOND ? 4 : 8; }\n    public visitInterval        (type: Interval        ) { return (type.unit + 1) * 4; }\n    public visitList            (type: List            ) { throw new Error(variableWidthColumnErrorMessage(type)); }\n    public visitStruct          (type: Struct          ) { return this.visitFields(type.children).reduce(sum, 0); }\n    public visitUnion           (type: Union           ) { return this.visitFields(type.children).reduce(sum, 0); }\n    public visitFixedSizeBinary (type: FixedSizeBinary ) { return type.byteWidth; }\n    public visitFixedSizeList   (type: FixedSizeList   ) { return type.listSize * this.visitFields(type.children).reduce(sum, 0); }\n    public visitMap             (type: Map_            ) { return this.visitFields(type.children).reduce(sum, 0); }\n    public visitDictionary      (type: Dictionary      ) { return this.visit(type.indices); }\n    public visitFields          (fields: Field[]       ) { return (fields || []).map((field) => this.visit(field.type)); }\n    public visitSchema          (schema: Schema        ) { return this.visitFields(schema.fields).reduce(sum, 0); }\n}\n\n/** @ignore */\nexport const instance = new ByteWidthVisitor();\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Type } from '../enum';\nimport { DataType } from '../type';\nimport { Visitor } from '../visitor';\nimport { VectorType, VectorCtor } from '../interfaces';\n\nimport { BinaryVector } from '../vector/binary';\nimport { BoolVector } from '../vector/bool';\nimport { DateVector, DateDayVector, DateMillisecondVector } from '../vector/date';\nimport { DecimalVector } from '../vector/decimal';\nimport { DictionaryVector } from '../vector/dictionary';\nimport { FixedSizeBinaryVector } from '../vector/fixedsizebinary';\nimport { FixedSizeListVector } from '../vector/fixedsizelist';\nimport { FloatVector, Float16Vector, Float32Vector, Float64Vector } from '../vector/float';\nimport { IntervalVector, IntervalDayTimeVector, IntervalYearMonthVector } from '../vector/interval';\nimport { IntVector, Int8Vector, Int16Vector, Int32Vector, Int64Vector, Uint8Vector, Uint16Vector, Uint32Vector, Uint64Vector } from '../vector/int';\nimport { ListVector } from '../vector/list';\nimport { MapVector } from '../vector/map';\nimport { NullVector } from '../vector/null';\nimport { StructVector } from '../vector/struct';\nimport { TimestampVector, TimestampSecondVector, TimestampMillisecondVector, TimestampMicrosecondVector, TimestampNanosecondVector } from '../vector/timestamp';\nimport { TimeVector, TimeSecondVector, TimeMillisecondVector, TimeMicrosecondVector, TimeNanosecondVector } from '../vector/time';\nimport { UnionVector, DenseUnionVector, SparseUnionVector } from '../vector/union';\nimport { Utf8Vector } from '../vector/utf8';\n\n/** @ignore */\nexport interface GetVectorConstructor extends Visitor {\n    visit<T extends Type>(node: T): VectorCtor<T>;\n    visitMany <T extends Type>(nodes: T[]): VectorCtor<T>[];\n    getVisitFn<T extends Type>(node: T): () => VectorCtor<T>;\n    getVisitFn<T extends DataType>(node: VectorType<T> | Data<T> | T): () => VectorCtor<T>;\n}\n\n/** @ignore */\nexport class GetVectorConstructor extends Visitor {\n    public visitNull                 () { return NullVector; }\n    public visitBool                 () { return BoolVector; }\n    public visitInt                  () { return IntVector; }\n    public visitInt8                 () { return Int8Vector; }\n    public visitInt16                () { return Int16Vector; }\n    public visitInt32                () { return Int32Vector; }\n    public visitInt64                () { return Int64Vector; }\n    public visitUint8                () { return Uint8Vector; }\n    public visitUint16               () { return Uint16Vector; }\n    public visitUint32               () { return Uint32Vector; }\n    public visitUint64               () { return Uint64Vector; }\n    public visitFloat                () { return FloatVector; }\n    public visitFloat16              () { return Float16Vector; }\n    public visitFloat32              () { return Float32Vector; }\n    public visitFloat64              () { return Float64Vector; }\n    public visitUtf8                 () { return Utf8Vector; }\n    public visitBinary               () { return BinaryVector; }\n    public visitFixedSizeBinary      () { return FixedSizeBinaryVector; }\n    public visitDate                 () { return DateVector; }\n    public visitDateDay              () { return DateDayVector; }\n    public visitDateMillisecond      () { return DateMillisecondVector; }\n    public visitTimestamp            () { return TimestampVector; }\n    public visitTimestampSecond      () { return TimestampSecondVector; }\n    public visitTimestampMillisecond () { return TimestampMillisecondVector; }\n    public visitTimestampMicrosecond () { return TimestampMicrosecondVector; }\n    public visitTimestampNanosecond  () { return TimestampNanosecondVector; }\n    public visitTime                 () { return TimeVector; }\n    public visitTimeSecond           () { return TimeSecondVector; }\n    public visitTimeMillisecond      () { return TimeMillisecondVector; }\n    public visitTimeMicrosecond      () { return TimeMicrosecondVector; }\n    public visitTimeNanosecond       () { return TimeNanosecondVector; }\n    public visitDecimal              () { return DecimalVector; }\n    public visitList                 () { return ListVector; }\n    public visitStruct               () { return StructVector; }\n    public visitUnion                () { return UnionVector; }\n    public visitDenseUnion           () { return DenseUnionVector; }\n    public visitSparseUnion          () { return SparseUnionVector; }\n    public visitDictionary           () { return DictionaryVector; }\n    public visitInterval             () { return IntervalVector; }\n    public visitIntervalDayTime      () { return IntervalDayTimeVector; }\n    public visitIntervalYearMonth    () { return IntervalYearMonthVector; }\n    public visitFixedSizeList        () { return FixedSizeListVector; }\n    public visitMap                  () { return MapVector; }\n}\n\n/** @ignore */\nexport const instance = new GetVectorConstructor();\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nexport { Vector } from '../vector';\nexport { BaseVector } from './base';\nexport { BinaryVector } from './binary';\nexport { BoolVector } from './bool';\nexport { Chunked } from './chunked';\nexport { DateVector, DateDayVector, DateMillisecondVector } from './date';\nexport { DecimalVector } from './decimal';\nexport { DictionaryVector } from './dictionary';\nexport { FixedSizeBinaryVector } from './fixedsizebinary';\nexport { FixedSizeListVector } from './fixedsizelist';\nexport { FloatVector, Float16Vector, Float32Vector, Float64Vector } from './float';\nexport { IntervalVector, IntervalDayTimeVector, IntervalYearMonthVector } from './interval';\nexport { IntVector, Int8Vector, Int16Vector, Int32Vector, Int64Vector, Uint8Vector, Uint16Vector, Uint32Vector, Uint64Vector } from './int';\nexport { ListVector } from './list';\nexport { MapVector } from './map';\nexport { NullVector } from './null';\nexport { StructVector } from './struct';\nexport { TimestampVector, TimestampSecondVector, TimestampMillisecondVector, TimestampMicrosecondVector, TimestampNanosecondVector } from './timestamp';\nexport { TimeVector, TimeSecondVector, TimeMillisecondVector, TimeMicrosecondVector, TimeNanosecondVector } from './time';\nexport { UnionVector, DenseUnionVector, SparseUnionVector } from './union';\nexport { Utf8Vector } from './utf8';\nexport { MapRow, StructRow } from './row';\n\nimport * as fn from '../util/fn';\nimport { Data } from '../data';\nimport { Type } from '../enum';\nimport { Vector } from '../vector';\nimport { DataType } from '../type';\nimport { Chunked } from './chunked';\nimport { BaseVector } from './base';\nimport { setBool } from '../util/bit';\nimport { isIterable, isAsyncIterable } from '../util/compat';\nimport { Builder, IterableBuilderOptions } from '../builder';\nimport { VectorType as V, VectorCtorArgs } from '../interfaces';\nimport { instance as getVisitor } from '../visitor/get';\nimport { instance as setVisitor } from '../visitor/set';\nimport { instance as indexOfVisitor } from '../visitor/indexof';\nimport { instance as toArrayVisitor } from '../visitor/toarray';\nimport { instance as iteratorVisitor } from '../visitor/iterator';\nimport { instance as byteWidthVisitor } from '../visitor/bytewidth';\nimport { instance as getVectorConstructor } from '../visitor/vectorctor';\n\ndeclare module '../vector' {\n    namespace Vector {\n        export { newVector as new };\n        export { vectorFrom as from };\n    }\n}\n\ndeclare module './base' {\n    namespace BaseVector {\n        export { vectorFrom as from };\n    }\n    interface BaseVector<T extends DataType> {\n        get(index: number): T['TValue'] | null;\n        set(index: number, value: T['TValue'] | null): void;\n        indexOf(value: T['TValue'] | null, fromIndex?: number): number;\n        toArray(): T['TArray'];\n        getByteWidth(): number;\n        [Symbol.iterator](): IterableIterator<T['TValue'] | null>;\n    }\n}\n\n/** @nocollapse */\nVector.new = newVector;\n\n/** @nocollapse */\nVector.from = vectorFrom;\n\n/** @ignore */\nfunction newVector<T extends DataType>(data: Data<T>, ...args: VectorCtorArgs<V<T>>): V<T> {\n    return new (getVectorConstructor.getVisitFn<T>(data)())(data, ...args) as V<T>;\n}\n\n/** @ignore */\nexport interface VectorBuilderOptions<T extends DataType, TNull = any> extends IterableBuilderOptions<T, TNull> { values: Iterable<T['TValue'] | TNull>; }\n/** @ignore */\nexport interface VectorBuilderOptionsAsync<T extends DataType, TNull = any> extends IterableBuilderOptions<T, TNull> { values: AsyncIterable<T['TValue'] | TNull>; }\n\n/** @ignore */\nexport function vectorFromValuesWithType<T extends DataType, TNull = any>(newDataType: () => T, input: Iterable<T['TValue'] | TNull> | AsyncIterable<T['TValue'] | TNull> | VectorBuilderOptions<T, TNull> | VectorBuilderOptionsAsync<T, TNull>) {\n    if (isIterable(input)) {\n        return Vector.from({ 'nullValues': [null, undefined], type: newDataType(), 'values': input }) as V<T>;\n    } else if (isAsyncIterable(input)) {\n        return Vector.from({ 'nullValues': [null, undefined], type: newDataType(), 'values': input }) as Promise<V<T>>;\n    }\n    const {\n        'values': values = [],\n        'type': type = newDataType(),\n        'nullValues': nullValues = [null, undefined],\n    } = { ...input };\n    return isIterable(values)\n        ? Vector.from({ nullValues, ...input, type } as VectorBuilderOptions<T, TNull>)\n        : Vector.from({ nullValues, ...input, type } as VectorBuilderOptionsAsync<T, TNull>);\n}\n\n/** @ignore */\nfunction vectorFrom<T extends DataType = any, TNull = any>(input: VectorBuilderOptions<T, TNull>): Vector<T>;\nfunction vectorFrom<T extends DataType = any, TNull = any>(input: VectorBuilderOptionsAsync<T, TNull>): Promise<Vector<T>>;\nfunction vectorFrom<T extends DataType = any, TNull = any>(input: VectorBuilderOptions<T, TNull> | VectorBuilderOptionsAsync<T, TNull>) {\n    const { 'values': values = [], ...options } = { 'nullValues': [null, undefined], ...input } as VectorBuilderOptions<T, TNull> | VectorBuilderOptionsAsync<T, TNull>;\n    if (isIterable<T['TValue'] | TNull>(values)) {\n        const chunks = [...Builder.throughIterable(options)(values)];\n        return chunks.length === 1 ? chunks[0] : Chunked.concat<T>(chunks);\n    }\n    return (async (chunks: V<T>[]) => {\n        const transform = Builder.throughAsyncIterable(options);\n        for await (const chunk of transform(values)) {\n            chunks.push(chunk);\n        }\n        return chunks.length === 1 ? chunks[0] : Chunked.concat<T>(chunks);\n    })([]);\n}\n\n//\n// We provide the following method implementations for code navigability purposes only.\n// They're overridden at runtime below with the specific Visitor implementation for each type,\n// short-circuiting the usual Visitor traversal and reducing intermediate lookups and calls.\n// This comment is here to remind you to not set breakpoints in these function bodies, or to inform\n// you why the breakpoints you have already set are not being triggered. Have a great day!\n//\n\nBaseVector.prototype.get = function baseVectorGet<T extends DataType>(this: BaseVector<T>, index: number): T['TValue'] | null {\n    return getVisitor.visit(this, index);\n};\n\nBaseVector.prototype.set = function baseVectorSet<T extends DataType>(this: BaseVector<T>, index: number, value: T['TValue'] | null): void {\n    return setVisitor.visit(this, index, value);\n};\n\nBaseVector.prototype.indexOf = function baseVectorIndexOf<T extends DataType>(this: BaseVector<T>, value: T['TValue'] | null, fromIndex?: number): number {\n    return indexOfVisitor.visit(this, value, fromIndex);\n};\n\nBaseVector.prototype.toArray = function baseVectorToArray<T extends DataType>(this: BaseVector<T>): T['TArray'] {\n    return toArrayVisitor.visit(this);\n};\n\nBaseVector.prototype.getByteWidth = function baseVectorGetByteWidth<T extends DataType>(this: BaseVector<T>): number {\n    return byteWidthVisitor.visit(this.type);\n};\n\nBaseVector.prototype[Symbol.iterator] = function baseVectorSymbolIterator<T extends DataType>(this: BaseVector<T>): IterableIterator<T['TValue'] | null> {\n    return iteratorVisitor.visit(this);\n};\n\n(BaseVector.prototype as any)._bindDataAccessors = bindBaseVectorDataAccessors;\n\n// Perf: bind and assign the operator Visitor methods to each of the Vector subclasses for each Type\n(Object.keys(Type) as any[])\n    .map((T: any) => Type[T] as any)\n    .filter((T: any): T is Type => typeof T === 'number')\n    .filter((typeId) => typeId !== Type.NONE)\n    .forEach((typeId) => {\n        const VectorCtor = getVectorConstructor.visit(typeId);\n        VectorCtor.prototype['get'] = fn.partial1(getVisitor.getVisitFn(typeId));\n        VectorCtor.prototype['set'] = fn.partial2(setVisitor.getVisitFn(typeId));\n        VectorCtor.prototype['indexOf'] = fn.partial2(indexOfVisitor.getVisitFn(typeId));\n        VectorCtor.prototype['toArray'] = fn.partial0(toArrayVisitor.getVisitFn(typeId));\n        VectorCtor.prototype['getByteWidth'] = partialType0(byteWidthVisitor.getVisitFn(typeId));\n        VectorCtor.prototype[Symbol.iterator] = fn.partial0(iteratorVisitor.getVisitFn(typeId));\n    });\n\n/** @ignore */\nfunction partialType0<T extends Vector>(visit: (node: T['type']) => any) {\n    return function(this: T) { return visit(this.type); };\n}\n\n/** @ignore */\nfunction wrapNullableGet<T extends DataType, V extends Vector<T>, F extends (i: number) => any>(fn: F): (...args: Parameters<F>) => ReturnType<F> {\n    return function(this: V, i: number) { return this.isValid(i) ? fn.call(this, i) : null; };\n}\n\n/** @ignore */\nfunction wrapNullableSet<T extends DataType, V extends BaseVector<T>, F extends (i: number, a: any) => void>(fn: F): (...args: Parameters<F>) => void {\n    return function(this: V, i: number, a: any) {\n        if (setBool(this.nullBitmap, this.offset + i, !(a === null || a === undefined))) {\n            fn.call(this, i, a);\n        }\n    };\n}\n\n/** @ignore */\nfunction bindBaseVectorDataAccessors<T extends DataType>(this: BaseVector<T>) {\n    const nullBitmap = this.nullBitmap;\n    if (nullBitmap && nullBitmap.byteLength > 0) {\n        this.get = wrapNullableGet(this.get);\n        this.set = wrapNullableSet(this.set);\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from './data';\nimport { Column } from './column';\nimport { Schema, Field } from './schema';\nimport { RecordBatch, _InternalEmptyPlaceholderRecordBatch } from './recordbatch';\nimport { DataFrame } from './compute/dataframe';\nimport { RecordBatchReader } from './ipc/reader';\nimport { DataType, RowLike, Struct } from './type';\nimport { selectColumnArgs, selectArgs } from './util/args';\nimport { Clonable, Sliceable, Applicative } from './vector';\nimport { isPromise, isIterable, isAsyncIterable } from './util/compat';\nimport { RecordBatchFileWriter, RecordBatchStreamWriter } from './ipc/writer';\nimport { distributeColumnsIntoRecordBatches, distributeVectorsIntoRecordBatches } from './util/recordbatch';\nimport { Vector, Chunked, StructVector, VectorBuilderOptions, VectorBuilderOptionsAsync } from './vector/index';\n\ntype VectorMap = { [key: string]: Vector };\ntype Fields<T extends { [key: string]: DataType }> = (keyof T)[] | Field<T[keyof T]>[];\ntype ChildData<T extends { [key: string]: DataType }> = Data<T[keyof T]>[] | Vector<T[keyof T]>[];\ntype Columns<T extends { [key: string]: DataType }> = Column<T[keyof T]>[] | Column<T[keyof T]>[][];\n\nexport interface Table<T extends { [key: string]: DataType } = any> {\n\n    get(index: number): Struct<T>['TValue'];\n    [Symbol.iterator](): IterableIterator<RowLike<T>>;\n\n    slice(begin?: number, end?: number): Table<T>;\n    concat(...others: Vector<Struct<T>>[]): Table<T>;\n    clone(chunks?: RecordBatch<T>[], offsets?: Uint32Array): Table<T>;\n\n    scan(next: import('./compute/dataframe').NextFunc, bind?: import('./compute/dataframe').BindFunc): void;\n    scanReverse(next: import('./compute/dataframe').NextFunc, bind?: import('./compute/dataframe').BindFunc): void;\n    countBy(name: import('./compute/predicate').Col | string): import('./compute/dataframe').CountByResult;\n    filter(predicate: import('./compute/predicate').Predicate): import('./compute/dataframe').FilteredDataFrame<T>;\n}\n\nexport class Table<T extends { [key: string]: DataType } = any>\n    extends Chunked<Struct<T>>\n    implements DataFrame<T>,\n               Clonable<Table<T>>,\n               Sliceable<Table<T>>,\n               Applicative<Struct<T>, Table<T>> {\n\n    /** @nocollapse */\n    public static empty<T extends { [key: string]: DataType } = {}>(schema = new Schema<T>([])) { return new Table<T>(schema, []); }\n\n    public static from(): Table<{}>;\n    public static from<T extends { [key: string]: DataType } = any>(source: RecordBatchReader<T>): Table<T>;\n    public static from<T extends { [key: string]: DataType } = any>(source: import('./ipc/reader').FromArg0): Table<T>;\n    public static from<T extends { [key: string]: DataType } = any>(source: import('./ipc/reader').FromArg2): Table<T>;\n    public static from<T extends { [key: string]: DataType } = any>(source: import('./ipc/reader').FromArg1): Promise<Table<T>>;\n    public static from<T extends { [key: string]: DataType } = any>(source: import('./ipc/reader').FromArg3): Promise<Table<T>>;\n    public static from<T extends { [key: string]: DataType } = any>(source: import('./ipc/reader').FromArg4): Promise<Table<T>>;\n    public static from<T extends { [key: string]: DataType } = any>(source: import('./ipc/reader').FromArg5): Promise<Table<T>>;\n    public static from<T extends { [key: string]: DataType } = any>(source: PromiseLike<RecordBatchReader<T>>): Promise<Table<T>>;\n    public static from<T extends { [key: string]: DataType } = any, TNull = any>(options: VectorBuilderOptions<Struct<T>, TNull>): Table<T>;\n    public static from<T extends { [key: string]: DataType } = any, TNull = any>(options: VectorBuilderOptionsAsync<Struct<T>, TNull>): Promise<Table<T>>;\n    /** @nocollapse */\n    public static from<T extends { [key: string]: DataType } = any, TNull = any>(input?: any) {\n\n        if (!input) { return Table.empty(); }\n\n        if (typeof input === 'object') {\n            let table = isIterable(input['values']) ? tableFromIterable<T, TNull>(input)\n                 : isAsyncIterable(input['values']) ? tableFromAsyncIterable<T, TNull>(input)\n                                                    : null;\n            if (table !== null) { return table; }\n        }\n\n        let reader = RecordBatchReader.from<T>(input) as RecordBatchReader<T> | Promise<RecordBatchReader<T>>;\n\n        if (isPromise<RecordBatchReader<T>>(reader)) {\n            return (async () => await Table.from(await reader))();\n        }\n        if (reader.isSync() && (reader = reader.open())) {\n            return !reader.schema ? Table.empty() : new Table<T>(reader.schema, [...reader]);\n        }\n        return (async (opening) => {\n            const reader = await opening;\n            const schema = reader.schema;\n            const batches: RecordBatch[] = [];\n            if (schema) {\n                for await (let batch of reader) {\n                    batches.push(batch);\n                }\n                return new Table<T>(schema, batches);\n            }\n            return Table.empty();\n        })(reader.open());\n    }\n\n    /** @nocollapse */\n    public static async fromAsync<T extends { [key: string]: DataType } = any>(source: import('./ipc/reader').FromArgs): Promise<Table<T>> {\n        return await Table.from<T>(source as any);\n    }\n\n    /** @nocollapse */\n    public static fromStruct<T extends { [key: string]: DataType } = any>(vector: Vector<Struct<T>>) {\n        return Table.new<T>(vector.data.childData as Data<T[keyof T]>[], vector.type.children);\n    }\n\n    /**\n     * @summary Create a new Table from a collection of Columns or Vectors,\n     * with an optional list of names or Fields.\n     *\n     *\n     * `Table.new` accepts an Object of\n     * Columns or Vectors, where the keys will be used as the field names\n     * for the Schema:\n     * ```ts\n     * const i32s = Int32Vector.from([1, 2, 3]);\n     * const f32s = Float32Vector.from([.1, .2, .3]);\n     * const table = Table.new({ i32: i32s, f32: f32s });\n     * assert(table.schema.fields[0].name === 'i32');\n     * ```\n     *\n     * It also accepts a a list of Vectors with an optional list of names or\n     * Fields for the resulting Schema. If the list is omitted or a name is\n     * missing, the numeric index of each Vector will be used as the name:\n     * ```ts\n     * const i32s = Int32Vector.from([1, 2, 3]);\n     * const f32s = Float32Vector.from([.1, .2, .3]);\n     * const table = Table.new([i32s, f32s], ['i32']);\n     * assert(table.schema.fields[0].name === 'i32');\n     * assert(table.schema.fields[1].name === '1');\n     * ```\n     *\n     * If the supplied arguments are Columns, `Table.new` will infer the Schema\n     * from the Columns:\n     * ```ts\n     * const i32s = Column.new('i32', Int32Vector.from([1, 2, 3]));\n     * const f32s = Column.new('f32', Float32Vector.from([.1, .2, .3]));\n     * const table = Table.new(i32s, f32s);\n     * assert(table.schema.fields[0].name === 'i32');\n     * assert(table.schema.fields[1].name === 'f32');\n     * ```\n     *\n     * If the supplied Vector or Column lengths are unequal, `Table.new` will\n     * extend the lengths of the shorter Columns, allocating additional bytes\n     * to represent the additional null slots. The memory required to allocate\n     * these additional bitmaps can be computed as:\n     * ```ts\n     * let additionalBytes = 0;\n     * for (let vec in shorter_vectors) {\n     *     additionalBytes += (((longestLength - vec.length) + 63) & ~63) >> 3;\n     * }\n     * ```\n     *\n     * For example, an additional null bitmap for one million null values would require\n     * 125,000 bytes (`((1e6 + 63) & ~63) >> 3`), or approx. `0.11MiB`\n     */\n    public static new<T extends { [key: string]: DataType } = any>(...columns: Columns<T>): Table<T>;\n    public static new<T extends VectorMap = any>(children: T): Table<{ [P in keyof T]: T[P]['type'] }>;\n    public static new<T extends { [key: string]: DataType } = any>(children: ChildData<T>, fields?: Fields<T>): Table<T>;\n    /** @nocollapse */\n    public static new(...cols: any[]) {\n        return new Table(...distributeColumnsIntoRecordBatches(selectColumnArgs(cols)));\n    }\n\n    constructor(batches: RecordBatch<T>[]);\n    constructor(...batches: RecordBatch<T>[]);\n    constructor(schema: Schema<T>, batches: RecordBatch<T>[]);\n    constructor(schema: Schema<T>, ...batches: RecordBatch<T>[]);\n    constructor(...args: any[]) {\n\n        let schema: Schema<T> = null!;\n\n        if (args[0] instanceof Schema) { schema = args.shift(); }\n\n        let chunks = selectArgs<RecordBatch<T>>(RecordBatch, args);\n\n        if (!schema && !(schema = chunks[0] && chunks[0].schema)) {\n            throw new TypeError('Table must be initialized with a Schema or at least one RecordBatch');\n        }\n\n        chunks[0] || (chunks[0] = new _InternalEmptyPlaceholderRecordBatch(schema));\n\n        super(new Struct(schema.fields), chunks);\n\n        this._schema = schema;\n        this._chunks = chunks;\n    }\n\n    protected _schema: Schema<T>;\n    // List of inner RecordBatches\n    protected _chunks: RecordBatch<T>[];\n    protected _children?: Column<T[keyof T]>[];\n\n    public get schema() { return this._schema; }\n    public get length() { return this._length; }\n    public get chunks() { return this._chunks; }\n    public get numCols() { return this._numChildren; }\n\n    public clone(chunks = this._chunks) {\n        return new Table<T>(this._schema, chunks);\n    }\n\n    public getColumn<R extends keyof T>(name: R): Column<T[R]> {\n        return this.getColumnAt(this.getColumnIndex(name)) as Column<T[R]>;\n    }\n    public getColumnAt<R extends DataType = any>(index: number): Column<R> | null {\n        return this.getChildAt(index);\n    }\n    public getColumnIndex<R extends keyof T>(name: R) {\n        return this._schema.fields.findIndex((f) => f.name === name);\n    }\n    public getChildAt<R extends DataType = any>(index: number): Column<R> | null {\n        if (index < 0 || index >= this.numChildren) { return null; }\n        let field: Field<R>, child: Column<R>;\n        const fields = (this._schema as Schema<any>).fields;\n        const columns = this._children || (this._children = []) as Column[];\n        if (child = columns[index]) { return child as Column<R>; }\n        if (field = fields[index]) {\n            const chunks = this._chunks\n                .map((chunk) => chunk.getChildAt<R>(index))\n                .filter((vec): vec is Vector<R> => vec != null);\n            if (chunks.length > 0) {\n                return (columns[index] = new Column<R>(field, chunks));\n            }\n        }\n        return null;\n    }\n\n    // @ts-ignore\n    public serialize(encoding = 'binary', stream = true) {\n        const Writer = !stream\n            ? RecordBatchFileWriter\n            : RecordBatchStreamWriter;\n        return Writer.writeAll(this).toUint8Array(true);\n    }\n    public count(): number {\n        return this._length;\n    }\n    public select<K extends keyof T = any>(...columnNames: K[]) {\n        const nameToIndex = this._schema.fields.reduce((m, f, i) => m.set(f.name as K, i), new Map<K, number>());\n        return this.selectAt(...columnNames.map((columnName) => nameToIndex.get(columnName)!).filter((x) => x > -1));\n    }\n    public selectAt<K extends T[keyof T] = any>(...columnIndices: number[]) {\n        const schema = this._schema.selectAt<K>(...columnIndices);\n        return new Table(schema, this._chunks.map(({ length, data: { childData } }) => {\n            return new RecordBatch(schema, length, columnIndices.map((i) => childData[i]).filter(Boolean));\n        }));\n    }\n    public assign<R extends { [key: string]: DataType } = any>(other: Table<R>) {\n\n        const fields = this._schema.fields;\n        const [indices, oldToNew] = other.schema.fields.reduce((memo, f2, newIdx) => {\n            const [indices, oldToNew] = memo;\n            const i = fields.findIndex((f) => f.name === f2.name);\n            ~i ? (oldToNew[i] = newIdx) : indices.push(newIdx);\n            return memo;\n        }, [[], []] as number[][]);\n\n        const schema = this._schema.assign(other.schema);\n        const columns = [\n            ...fields.map((_f, i, _fs, j = oldToNew[i]) =>\n                (j === undefined ? this.getColumnAt(i) : other.getColumnAt(j))!),\n            ...indices.map((i) => other.getColumnAt(i)!)\n        ].filter(Boolean) as Column<(T & R)[keyof T | keyof R]>[];\n\n        return new Table<T & R>(...distributeVectorsIntoRecordBatches<any>(schema, columns));\n    }\n}\n\nfunction tableFromIterable<T extends { [key: string]: DataType } = any, TNull = any>(input: VectorBuilderOptions<Struct<T>, TNull>) {\n    const { type } = input;\n    if (type instanceof Struct) {\n        return Table.fromStruct(StructVector.from(input as VectorBuilderOptions<Struct<T>, TNull>));\n    }\n    return null;\n}\n\nfunction tableFromAsyncIterable<T extends { [key: string]: DataType } = any, TNull = any>(input: VectorBuilderOptionsAsync<Struct<T>, TNull>) {\n    const { type } = input;\n    if (type instanceof Struct) {\n        return StructVector.from(input as VectorBuilderOptionsAsync<Struct<T>, TNull>).then((vector) => Table.fromStruct(vector));\n    }\n    return null;\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from './data';\nimport { Table } from './table';\nimport { Vector } from './vector';\nimport { Visitor } from './visitor';\nimport { Schema, Field } from './schema';\nimport { isIterable } from './util/compat';\nimport { Chunked } from './vector/chunked';\nimport { selectFieldArgs } from './util/args';\nimport { DataType, Struct, Dictionary } from './type';\nimport { ensureSameLengthData } from './util/recordbatch';\nimport { Clonable, Sliceable, Applicative } from './vector';\nimport { StructVector, VectorBuilderOptions, VectorBuilderOptionsAsync } from './vector/index';\n\ntype VectorMap = { [key: string]: Vector };\ntype Fields<T extends { [key: string]: DataType }> = (keyof T)[] | Field<T[keyof T]>[];\ntype ChildData<T extends { [key: string]: DataType }> = (Data<T[keyof T]> | Vector<T[keyof T]>)[];\n\nexport interface RecordBatch<T extends { [key: string]: DataType } = any> {\n    concat(...others: Vector<Struct<T>>[]): Table<T>;\n    slice(begin?: number, end?: number): RecordBatch<T>;\n    clone(data: Data<Struct<T>>, children?: Vector[]): RecordBatch<T>;\n}\n\nexport class RecordBatch<T extends { [key: string]: DataType } = any>\n    extends StructVector<T>\n    implements Clonable<RecordBatch<T>>,\n               Sliceable<RecordBatch<T>>,\n               Applicative<Struct<T>, Table<T>> {\n\n    public static from<T extends { [key: string]: DataType } = any, TNull = any>(options: VectorBuilderOptions<Struct<T>, TNull>): Table<T>;\n    public static from<T extends { [key: string]: DataType } = any, TNull = any>(options: VectorBuilderOptionsAsync<Struct<T>, TNull>): Promise<Table<T>>;\n    /** @nocollapse */\n    public static from<T extends { [key: string]: DataType } = any, TNull = any>(options: VectorBuilderOptions<Struct<T>, TNull> | VectorBuilderOptionsAsync<Struct<T>, TNull>) {\n        if (isIterable<(Struct<T>)['TValue'] | TNull>(options['values'])) {\n            return Table.from(options as VectorBuilderOptions<Struct<T>, TNull>);\n        }\n        return Table.from(options as VectorBuilderOptionsAsync<Struct<T>, TNull>);\n    }\n\n    public static new<T extends VectorMap = any>(children: T): RecordBatch<{ [P in keyof T]: T[P]['type'] }>;\n    public static new<T extends { [key: string]: DataType } = any>(children: ChildData<T>, fields?: Fields<T>): RecordBatch<T>;\n    /** @nocollapse */\n    public static new<T extends { [key: string]: DataType } = any>(...args: any[]) {\n        const [fs, xs] = selectFieldArgs<T>(args);\n        const vs = xs.filter((x): x is Vector<T[keyof T]> => x instanceof Vector);\n        return new RecordBatch(...ensureSameLengthData(new Schema<T>(fs), vs.map((x) => x.data)));\n    }\n\n    protected _schema: Schema;\n    protected _dictionaries?: Map<number, Vector>;\n\n    constructor(schema: Schema<T>, length: number, children: (Data | Vector)[]);\n    constructor(schema: Schema<T>, data: Data<Struct<T>>, children?: Vector[]);\n    constructor(...args: any[]) {\n        let data: Data<Struct<T>>;\n        let schema = args[0] as Schema<T>;\n        let children: Vector[] | undefined;\n        if (args[1] instanceof Data) {\n            [, data, children] = (args as [any, Data<Struct<T>>, Vector<T[keyof T]>[]?]);\n        } else {\n            const fields = schema.fields as Field<T[keyof T]>[];\n            const [, length, childData] = args as [any, number, Data<T[keyof T]>[]];\n            data = Data.Struct(new Struct<T>(fields), 0, length, 0, null, childData);\n        }\n        super(data, children);\n        this._schema = schema;\n    }\n\n    public clone(data: Data<Struct<T>>, children = this._children) {\n        return new RecordBatch<T>(this._schema, data, children);\n    }\n\n    public concat(...others: Vector<Struct<T>>[]): Table<T> {\n        const schema = this._schema, chunks = Chunked.flatten(this, ...others);\n        return new Table(schema, chunks.map(({ data }) => new RecordBatch(schema, data)));\n    }\n\n    public get schema() { return this._schema; }\n    public get numCols() { return this._schema.fields.length; }\n    public get dictionaries() {\n        return this._dictionaries || (this._dictionaries = DictionaryCollector.collect(this));\n    }\n\n    public select<K extends keyof T = any>(...columnNames: K[]) {\n        const nameToIndex = this._schema.fields.reduce((m, f, i) => m.set(f.name as K, i), new Map<K, number>());\n        return this.selectAt(...columnNames.map((columnName) => nameToIndex.get(columnName)!).filter((x) => x > -1));\n    }\n    public selectAt<K extends T[keyof T] = any>(...columnIndices: number[]) {\n        const schema = this._schema.selectAt(...columnIndices);\n        const childData = columnIndices.map((i) => this.data.childData[i]).filter(Boolean);\n        return new RecordBatch<{ [key: string]: K }>(schema, this.length, childData);\n    }\n}\n\n/**\n * An internal class used by the `RecordBatchReader` and `RecordBatchWriter`\n * implementations to differentiate between a stream with valid zero-length\n * RecordBatches, and a stream with a Schema message, but no RecordBatches.\n * @see https://github.com/apache/arrow/pull/4373\n * @ignore\n * @private\n */\n/* tslint:disable:class-name */\nexport class _InternalEmptyPlaceholderRecordBatch<T extends { [key: string]: DataType } = any> extends RecordBatch<T> {\n    constructor(schema: Schema<T>) {\n        super(schema, 0, schema.fields.map((f) => Data.new(f.type, 0, 0, 0)));\n    }\n}\n\n/** @ignore */\nclass DictionaryCollector extends Visitor {\n    public dictionaries = new Map<number, Vector>();\n    public static collect<T extends RecordBatch>(batch: T) {\n        return new DictionaryCollector().visit(\n            batch.data, new Struct(batch.schema.fields)\n        ).dictionaries;\n    }\n    public visit(data: Data, type: DataType) {\n        if (DataType.isDictionary(type)) {\n            return this.visitDictionary(data, type);\n        } else {\n            data.childData.forEach((child, i) =>\n                this.visit(child, type.children[i].type));\n        }\n        return this;\n    }\n    public visitDictionary(data: Data, type: Dictionary) {\n        const dictionary = data.dictionary;\n        if (dictionary && dictionary.length > 0) {\n            this.dictionaries.set(type.id, dictionary);\n        }\n        return this;\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from '../vector';\nimport { DataType } from '../type';\nimport { MessageHeader } from '../enum';\nimport { Footer } from './metadata/file';\nimport { Schema, Field } from '../schema';\nimport streamAdapters from '../io/adapters';\nimport { Message } from './metadata/message';\nimport * as metadata from './metadata/message';\nimport { ArrayBufferViewInput } from '../util/buffer';\nimport { ByteStream, AsyncByteStream } from '../io/stream';\nimport { RandomAccessFile, AsyncRandomAccessFile } from '../io/file';\nimport { VectorLoader, JSONVectorLoader } from '../visitor/vectorloader';\nimport { RecordBatch, _InternalEmptyPlaceholderRecordBatch } from '../recordbatch';\nimport {\n    FileHandle,\n    ArrowJSONLike,\n    ITERATOR_DONE,\n    ReadableInterop,\n} from '../io/interfaces';\nimport {\n    MessageReader, AsyncMessageReader, JSONMessageReader,\n    checkForMagicArrowString, magicLength, magicAndPadding, magicX2AndPadding\n} from './message';\nimport {\n    isPromise,\n    isIterable, isAsyncIterable,\n    isIteratorResult, isArrowJSON,\n    isFileHandle, isFetchResponse,\n    isReadableDOMStream, isReadableNodeStream\n} from '../util/compat';\n\n/** @ignore */ export type FromArg0 = ArrowJSONLike;\n/** @ignore */ export type FromArg1 = PromiseLike<ArrowJSONLike>;\n/** @ignore */ export type FromArg2 = Iterable<ArrayBufferViewInput> | ArrayBufferViewInput;\n/** @ignore */ export type FromArg3 = PromiseLike<Iterable<ArrayBufferViewInput> | ArrayBufferViewInput>;\n/** @ignore */ export type FromArg4 = Response | NodeJS.ReadableStream | ReadableStream<ArrayBufferViewInput> | AsyncIterable<ArrayBufferViewInput>;\n/** @ignore */ export type FromArg5 = FileHandle | PromiseLike<FileHandle> | PromiseLike<FromArg4>;\n/** @ignore */ export type FromArgs = FromArg0 | FromArg1 | FromArg2 | FromArg3 | FromArg4 | FromArg5;\n\n/** @ignore */ type OpenOptions = { autoDestroy?: boolean; };\n/** @ignore */ type RecordBatchReaders<T extends { [key: string]: DataType } = any> = RecordBatchFileReader<T> | RecordBatchStreamReader<T>;\n/** @ignore */ type AsyncRecordBatchReaders<T extends { [key: string]: DataType } = any> = AsyncRecordBatchFileReader<T> | AsyncRecordBatchStreamReader<T>;\n/** @ignore */ type RecordBatchFileReaders<T extends { [key: string]: DataType } = any> = RecordBatchFileReader<T> | AsyncRecordBatchFileReader<T>;\n/** @ignore */ type RecordBatchStreamReaders<T extends { [key: string]: DataType } = any> = RecordBatchStreamReader<T> | AsyncRecordBatchStreamReader<T>;\n\nexport class RecordBatchReader<T extends { [key: string]: DataType } = any> extends ReadableInterop<RecordBatch<T>> {\n\n    protected _impl: RecordBatchReaderImpls<T>;\n    protected constructor(impl: RecordBatchReaderImpls<T>) {\n        super();\n        this._impl = impl;\n    }\n\n    public get closed() { return this._impl.closed; }\n    public get schema() { return this._impl.schema; }\n    public get autoDestroy() { return this._impl.autoDestroy; }\n    public get dictionaries() { return this._impl.dictionaries; }\n    public get numDictionaries() { return this._impl.numDictionaries; }\n    public get numRecordBatches() { return this._impl.numRecordBatches; }\n    public get footer() { return this._impl.isFile() ? this._impl.footer : null; }\n\n    public isSync(): this is RecordBatchReaders<T> { return this._impl.isSync(); }\n    public isAsync(): this is AsyncRecordBatchReaders<T> { return this._impl.isAsync(); }\n    public isFile(): this is RecordBatchFileReaders<T> { return this._impl.isFile(); }\n    public isStream(): this is RecordBatchStreamReaders<T> { return this._impl.isStream(); }\n\n    public next() {\n        return this._impl.next();\n    }\n    public throw(value?: any) {\n        return this._impl.throw(value);\n    }\n    public return(value?: any) {\n        return this._impl.return(value);\n    }\n    public cancel() {\n        return this._impl.cancel();\n    }\n    public reset(schema?: Schema<T> | null): this {\n        this._impl.reset(schema);\n        this._DOMStream = undefined;\n        this._nodeStream = undefined;\n        return this;\n    }\n    public open(options?: OpenOptions) {\n        const opening = this._impl.open(options);\n        return isPromise(opening) ? opening.then(() => this) : this;\n    }\n    public readRecordBatch(index: number): RecordBatch<T> | null | Promise<RecordBatch<T> | null> {\n        return this._impl.isFile() ? this._impl.readRecordBatch(index) : null;\n    }\n    public [Symbol.iterator](): IterableIterator<RecordBatch<T>> {\n        return (<IterableIterator<RecordBatch<T>>> this._impl)[Symbol.iterator]();\n    }\n    public [Symbol.asyncIterator](): AsyncIterableIterator<RecordBatch<T>> {\n        return (<AsyncIterableIterator<RecordBatch<T>>> this._impl)[Symbol.asyncIterator]();\n    }\n    public toDOMStream() {\n        return streamAdapters.toDOMStream<RecordBatch<T>>(\n            (this.isSync()\n                ? { [Symbol.iterator]: () => this } as Iterable<RecordBatch<T>>\n                : { [Symbol.asyncIterator]: () => this } as AsyncIterable<RecordBatch<T>>));\n    }\n    public toNodeStream() {\n        return streamAdapters.toNodeStream<RecordBatch<T>>(\n            (this.isSync()\n                ? { [Symbol.iterator]: () => this } as Iterable<RecordBatch<T>>\n                : { [Symbol.asyncIterator]: () => this } as AsyncIterable<RecordBatch<T>>),\n            { objectMode: true });\n    }\n\n    /** @nocollapse */\n    // @ts-ignore\n    public static throughNode(options?: import('stream').DuplexOptions & { autoDestroy: boolean }): import('stream').Duplex {\n        throw new Error(`\"throughNode\" not available in this environment`);\n    }\n    /** @nocollapse */\n    public static throughDOM<T extends { [key: string]: DataType }>(\n        // @ts-ignore\n        writableStrategy?: ByteLengthQueuingStrategy,\n        // @ts-ignore\n        readableStrategy?: { autoDestroy: boolean }\n    ): { writable: WritableStream<Uint8Array>, readable: ReadableStream<RecordBatch<T>> } {\n        throw new Error(`\"throughDOM\" not available in this environment`);\n    }\n\n    public static from<T extends RecordBatchReader>(source: T): T;\n    public static from<T extends { [key: string]: DataType } = any>(source: FromArg0): RecordBatchStreamReader<T>;\n    public static from<T extends { [key: string]: DataType } = any>(source: FromArg1): Promise<RecordBatchStreamReader<T>>;\n    public static from<T extends { [key: string]: DataType } = any>(source: FromArg2): RecordBatchFileReader<T> | RecordBatchStreamReader<T>;\n    public static from<T extends { [key: string]: DataType } = any>(source: FromArg3): Promise<RecordBatchFileReader<T> | RecordBatchStreamReader<T>>;\n    public static from<T extends { [key: string]: DataType } = any>(source: FromArg4): Promise<RecordBatchFileReader<T> | AsyncRecordBatchReaders<T>>;\n    public static from<T extends { [key: string]: DataType } = any>(source: FromArg5): Promise<AsyncRecordBatchFileReader<T> | AsyncRecordBatchStreamReader<T>>;\n    /** @nocollapse */\n    public static from<T extends { [key: string]: DataType } = any>(source: any) {\n        if (source instanceof RecordBatchReader) {\n            return source;\n        } else if (isArrowJSON(source)) {\n            return fromArrowJSON<T>(source);\n        } else if (isFileHandle(source)) {\n            return fromFileHandle<T>(source);\n        } else if (isPromise<any>(source)) {\n            return (async () => await RecordBatchReader.from<any>(await source))();\n        } else if (isFetchResponse(source) || isReadableDOMStream(source) || isReadableNodeStream(source) || isAsyncIterable(source)) {\n            return fromAsyncByteStream<T>(new AsyncByteStream(source));\n        }\n        return fromByteStream<T>(new ByteStream(source));\n    }\n\n    public static readAll<T extends RecordBatchReader>(source: T): T extends RecordBatchReaders ? IterableIterator<T> : AsyncIterableIterator<T>;\n    public static readAll<T extends { [key: string]: DataType } = any>(source: FromArg0): IterableIterator<RecordBatchStreamReader<T>>;\n    public static readAll<T extends { [key: string]: DataType } = any>(source: FromArg1): AsyncIterableIterator<RecordBatchStreamReader<T>>;\n    public static readAll<T extends { [key: string]: DataType } = any>(source: FromArg2): IterableIterator<RecordBatchFileReader<T> | RecordBatchStreamReader<T>>;\n    public static readAll<T extends { [key: string]: DataType } = any>(source: FromArg3): AsyncIterableIterator<RecordBatchFileReader<T> | RecordBatchStreamReader<T>>;\n    public static readAll<T extends { [key: string]: DataType } = any>(source: FromArg4): AsyncIterableIterator<RecordBatchFileReader<T> | AsyncRecordBatchReaders<T>>;\n    public static readAll<T extends { [key: string]: DataType } = any>(source: FromArg5): AsyncIterableIterator<AsyncRecordBatchFileReader<T> | AsyncRecordBatchStreamReader<T>>;\n    /** @nocollapse */\n    public static readAll<T extends { [key: string]: DataType } = any>(source: any) {\n        if (source instanceof RecordBatchReader) {\n            return source.isSync() ? readAllSync(source) : readAllAsync(source as AsyncRecordBatchReaders<T>);\n        } else if (isArrowJSON(source) || ArrayBuffer.isView(source) || isIterable<ArrayBufferViewInput>(source) || isIteratorResult(source)) {\n            return readAllSync<T>(source) as IterableIterator<RecordBatchReaders<T>>;\n        }\n        return readAllAsync<T>(source) as AsyncIterableIterator<RecordBatchReaders<T> | AsyncRecordBatchReaders<T>>;\n    }\n}\n\n//\n// Since TS is a structural type system, we define the following subclass stubs\n// so that concrete types exist to associate with with the interfaces below.\n//\n// The implementation for each RecordBatchReader is hidden away in the set of\n// `RecordBatchReaderImpl` classes in the second half of this file. This allows\n// us to export a single RecordBatchReader class, and swap out the impl based\n// on the io primitives or underlying arrow (JSON, file, or stream) at runtime.\n//\n// Async/await makes our job a bit harder, since it forces everything to be\n// either fully sync or fully async. This is why the logic for the reader impls\n// has been duplicated into both sync and async variants. Since the RBR\n// delegates to its impl, an RBR with an AsyncRecordBatchFileReaderImpl for\n// example will return async/await-friendly Promises, but one with a (sync)\n// RecordBatchStreamReaderImpl will always return values. Nothing should be\n// different about their logic, aside from the async handling. This is also why\n// this code looks highly structured, as it should be nearly identical and easy\n// to follow.\n//\n\n/** @ignore */\nexport class RecordBatchStreamReader<T extends { [key: string]: DataType } = any> extends RecordBatchReader<T> {\n    constructor(protected _impl: RecordBatchStreamReaderImpl<T>) { super (_impl); }\n    public [Symbol.iterator]() { return (this._impl as IterableIterator<RecordBatch<T>>)[Symbol.iterator](); }\n    public async *[Symbol.asyncIterator](): AsyncIterableIterator<RecordBatch<T>> { yield* this[Symbol.iterator](); }\n}\n/** @ignore */\nexport class AsyncRecordBatchStreamReader<T extends { [key: string]: DataType } = any> extends RecordBatchReader<T> {\n    constructor(protected _impl: AsyncRecordBatchStreamReaderImpl<T>) { super (_impl); }\n    public [Symbol.iterator](): IterableIterator<RecordBatch<T>> { throw new Error(`AsyncRecordBatchStreamReader is not Iterable`); }\n    public [Symbol.asyncIterator]() { return (this._impl as AsyncIterableIterator<RecordBatch<T>>)[Symbol.asyncIterator](); }\n}\n/** @ignore */\nexport class RecordBatchFileReader<T extends { [key: string]: DataType } = any> extends RecordBatchStreamReader<T> {\n    constructor(protected _impl: RecordBatchFileReaderImpl<T>) { super (_impl); }\n}\n/** @ignore */\nexport class AsyncRecordBatchFileReader<T extends { [key: string]: DataType } = any> extends AsyncRecordBatchStreamReader<T> {\n    constructor(protected _impl: AsyncRecordBatchFileReaderImpl<T>) { super (_impl); }\n}\n\n//\n// Now override the return types for each sync/async RecordBatchReader variant\n//\n\n/** @ignore */\nexport interface RecordBatchStreamReader<T extends { [key: string]: DataType } = any> extends RecordBatchReader<T> {\n    open(options?: OpenOptions | undefined): this;\n    cancel(): void;\n    throw(value?: any): IteratorResult<any>;\n    return(value?: any): IteratorResult<any>;\n    next(value?: any): IteratorResult<RecordBatch<T>>;\n}\n\n/** @ignore */\nexport interface AsyncRecordBatchStreamReader<T extends { [key: string]: DataType } = any> extends RecordBatchReader<T> {\n    open(options?: OpenOptions | undefined): Promise<this>;\n    cancel(): Promise<void>;\n    throw(value?: any): Promise<IteratorResult<any>>;\n    return(value?: any): Promise<IteratorResult<any>>;\n    next(value?: any): Promise<IteratorResult<RecordBatch<T>>>;\n}\n\n/** @ignore */\nexport interface RecordBatchFileReader<T extends { [key: string]: DataType } = any> extends RecordBatchStreamReader<T> {\n    footer: Footer;\n    readRecordBatch(index: number): RecordBatch<T> | null;\n}\n\n/** @ignore */\nexport interface AsyncRecordBatchFileReader<T extends { [key: string]: DataType } = any> extends AsyncRecordBatchStreamReader<T> {\n    footer: Footer;\n    readRecordBatch(index: number): Promise<RecordBatch<T> | null>;\n}\n\n/** @ignore */\ntype RecordBatchReaderImpls<T extends { [key: string]: DataType } = any> =\n     RecordBatchJSONReaderImpl<T> |\n     RecordBatchFileReaderImpl<T> |\n     RecordBatchStreamReaderImpl<T> |\n     AsyncRecordBatchFileReaderImpl<T> |\n     AsyncRecordBatchStreamReaderImpl<T>;\n\n/** @ignore */\ninterface RecordBatchReaderImpl<T extends { [key: string]: DataType } = any> {\n\n    closed: boolean;\n    schema: Schema<T>;\n    autoDestroy: boolean;\n    dictionaries: Map<number, Vector>;\n\n    isFile(): this is RecordBatchFileReaders<T>;\n    isStream(): this is RecordBatchStreamReaders<T>;\n    isSync(): this is RecordBatchReaders<T>;\n    isAsync(): this is AsyncRecordBatchReaders<T>;\n\n    reset(schema?: Schema<T> | null): this;\n}\n\n/** @ignore */\ninterface RecordBatchStreamReaderImpl<T extends { [key: string]: DataType } = any> extends RecordBatchReaderImpl<T> {\n\n    open(options?: OpenOptions): this;\n    cancel(): void;\n\n    throw(value?: any): IteratorResult<any>;\n    return(value?: any): IteratorResult<any>;\n    next(value?: any): IteratorResult<RecordBatch<T>>;\n\n    [Symbol.iterator](): IterableIterator<RecordBatch<T>>;\n}\n\n/** @ignore */\ninterface AsyncRecordBatchStreamReaderImpl<T extends { [key: string]: DataType } = any> extends RecordBatchReaderImpl<T> {\n\n    open(options?: OpenOptions): Promise<this>;\n    cancel(): Promise<void>;\n\n    throw(value?: any): Promise<IteratorResult<any>>;\n    return(value?: any): Promise<IteratorResult<any>>;\n    next(value?: any): Promise<IteratorResult<RecordBatch<T>>>;\n\n    [Symbol.asyncIterator](): AsyncIterableIterator<RecordBatch<T>>;\n}\n\n/** @ignore */\ninterface RecordBatchFileReaderImpl<T extends { [key: string]: DataType } = any> extends RecordBatchStreamReaderImpl<T> {\n    readRecordBatch(index: number): RecordBatch<T> | null;\n}\n\n/** @ignore */\ninterface AsyncRecordBatchFileReaderImpl<T extends { [key: string]: DataType } = any> extends AsyncRecordBatchStreamReaderImpl<T> {\n    readRecordBatch(index: number): Promise<RecordBatch<T> | null>;\n}\n\n/** @ignore */\nabstract class RecordBatchReaderImpl<T extends { [key: string]: DataType } = any> implements RecordBatchReaderImpl<T> {\n\n    // @ts-ignore\n    public schema: Schema;\n    public closed = false;\n    public autoDestroy = true;\n    public dictionaries: Map<number, Vector>;\n\n    protected _dictionaryIndex = 0;\n    protected _recordBatchIndex = 0;\n    public get numDictionaries() { return this._dictionaryIndex; }\n    public get numRecordBatches() { return this._recordBatchIndex; }\n\n    constructor(dictionaries = new Map<number, Vector>()) {\n        this.dictionaries = dictionaries;\n    }\n\n    public isSync(): this is RecordBatchReaders<T> { return false; }\n    public isAsync(): this is AsyncRecordBatchReaders<T> { return false; }\n    public isFile(): this is RecordBatchFileReaders<T> { return false; }\n    public isStream(): this is RecordBatchStreamReaders<T> { return false; }\n\n    public reset(schema?: Schema<T> | null) {\n        this._dictionaryIndex = 0;\n        this._recordBatchIndex = 0;\n        this.schema = <any> schema;\n        this.dictionaries = new Map();\n        return this;\n    }\n\n    protected _loadRecordBatch(header: metadata.RecordBatch, body: any) {\n        return new RecordBatch<T>(this.schema, header.length, this._loadVectors(header, body, this.schema.fields));\n    }\n    protected _loadDictionaryBatch(header: metadata.DictionaryBatch, body: any) {\n        const { id, isDelta, data } = header;\n        const { dictionaries, schema } = this;\n        const dictionary = dictionaries.get(id);\n        if (isDelta || !dictionary) {\n            const type = schema.dictionaries.get(id)!;\n            return (dictionary && isDelta ? dictionary.concat(\n                Vector.new(this._loadVectors(data, body, [type])[0])) :\n                Vector.new(this._loadVectors(data, body, [type])[0])) as Vector;\n        }\n        return dictionary;\n    }\n    protected _loadVectors(header: metadata.RecordBatch, body: any, types: (Field | DataType)[]) {\n        return new VectorLoader(body, header.nodes, header.buffers, this.dictionaries).visitMany(types);\n    }\n}\n\n/** @ignore */\nclass RecordBatchStreamReaderImpl<T extends { [key: string]: DataType } = any> extends RecordBatchReaderImpl<T> implements IterableIterator<RecordBatch<T>> {\n\n    protected _reader: MessageReader;\n    protected _handle: ByteStream | ArrowJSONLike;\n\n    constructor(source: ByteStream | ArrowJSONLike, dictionaries?: Map<number, Vector>) {\n        super(dictionaries);\n        this._reader = !isArrowJSON(source)\n            ? new MessageReader(this._handle = source)\n            : new JSONMessageReader(this._handle = source);\n    }\n\n    public isSync(): this is RecordBatchReaders<T> { return true; }\n    public isStream(): this is RecordBatchStreamReaders<T> { return true; }\n    public [Symbol.iterator](): IterableIterator<RecordBatch<T>> {\n        return this as IterableIterator<RecordBatch<T>>;\n    }\n    public cancel() {\n        if (!this.closed && (this.closed = true)) {\n            this.reset()._reader.return();\n            this._reader = <any> null;\n            this.dictionaries = <any> null;\n        }\n    }\n    public open(options?: OpenOptions) {\n        if (!this.closed) {\n            this.autoDestroy = shouldAutoDestroy(this, options);\n            if (!(this.schema || (this.schema = this._reader.readSchema()!))) {\n                this.cancel();\n            }\n        }\n        return this;\n    }\n    public throw(value?: any): IteratorResult<any> {\n        if (!this.closed && this.autoDestroy && (this.closed = true)) {\n            return this.reset()._reader.throw(value);\n        }\n        return ITERATOR_DONE;\n    }\n    public return(value?: any): IteratorResult<any> {\n        if (!this.closed && this.autoDestroy && (this.closed = true)) {\n            return this.reset()._reader.return(value);\n        }\n        return ITERATOR_DONE;\n    }\n    public next(): IteratorResult<RecordBatch<T>> {\n        if (this.closed) { return ITERATOR_DONE; }\n        let message: Message | null, { _reader: reader } = this;\n        while (message = this._readNextMessageAndValidate()) {\n            if (message.isSchema()) {\n                this.reset(message.header());\n            } else if (message.isRecordBatch()) {\n                this._recordBatchIndex++;\n                const header = message.header();\n                const buffer = reader.readMessageBody(message.bodyLength);\n                const recordBatch = this._loadRecordBatch(header, buffer);\n                return { done: false, value: recordBatch };\n            } else if (message.isDictionaryBatch()) {\n                this._dictionaryIndex++;\n                const header = message.header();\n                const buffer = reader.readMessageBody(message.bodyLength);\n                const vector = this._loadDictionaryBatch(header, buffer);\n                this.dictionaries.set(header.id, vector);\n            }\n        }\n        if (this.schema && this._recordBatchIndex === 0) {\n            this._recordBatchIndex++;\n            return { done: false, value: new _InternalEmptyPlaceholderRecordBatch<T>(this.schema) };\n        }\n        return this.return();\n    }\n    protected _readNextMessageAndValidate<T extends MessageHeader>(type?: T | null) {\n        return this._reader.readMessage<T>(type);\n    }\n}\n\n/** @ignore */\nclass AsyncRecordBatchStreamReaderImpl<T extends { [key: string]: DataType } = any> extends RecordBatchReaderImpl<T> implements AsyncIterableIterator<RecordBatch<T>> {\n\n    protected _handle: AsyncByteStream;\n    protected _reader: AsyncMessageReader;\n\n    constructor(source: AsyncByteStream, dictionaries?: Map<number, Vector>) {\n        super(dictionaries);\n        this._reader = new AsyncMessageReader(this._handle = source);\n    }\n    public isAsync(): this is AsyncRecordBatchReaders<T> { return true; }\n    public isStream(): this is RecordBatchStreamReaders<T> { return true; }\n    public [Symbol.asyncIterator](): AsyncIterableIterator<RecordBatch<T>> {\n        return this as AsyncIterableIterator<RecordBatch<T>>;\n    }\n    public async cancel() {\n        if (!this.closed && (this.closed = true)) {\n            await this.reset()._reader.return();\n            this._reader = <any> null;\n            this.dictionaries = <any> null;\n        }\n    }\n    public async open(options?: OpenOptions) {\n        if (!this.closed) {\n            this.autoDestroy = shouldAutoDestroy(this, options);\n            if (!(this.schema || (this.schema = (await this._reader.readSchema())!))) {\n                await this.cancel();\n            }\n        }\n        return this;\n    }\n    public async throw(value?: any): Promise<IteratorResult<any>> {\n        if (!this.closed && this.autoDestroy && (this.closed = true)) {\n            return await this.reset()._reader.throw(value);\n        }\n        return ITERATOR_DONE;\n    }\n    public async return(value?: any): Promise<IteratorResult<any>> {\n        if (!this.closed && this.autoDestroy && (this.closed = true)) {\n            return await this.reset()._reader.return(value);\n        }\n        return ITERATOR_DONE;\n    }\n    public async next() {\n        if (this.closed) { return ITERATOR_DONE; }\n        let message: Message | null, { _reader: reader } = this;\n        while (message = await this._readNextMessageAndValidate()) {\n            if (message.isSchema()) {\n                await this.reset(message.header());\n            } else if (message.isRecordBatch()) {\n                this._recordBatchIndex++;\n                const header = message.header();\n                const buffer = await reader.readMessageBody(message.bodyLength);\n                const recordBatch = this._loadRecordBatch(header, buffer);\n                return { done: false, value: recordBatch };\n            } else if (message.isDictionaryBatch()) {\n                this._dictionaryIndex++;\n                const header = message.header();\n                const buffer = await reader.readMessageBody(message.bodyLength);\n                const vector = this._loadDictionaryBatch(header, buffer);\n                this.dictionaries.set(header.id, vector);\n            }\n        }\n        if (this.schema && this._recordBatchIndex === 0) {\n            this._recordBatchIndex++;\n            return { done: false, value: new _InternalEmptyPlaceholderRecordBatch<T>(this.schema) };\n        }\n        return await this.return();\n    }\n    protected async _readNextMessageAndValidate<T extends MessageHeader>(type?: T | null) {\n        return await this._reader.readMessage<T>(type);\n    }\n}\n\n/** @ignore */\nclass RecordBatchFileReaderImpl<T extends { [key: string]: DataType } = any> extends RecordBatchStreamReaderImpl<T> {\n\n    // @ts-ignore\n    protected _footer?: Footer;\n    // @ts-ignore\n    protected _handle: RandomAccessFile;\n    public get footer() { return this._footer!; }\n    public get numDictionaries() { return this._footer ? this._footer.numDictionaries : 0; }\n    public get numRecordBatches() { return this._footer ? this._footer.numRecordBatches : 0; }\n\n    constructor(source: RandomAccessFile | ArrayBufferViewInput, dictionaries?: Map<number, Vector>) {\n        super(source instanceof RandomAccessFile ? source : new RandomAccessFile(source), dictionaries);\n    }\n    public isSync(): this is RecordBatchReaders<T> { return true; }\n    public isFile(): this is RecordBatchFileReaders<T> { return true; }\n    public open(options?: OpenOptions) {\n        if (!this.closed && !this._footer) {\n            this.schema = (this._footer = this._readFooter()).schema;\n            for (const block of this._footer.dictionaryBatches()) {\n                block && this._readDictionaryBatch(this._dictionaryIndex++);\n            }\n        }\n        return super.open(options);\n    }\n    public readRecordBatch(index: number) {\n        if (this.closed) { return null; }\n        if (!this._footer) { this.open(); }\n        const block = this._footer && this._footer.getRecordBatch(index);\n        if (block && this._handle.seek(block.offset)) {\n            const message = this._reader.readMessage(MessageHeader.RecordBatch);\n            if (message && message.isRecordBatch()) {\n                const header = message.header();\n                const buffer = this._reader.readMessageBody(message.bodyLength);\n                const recordBatch = this._loadRecordBatch(header, buffer);\n                return recordBatch;\n            }\n        }\n        return null;\n    }\n    protected _readDictionaryBatch(index: number) {\n        const block = this._footer && this._footer.getDictionaryBatch(index);\n        if (block && this._handle.seek(block.offset)) {\n            const message = this._reader.readMessage(MessageHeader.DictionaryBatch);\n            if (message && message.isDictionaryBatch()) {\n                const header = message.header();\n                const buffer = this._reader.readMessageBody(message.bodyLength);\n                const vector = this._loadDictionaryBatch(header, buffer);\n                this.dictionaries.set(header.id, vector);\n            }\n        }\n    }\n    protected _readFooter() {\n        const { _handle } = this;\n        const offset = _handle.size - magicAndPadding;\n        const length = _handle.readInt32(offset);\n        const buffer = _handle.readAt(offset - length, length);\n        return Footer.decode(buffer);\n    }\n    protected _readNextMessageAndValidate<T extends MessageHeader>(type?: T | null): Message<T> | null {\n        if (!this._footer) { this.open(); }\n        if (this._footer && this._recordBatchIndex < this.numRecordBatches) {\n            const block = this._footer && this._footer.getRecordBatch(this._recordBatchIndex);\n            if (block && this._handle.seek(block.offset)) {\n                return this._reader.readMessage(type);\n            }\n        }\n        return null;\n    }\n}\n\n/** @ignore */\nclass AsyncRecordBatchFileReaderImpl<T extends { [key: string]: DataType } = any> extends AsyncRecordBatchStreamReaderImpl<T>\n    implements AsyncRecordBatchFileReaderImpl<T> {\n\n    protected _footer?: Footer;\n    // @ts-ignore\n    protected _handle: AsyncRandomAccessFile;\n    public get footer() { return this._footer!; }\n    public get numDictionaries() { return this._footer ? this._footer.numDictionaries : 0; }\n    public get numRecordBatches() { return this._footer ? this._footer.numRecordBatches : 0; }\n\n    constructor(source: FileHandle, byteLength?: number, dictionaries?: Map<number, Vector>);\n    constructor(source: FileHandle | AsyncRandomAccessFile, dictionaries?: Map<number, Vector>);\n    constructor(source: FileHandle | AsyncRandomAccessFile, ...rest: any[]) {\n        const byteLength = typeof rest[0] !== 'number' ? <number> rest.shift() : undefined;\n        const dictionaries = rest[0] instanceof Map ? <Map<number, Vector>> rest.shift() : undefined;\n        super(source instanceof AsyncRandomAccessFile ? source : new AsyncRandomAccessFile(source, byteLength), dictionaries);\n    }\n    public isFile(): this is RecordBatchFileReaders<T> { return true; }\n    public isAsync(): this is AsyncRecordBatchReaders<T> { return true; }\n    public async open(options?: OpenOptions) {\n        if (!this.closed && !this._footer) {\n            this.schema = (this._footer = await this._readFooter()).schema;\n            for (const block of this._footer.dictionaryBatches()) {\n                block && await this._readDictionaryBatch(this._dictionaryIndex++);\n            }\n        }\n        return await super.open(options);\n    }\n    public async readRecordBatch(index: number) {\n        if (this.closed) { return null; }\n        if (!this._footer) { await this.open(); }\n        const block = this._footer && this._footer.getRecordBatch(index);\n        if (block && (await this._handle.seek(block.offset))) {\n            const message = await this._reader.readMessage(MessageHeader.RecordBatch);\n            if (message && message.isRecordBatch()) {\n                const header = message.header();\n                const buffer = await this._reader.readMessageBody(message.bodyLength);\n                const recordBatch = this._loadRecordBatch(header, buffer);\n                return recordBatch;\n            }\n        }\n        return null;\n    }\n    protected async _readDictionaryBatch(index: number) {\n        const block = this._footer && this._footer.getDictionaryBatch(index);\n        if (block && (await this._handle.seek(block.offset))) {\n            const message = await this._reader.readMessage(MessageHeader.DictionaryBatch);\n            if (message && message.isDictionaryBatch()) {\n                const header = message.header();\n                const buffer = await this._reader.readMessageBody(message.bodyLength);\n                const vector = this._loadDictionaryBatch(header, buffer);\n                this.dictionaries.set(header.id, vector);\n            }\n        }\n    }\n    protected async _readFooter() {\n        const { _handle } = this;\n        _handle._pending && await _handle._pending;\n        const offset = _handle.size - magicAndPadding;\n        const length = await _handle.readInt32(offset);\n        const buffer = await _handle.readAt(offset - length, length);\n        return Footer.decode(buffer);\n    }\n    protected async _readNextMessageAndValidate<T extends MessageHeader>(type?: T | null): Promise<Message<T> | null> {\n        if (!this._footer) { await this.open(); }\n        if (this._footer && this._recordBatchIndex < this.numRecordBatches) {\n            const block = this._footer.getRecordBatch(this._recordBatchIndex);\n            if (block && await this._handle.seek(block.offset)) {\n                return await this._reader.readMessage(type);\n            }\n        }\n        return null;\n    }\n}\n\n/** @ignore */\nclass RecordBatchJSONReaderImpl<T extends { [key: string]: DataType } = any> extends RecordBatchStreamReaderImpl<T> {\n    constructor(source: ArrowJSONLike, dictionaries?: Map<number, Vector>) {\n        super(source, dictionaries);\n    }\n    protected _loadVectors(header: metadata.RecordBatch, body: any, types: (Field | DataType)[]) {\n        return new JSONVectorLoader(body, header.nodes, header.buffers, this.dictionaries).visitMany(types);\n    }\n}\n\n//\n// Define some helper functions and static implementations down here. There's\n// a bit of branching in the static methods that can lead to the same routines\n// being executed, so we've broken those out here for readability.\n//\n\n/** @ignore */\nfunction shouldAutoDestroy(self: { autoDestroy: boolean }, options?: OpenOptions) {\n    return options && (typeof options['autoDestroy'] === 'boolean') ? options['autoDestroy'] : self['autoDestroy'];\n}\n\n/** @ignore */\nfunction* readAllSync<T extends { [key: string]: DataType } = any>(source: RecordBatchReaders<T> | FromArg0 | FromArg2) {\n    const reader = RecordBatchReader.from<T>(<any> source) as RecordBatchReaders<T>;\n    try {\n        if (!reader.open({ autoDestroy: false }).closed) {\n            do { yield reader; } while (!(reader.reset().open()).closed);\n        }\n    } finally { reader.cancel(); }\n}\n\n/** @ignore */\nasync function* readAllAsync<T extends { [key: string]: DataType } = any>(source: AsyncRecordBatchReaders<T> | FromArg1 | FromArg3 | FromArg4 | FromArg5) {\n    const reader = await RecordBatchReader.from<T>(<any> source) as RecordBatchReader<T>;\n    try {\n        if (!(await reader.open({ autoDestroy: false })).closed) {\n            do { yield reader; } while (!(await reader.reset().open()).closed);\n        }\n    } finally { await reader.cancel(); }\n}\n\n/** @ignore */\nfunction fromArrowJSON<T extends { [key: string]: DataType }>(source: ArrowJSONLike) {\n    return new RecordBatchStreamReader(new RecordBatchJSONReaderImpl<T>(source));\n}\n\n/** @ignore */\nfunction fromByteStream<T extends { [key: string]: DataType }>(source: ByteStream) {\n    const bytes = source.peek((magicLength + 7) & ~7);\n    return bytes && bytes.byteLength >= 4 ? !checkForMagicArrowString(bytes)\n        ? new RecordBatchStreamReader(new RecordBatchStreamReaderImpl<T>(source))\n        : new RecordBatchFileReader(new RecordBatchFileReaderImpl<T>(source.read()))\n        : new RecordBatchStreamReader(new RecordBatchStreamReaderImpl<T>(function*(): any {}()));\n}\n\n/** @ignore */\nasync function fromAsyncByteStream<T extends { [key: string]: DataType }>(source: AsyncByteStream) {\n    const bytes = await source.peek((magicLength + 7) & ~7);\n    return bytes && bytes.byteLength >= 4 ? !checkForMagicArrowString(bytes)\n        ? new AsyncRecordBatchStreamReader(new AsyncRecordBatchStreamReaderImpl<T>(source))\n        : new RecordBatchFileReader(new RecordBatchFileReaderImpl<T>(await source.read()))\n        : new AsyncRecordBatchStreamReader(new AsyncRecordBatchStreamReaderImpl<T>(async function*(): any {}()));\n}\n\n/** @ignore */\nasync function fromFileHandle<T extends { [key: string]: DataType }>(source: FileHandle) {\n    const { size } = await source.stat();\n    const file = new AsyncRandomAccessFile(source, size);\n    if (size >= magicX2AndPadding) {\n        if (checkForMagicArrowString(await file.readAt(0, (magicLength + 7) & ~7))) {\n            return new AsyncRecordBatchFileReader(new AsyncRecordBatchFileReaderImpl<T>(file));\n        }\n    }\n    return new AsyncRecordBatchStreamReader(new AsyncRecordBatchStreamReaderImpl<T>(file));\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { DataType } from '../../type';\nimport { Vector } from '../../vector';\nimport { VectorType as V } from '../../interfaces';\nimport { Builder, BuilderOptions } from '../../builder/index';\n\n/** @ignore */\nexport interface BuilderTransformOptions<T extends DataType = any, TNull = any> extends BuilderOptions<T, TNull> {\n    queueingStrategy?: 'bytes' | 'count';\n    dictionaryHashFunction?: (value: any) => string | number;\n    readableStrategy?: { highWaterMark?: number, size?: any, type?: 'bytes'; };\n    writableStrategy?: { highWaterMark?: number, size?: any, type?: 'bytes'; };\n    valueToChildTypeId?: (builder: Builder<T, TNull>, value: any, offset: number) => number;\n}\n\n/** @ignore */\nexport function builderThroughDOMStream<T extends DataType = any, TNull = any>(options: BuilderTransformOptions<T, TNull>) {\n    return new BuilderTransform(options);\n}\n\n/** @ignore */\nexport class BuilderTransform<T extends DataType = any, TNull = any> {\n\n    public readable: ReadableStream<V<T>>;\n    public writable: WritableStream<T['TValue'] | TNull>;\n    public _controller: ReadableStreamDefaultController<V<T>> | null;\n\n    private _numChunks = 0;\n    private _finished = false;\n    private _bufferedSize = 0;\n    private _builder: Builder<T, TNull>;\n    private _getSize: (builder: Builder<T, TNull>) => number;\n\n    constructor(options: BuilderTransformOptions<T, TNull>) {\n\n        // Access properties by string indexers to defeat closure compiler\n\n        const {\n            ['readableStrategy']: readableStrategy,\n            ['writableStrategy']: writableStrategy,\n            ['queueingStrategy']: queueingStrategy = 'count',\n            ...builderOptions\n        } = options;\n\n        this._controller = null;\n        this._builder = Builder.new<T, TNull>(builderOptions);\n        this._getSize = queueingStrategy !== 'bytes' ? chunkLength : chunkByteLength;\n\n        const { ['highWaterMark']: readableHighWaterMark = queueingStrategy === 'bytes' ? 2 ** 14 : 1000 } = { ...readableStrategy };\n        const { ['highWaterMark']: writableHighWaterMark = queueingStrategy === 'bytes' ? 2 ** 14 : 1000 } = { ...writableStrategy };\n\n        this['readable'] = new ReadableStream<V<T>>({\n            ['cancel']: ()  => { this._builder.clear(); },\n            ['pull']: (c) => { this._maybeFlush(this._builder, this._controller = c); },\n            ['start']: (c) => { this._maybeFlush(this._builder, this._controller = c); },\n        }, {\n            'highWaterMark': readableHighWaterMark,\n            'size': queueingStrategy !== 'bytes' ? chunkLength : chunkByteLength,\n        });\n\n        this['writable'] = new WritableStream({\n            ['abort']: () => { this._builder.clear(); },\n            ['write']: () => { this._maybeFlush(this._builder, this._controller); },\n            ['close']: () => { this._maybeFlush(this._builder.finish(), this._controller); },\n        }, {\n            'highWaterMark': writableHighWaterMark,\n            'size': (value: T['TValue'] | TNull) => this._writeValueAndReturnChunkSize(value),\n        });\n    }\n\n    private _writeValueAndReturnChunkSize(value: T['TValue'] | TNull) {\n        const bufferedSize = this._bufferedSize;\n        this._bufferedSize = this._getSize(this._builder.append(value));\n        return this._bufferedSize - bufferedSize;\n    }\n\n    private _maybeFlush(builder: Builder<T, TNull>, controller: ReadableStreamDefaultController<V<T>> | null) {\n        if (controller === null) { return; }\n        if (this._bufferedSize >= controller.desiredSize!) {\n            ++this._numChunks && this._enqueue(controller, builder.toVector());\n        }\n        if (builder.finished) {\n            if (builder.length > 0 || this._numChunks === 0) {\n                ++this._numChunks && this._enqueue(controller, builder.toVector());\n            }\n            if (!this._finished && (this._finished = true)) {\n                this._enqueue(controller, null);\n            }\n        }\n    }\n\n    private _enqueue(controller: ReadableStreamDefaultController<V<T>>, chunk: V<T> | null) {\n        this._bufferedSize = 0;\n        this._controller = null;\n        chunk === null ? controller.close() : controller.enqueue(chunk);\n    }\n}\n\n/** @ignore */ const chunkLength = <T extends DataType = any>(chunk: Vector<T> | Builder<T>) => chunk.length;\n/** @ignore */ const chunkByteLength = <T extends DataType = any>(chunk: Vector<T> | Builder<T>) => chunk.byteLength;\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from '../vector';\nimport { RecordBatch } from '../recordbatch';\nimport { DictionaryVector } from '../vector/dictionary';\n\n/** @ignore */\nexport type ValueFunc<T> = (idx: number, cols: RecordBatch) => T | null;\n/** @ignore */\nexport type PredicateFunc = (idx: number, cols: RecordBatch) => boolean;\n\n/** @ignore */\nexport abstract class Value<T> {\n    eq(other: Value<T> | T): Predicate {\n        if (!(other instanceof Value)) { other = new Literal(other); }\n        return new Equals(this, other);\n    }\n    le(other: Value<T> | T): Predicate {\n        if (!(other instanceof Value)) { other = new Literal(other); }\n        return new LTeq(this, other);\n    }\n    ge(other: Value<T> | T): Predicate {\n        if (!(other instanceof Value)) { other = new Literal(other); }\n        return new GTeq(this, other);\n    }\n    lt(other: Value<T> | T): Predicate {\n        return new Not(this.ge(other));\n    }\n    gt(other: Value<T> | T): Predicate {\n        return new Not(this.le(other));\n    }\n    ne(other: Value<T> | T): Predicate {\n        return new Not(this.eq(other));\n    }\n}\n\n/** @ignore */\nexport class Literal<T= any> extends Value<T> {\n    constructor(public v: T) { super(); }\n}\n\n/** @ignore */\nexport class Col<T= any> extends Value<T> {\n    // @ts-ignore\n    public vector: Vector;\n    // @ts-ignore\n    public colidx: number;\n\n    constructor(public name: string) { super(); }\n    bind(batch: RecordBatch): (idx: number, batch?: RecordBatch) => any {\n        if (!this.colidx) {\n            // Assume column index doesn't change between calls to bind\n            //this.colidx = cols.findIndex(v => v.name.indexOf(this.name) != -1);\n            this.colidx = -1;\n            const fields = batch.schema.fields;\n            for (let idx = -1; ++idx < fields.length;) {\n                if (fields[idx].name === this.name) {\n                    this.colidx = idx;\n                    break;\n                }\n            }\n            if (this.colidx < 0) { throw new Error(`Failed to bind Col \"${this.name}\"`); }\n        }\n\n        const vec = this.vector = batch.getChildAt(this.colidx)!;\n        return (idx: number) => vec.get(idx);\n    }\n}\n\n/** @ignore */\nexport abstract class Predicate {\n    abstract bind(batch: RecordBatch): PredicateFunc;\n    and(...expr: Predicate[]): And { return new And(this, ...expr); }\n    or(...expr: Predicate[]): Or { return new Or(this, ...expr); }\n    not(): Predicate { return new Not(this); }\n}\n\n/** @ignore */\nexport abstract class ComparisonPredicate<T= any> extends Predicate {\n    constructor(public readonly left: Value<T>, public readonly right: Value<T>) {\n        super();\n    }\n\n    bind(batch: RecordBatch) {\n        if (this.left instanceof Literal) {\n            if (this.right instanceof Literal) {\n                return this._bindLitLit(batch, this.left, this.right);\n            } else { // right is a Col\n\n                return this._bindLitCol(batch, this.left, this.right as Col);\n            }\n        } else { // left is a Col\n            if (this.right instanceof Literal) {\n                return this._bindColLit(batch, this.left as Col, this.right);\n            } else { // right is a Col\n                return this._bindColCol(batch, this.left as Col, this.right as Col);\n            }\n        }\n    }\n\n    protected abstract _bindLitLit(batch: RecordBatch, left: Literal, right: Literal): PredicateFunc;\n    protected abstract _bindColCol(batch: RecordBatch, left: Col, right: Col): PredicateFunc;\n    protected abstract _bindColLit(batch: RecordBatch, col: Col, lit: Literal): PredicateFunc;\n    protected abstract _bindLitCol(batch: RecordBatch, lit: Literal, col: Col): PredicateFunc;\n}\n\n/** @ignore */\nexport abstract class CombinationPredicate extends Predicate {\n    readonly children: Predicate[];\n    constructor(...children: Predicate[]) {\n        super();\n        this.children = children;\n    }\n}\n// add children to prototype so it doesn't get mangled in es2015/umd\n(<any> CombinationPredicate.prototype).children = Object.freeze([]); // freeze for safety\n\n/** @ignore */\nexport class And extends CombinationPredicate {\n    constructor(...children: Predicate[]) {\n        // Flatten any Ands\n        children = children.reduce((accum: Predicate[], p: Predicate): Predicate[] => {\n            return accum.concat(p instanceof And ? p.children : p);\n        }, []);\n        super(...children);\n    }\n    bind(batch: RecordBatch) {\n        const bound = this.children.map((p) => p.bind(batch));\n        return (idx: number, batch: RecordBatch) => bound.every((p) => p(idx, batch));\n    }\n}\n\n/** @ignore */\nexport class Or extends CombinationPredicate {\n    constructor(...children: Predicate[]) {\n        // Flatten any Ors\n        children = children.reduce((accum: Predicate[], p: Predicate): Predicate[] => {\n            return accum.concat(p instanceof Or ? p.children : p);\n        }, []);\n        super(...children);\n    }\n    bind(batch: RecordBatch) {\n        const bound = this.children.map((p) => p.bind(batch));\n        return (idx: number, batch: RecordBatch) => bound.some((p) => p(idx, batch));\n    }\n}\n\n/** @ignore */\nexport class Equals extends ComparisonPredicate {\n    // Helpers used to cache dictionary reverse lookups between calls to bind\n    private lastDictionary: Vector|undefined;\n    private lastKey: number|undefined;\n\n    protected _bindLitLit(_batch: RecordBatch, left: Literal, right: Literal): PredicateFunc {\n        const rtrn: boolean = left.v == right.v;\n        return () => rtrn;\n    }\n\n    protected _bindColCol(batch: RecordBatch, left: Col, right: Col): PredicateFunc {\n        const left_func = left.bind(batch);\n        const right_func = right.bind(batch);\n        return (idx: number, batch: RecordBatch) => left_func(idx, batch) == right_func(idx, batch);\n    }\n\n    protected _bindColLit(batch: RecordBatch, col: Col, lit: Literal): PredicateFunc {\n        const col_func = col.bind(batch);\n        if (col.vector instanceof DictionaryVector) {\n            let key: any;\n            const vector = col.vector as DictionaryVector;\n            if (vector.dictionary !== this.lastDictionary) {\n                key = vector.reverseLookup(lit.v);\n                this.lastDictionary = vector.dictionary;\n                this.lastKey = key;\n            } else {\n                key = this.lastKey;\n            }\n\n            if (key === -1) {\n                // the value doesn't exist in the dictionary - always return\n                // false\n                // TODO: special-case of PredicateFunc that encapsulates this\n                // \"always false\" behavior. That way filtering operations don't\n                // have to bother checking\n                return () => false;\n            } else {\n                return (idx: number) => {\n                    return vector.getKey(idx) === key;\n                };\n            }\n        } else {\n            return (idx: number, cols: RecordBatch) => col_func(idx, cols) == lit.v;\n        }\n    }\n\n    protected _bindLitCol(batch: RecordBatch, lit: Literal, col: Col) {\n        // Equals is commutative\n        return this._bindColLit(batch, col, lit);\n    }\n}\n\n/** @ignore */\nexport class LTeq extends ComparisonPredicate {\n    protected _bindLitLit(_batch: RecordBatch, left: Literal, right: Literal): PredicateFunc {\n        const rtrn: boolean = left.v <= right.v;\n        return () => rtrn;\n    }\n\n    protected _bindColCol(batch: RecordBatch, left: Col, right: Col): PredicateFunc {\n        const left_func = left.bind(batch);\n        const right_func = right.bind(batch);\n        return (idx: number, cols: RecordBatch) => left_func(idx, cols) <= right_func(idx, cols);\n    }\n\n    protected _bindColLit(batch: RecordBatch, col: Col, lit: Literal): PredicateFunc {\n        const col_func = col.bind(batch);\n        return (idx: number, cols: RecordBatch) => col_func(idx, cols) <= lit.v;\n    }\n\n    protected _bindLitCol(batch: RecordBatch, lit: Literal, col: Col) {\n        const col_func = col.bind(batch);\n        return (idx: number, cols: RecordBatch) => lit.v <= col_func(idx, cols);\n    }\n}\n\n/** @ignore */\nexport class GTeq extends ComparisonPredicate {\n    protected _bindLitLit(_batch: RecordBatch, left: Literal, right: Literal): PredicateFunc {\n        const rtrn: boolean = left.v >= right.v;\n        return () => rtrn;\n    }\n\n    protected _bindColCol(batch: RecordBatch, left: Col, right: Col): PredicateFunc {\n        const left_func = left.bind(batch);\n        const right_func = right.bind(batch);\n        return (idx: number, cols: RecordBatch) => left_func(idx, cols) >= right_func(idx, cols);\n    }\n\n    protected _bindColLit(batch: RecordBatch, col: Col, lit: Literal): PredicateFunc {\n        const col_func = col.bind(batch);\n        return (idx: number, cols: RecordBatch) => col_func(idx, cols) >= lit.v;\n    }\n\n    protected _bindLitCol(batch: RecordBatch, lit: Literal, col: Col) {\n        const col_func = col.bind(batch);\n        return (idx: number, cols: RecordBatch) => lit.v >= col_func(idx, cols);\n    }\n}\n\n/** @ignore */\nexport class Not extends Predicate {\n    constructor(public readonly child: Predicate) {\n        super();\n    }\n\n    bind(batch: RecordBatch) {\n        const func = this.child.bind(batch);\n        return (idx: number, batch: RecordBatch) => !func(idx, batch);\n    }\n}\n\n/** @ignore */\nexport class CustomPredicate extends Predicate {\n    constructor(private next: PredicateFunc, private bind_: (batch: RecordBatch) => void) {\n        super();\n    }\n\n    bind(batch: RecordBatch) {\n        this.bind_(batch);\n        return this.next;\n    }\n}\n\nexport function lit(v: any): Value<any> { return new Literal(v); }\nexport function col(n: string): Col<any> { return new Col(n); }\nexport function and(...p: Predicate[]): And { return new And(...p); }\nexport function or(...p: Predicate[]): Or { return new Or(...p); }\nexport function custom(next: PredicateFunc, bind: (batch: RecordBatch) => void) {\n    return new CustomPredicate(next, bind);\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Table } from '../table';\nimport { Vector } from '../vector';\nimport { IntVector } from '../vector/int';\nimport { Field, Schema } from '../schema';\nimport { Predicate, Col } from './predicate';\nimport { RecordBatch } from '../recordbatch';\nimport { VectorType as V } from '../interfaces';\nimport { DataType, Int, Struct, Dictionary } from '../type';\n\n/** @ignore */\nexport type BindFunc = (batch: RecordBatch) => void;\n/** @ignore */\nexport type NextFunc = (idx: number, batch: RecordBatch) => void;\n\nTable.prototype.countBy = function(this: Table, name: Col | string) { return new DataFrame(this.chunks).countBy(name); };\nTable.prototype.scan = function(this: Table, next: NextFunc, bind?: BindFunc) { return new DataFrame(this.chunks).scan(next, bind); };\nTable.prototype.scanReverse = function(this: Table, next: NextFunc, bind?: BindFunc) { return new DataFrame(this.chunks).scanReverse(next, bind); };\nTable.prototype.filter = function(this: Table, predicate: Predicate): FilteredDataFrame { return new DataFrame(this.chunks).filter(predicate); };\n\nexport class DataFrame<T extends { [key: string]: DataType } = any> extends Table<T> {\n    public filter(predicate: Predicate): FilteredDataFrame<T> {\n        return new FilteredDataFrame<T>(this.chunks, predicate);\n    }\n    public scan(next: NextFunc, bind?: BindFunc) {\n        const batches = this.chunks, numBatches = batches.length;\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            if (bind) { bind(batch); }\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                next(index, batch);\n            }\n        }\n    }\n    public scanReverse(next: NextFunc, bind?: BindFunc) {\n        const batches = this.chunks, numBatches = batches.length;\n        for (let batchIndex = numBatches; --batchIndex >= 0;) {\n            // load batches\n            const batch = batches[batchIndex];\n            if (bind) { bind(batch); }\n            // yield all indices\n            for (let index = batch.length; --index >= 0;) {\n                next(index, batch);\n            }\n        }\n    }\n    public countBy(name: Col | string) {\n        const batches = this.chunks, numBatches = batches.length;\n        const count_by = typeof name === 'string' ? new Col(name) : name as Col;\n        // Assume that all dictionary batches are deltas, which means that the\n        // last record batch has the most complete dictionary\n        count_by.bind(batches[numBatches - 1]);\n        const vector = count_by.vector as V<Dictionary>;\n        if (!DataType.isDictionary(vector.type)) {\n            throw new Error('countBy currently only supports dictionary-encoded columns');\n        }\n\n        const countByteLength = Math.ceil(Math.log(vector.length) / Math.log(256));\n        const CountsArrayType = countByteLength == 4 ? Uint32Array :\n                                countByteLength >= 2 ? Uint16Array : Uint8Array;\n\n        const counts = new CountsArrayType(vector.dictionary.length);\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            // rebind the countBy Col\n            count_by.bind(batch);\n            const keys = (count_by.vector as V<Dictionary>).indices;\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                let key = keys.get(index);\n                if (key !== null) { counts[key]++; }\n            }\n        }\n        return new CountByResult(vector.dictionary, IntVector.from(counts));\n    }\n}\n\n/** @ignore */\nexport class CountByResult<T extends DataType = any, TCount extends Int = Int> extends Table<{ values: T,  counts: TCount }> {\n    constructor(values: Vector<T>, counts: V<TCount>) {\n        type R = { values: T, counts: TCount };\n        const schema = new Schema<R>([\n            new Field('values', values.type),\n            new Field('counts', counts.type)\n        ]);\n        super(new RecordBatch<R>(schema, counts.length, [values, counts]));\n    }\n    public toJSON(): Object {\n        const values = this.getColumnAt(0)!;\n        const counts = this.getColumnAt(1)!;\n        const result = {} as { [k: string]: number | null };\n        for (let i = -1; ++i < this.length;) {\n            result[values.get(i)] = counts.get(i);\n        }\n        return result;\n    }\n}\n\n/** @ignore */\nexport class FilteredDataFrame<T extends { [key: string]: DataType } = any> extends DataFrame<T> {\n    private _predicate: Predicate;\n    constructor (batches: RecordBatch<T>[], predicate: Predicate) {\n        super(batches);\n        this._predicate = predicate;\n    }\n    public scan(next: NextFunc, bind?: BindFunc) {\n        // inlined version of this:\n        // this.parent.scan((idx, columns) => {\n        //     if (this.predicate(idx, columns)) next(idx, columns);\n        // });\n        const batches = this._chunks;\n        const numBatches = batches.length;\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            const predicate = this._predicate.bind(batch);\n            let isBound = false;\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                if (predicate(index, batch)) {\n                    // bind batches lazily - if predicate doesn't match anything\n                    // in the batch we don't need to call bind on the batch\n                    if (bind && !isBound) {\n                        bind(batch);\n                        isBound = true;\n                    }\n                    next(index, batch);\n                }\n            }\n        }\n    }\n    public scanReverse(next: NextFunc, bind?: BindFunc) {\n        const batches = this._chunks;\n        const numBatches = batches.length;\n        for (let batchIndex = numBatches; --batchIndex >= 0;) {\n            // load batches\n            const batch = batches[batchIndex];\n            const predicate = this._predicate.bind(batch);\n            let isBound = false;\n            // yield all indices\n            for (let index = batch.length; --index >= 0;) {\n                if (predicate(index, batch)) {\n                    // bind batches lazily - if predicate doesn't match anything\n                    // in the batch we don't need to call bind on the batch\n                    if (bind && !isBound) {\n                        bind(batch);\n                        isBound = true;\n                    }\n                    next(index, batch);\n                }\n            }\n        }\n    }\n    public count(): number {\n        // inlined version of this:\n        // let sum = 0;\n        // this.parent.scan((idx, columns) => {\n        //     if (this.predicate(idx, columns)) ++sum;\n        // });\n        // return sum;\n        let sum = 0;\n        const batches = this._chunks;\n        const numBatches = batches.length;\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            const predicate = this._predicate.bind(batch);\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                if (predicate(index, batch)) { ++sum; }\n            }\n        }\n        return sum;\n    }\n    public *[Symbol.iterator](): IterableIterator<Struct<T>['TValue']> {\n        // inlined version of this:\n        // this.parent.scan((idx, columns) => {\n        //     if (this.predicate(idx, columns)) next(idx, columns);\n        // });\n        const batches = this._chunks;\n        const numBatches = batches.length;\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            // TODO: bind batches lazily\n            // If predicate doesn't match anything in the batch we don't need\n            // to bind the callback\n            const predicate = this._predicate.bind(batch);\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                if (predicate(index, batch)) { yield batch.get(index) as any; }\n            }\n        }\n    }\n    public filter(predicate: Predicate): FilteredDataFrame<T> {\n        return new FilteredDataFrame<T>(\n            this._chunks,\n            this._predicate.and(predicate)\n        );\n    }\n    public countBy(name: Col | string) {\n        const batches = this._chunks, numBatches = batches.length;\n        const count_by = typeof name === 'string' ? new Col(name) : name as Col;\n        // Assume that all dictionary batches are deltas, which means that the\n        // last record batch has the most complete dictionary\n        count_by.bind(batches[numBatches - 1]);\n        const vector = count_by.vector as V<Dictionary>;\n        if (!DataType.isDictionary(vector.type)) {\n            throw new Error('countBy currently only supports dictionary-encoded columns');\n        }\n\n        const countByteLength = Math.ceil(Math.log(vector.length) / Math.log(256));\n        const CountsArrayType = countByteLength == 4 ? Uint32Array :\n                                countByteLength >= 2 ? Uint16Array : Uint8Array;\n\n        const counts = new CountsArrayType(vector.dictionary.length);\n\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            const predicate = this._predicate.bind(batch);\n            // rebind the countBy Col\n            count_by.bind(batch);\n            const keys = (count_by.vector as V<Dictionary>).indices;\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                let key = keys.get(index);\n                if (key !== null && predicate(index, batch)) { counts[key]++; }\n            }\n        }\n        return new CountByResult(vector.dictionary, IntVector.from(counts));\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nexport { ArrowType, DateUnit, IntervalUnit, MessageHeader, MetadataVersion, Precision, TimeUnit, Type, UnionMode, BufferType } from './enum';\nexport { Data } from './data';\nexport {\n    DataType,\n    Null,\n    Bool,\n    Int, Int8, Int16, Int32, Int64, Uint8, Uint16, Uint32, Uint64,\n    Float, Float16, Float32, Float64,\n    Utf8,\n    Binary,\n    FixedSizeBinary,\n    Date_, DateDay, DateMillisecond,\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\n    Decimal,\n    List,\n    Struct,\n    Union, DenseUnion, SparseUnion,\n    Dictionary,\n    Interval, IntervalDayTime, IntervalYearMonth,\n    FixedSizeList,\n    Map_,\n} from './type';\n\nexport { Table } from './table';\nexport { Column } from './column';\nexport { Visitor } from './visitor';\nexport { Schema, Field } from './schema';\nexport {\n    Vector,\n    BaseVector,\n    BinaryVector,\n    BoolVector,\n    Chunked,\n    DateVector, DateDayVector, DateMillisecondVector,\n    DecimalVector,\n    DictionaryVector,\n    FixedSizeBinaryVector,\n    FixedSizeListVector,\n    FloatVector, Float16Vector, Float32Vector, Float64Vector,\n    IntervalVector, IntervalDayTimeVector, IntervalYearMonthVector,\n    IntVector, Int8Vector, Int16Vector, Int32Vector, Int64Vector, Uint8Vector, Uint16Vector, Uint32Vector, Uint64Vector,\n    ListVector,\n    MapVector,\n    NullVector,\n    StructVector,\n    TimestampVector, TimestampSecondVector, TimestampMillisecondVector, TimestampMicrosecondVector, TimestampNanosecondVector,\n    TimeVector, TimeSecondVector, TimeMillisecondVector, TimeMicrosecondVector, TimeNanosecondVector,\n    UnionVector, DenseUnionVector, SparseUnionVector,\n    Utf8Vector,\n} from './vector/index';\n\nexport {\n    Builder,\n    BinaryBuilder,\n    BoolBuilder,\n    DateBuilder, DateDayBuilder, DateMillisecondBuilder,\n    DecimalBuilder,\n    DictionaryBuilder,\n    FixedSizeBinaryBuilder,\n    FixedSizeListBuilder,\n    FloatBuilder, Float16Builder, Float32Builder, Float64Builder,\n    IntervalBuilder, IntervalDayTimeBuilder, IntervalYearMonthBuilder,\n    IntBuilder, Int8Builder, Int16Builder, Int32Builder, Int64Builder, Uint8Builder, Uint16Builder, Uint32Builder, Uint64Builder,\n    ListBuilder,\n    MapBuilder,\n    NullBuilder,\n    StructBuilder,\n    TimestampBuilder, TimestampSecondBuilder, TimestampMillisecondBuilder, TimestampMicrosecondBuilder, TimestampNanosecondBuilder,\n    TimeBuilder, TimeSecondBuilder, TimeMillisecondBuilder, TimeMicrosecondBuilder, TimeNanosecondBuilder,\n    UnionBuilder, DenseUnionBuilder, SparseUnionBuilder,\n    Utf8Builder,\n} from './builder/index';\n\nexport { ByteStream, AsyncByteStream, AsyncByteQueue, ReadableSource, WritableSink } from './io/stream';\nexport { RecordBatchReader, RecordBatchFileReader, RecordBatchStreamReader, AsyncRecordBatchFileReader, AsyncRecordBatchStreamReader } from './ipc/reader';\nexport { RecordBatchWriter, RecordBatchFileWriter, RecordBatchStreamWriter, RecordBatchJSONWriter } from './ipc/writer';\nexport { MessageReader, AsyncMessageReader, JSONMessageReader } from './ipc/message';\nexport { Message } from './ipc/metadata/message';\nexport { RecordBatch } from './recordbatch';\nexport { ArrowJSONLike, FileHandle, Readable, Writable, ReadableWritable, ReadableDOMStreamOptions } from './io/interfaces';\nexport { DataFrame, FilteredDataFrame, CountByResult, BindFunc, NextFunc } from './compute/dataframe';\n\nimport * as util_bn_ from './util/bn';\nimport * as util_int_ from './util/int';\nimport * as util_bit_ from './util/bit';\nimport * as util_math_ from './util/math';\nimport * as util_buffer_ from './util/buffer';\nimport * as util_vector_ from './util/vector';\nimport * as predicate from './compute/predicate';\n\nexport { predicate };\n/** @ignore */\nexport const util = {\n    ...util_bn_,\n    ...util_int_,\n    ...util_bit_,\n    ...util_math_,\n    ...util_buffer_,\n    ...util_vector_\n};\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport streamAdapters from './io/adapters';\nimport { Builder } from './builder/index';\nimport { RecordBatchReader } from './ipc/reader';\nimport { RecordBatchWriter } from './ipc/writer';\nimport { toDOMStream } from './io/whatwg/iterable';\nimport { builderThroughDOMStream } from './io/whatwg/builder';\nimport { recordBatchReaderThroughDOMStream } from './io/whatwg/reader';\nimport { recordBatchWriterThroughDOMStream } from './io/whatwg/writer';\n\nstreamAdapters.toDOMStream = toDOMStream;\nBuilder['throughDOM'] = builderThroughDOMStream;\nRecordBatchReader['throughDOM'] = recordBatchReaderThroughDOMStream;\nRecordBatchWriter['throughDOM'] = recordBatchWriterThroughDOMStream;\n\nexport {\n    ArrowType, DateUnit, IntervalUnit, MessageHeader, MetadataVersion, Precision, TimeUnit, Type, UnionMode, BufferType,\n    Data,\n    DataType,\n    Null,\n    Bool,\n    Int, Int8, Int16, Int32, Int64, Uint8, Uint16, Uint32, Uint64,\n    Float, Float16, Float32, Float64,\n    Utf8,\n    Binary,\n    FixedSizeBinary,\n    Date_, DateDay, DateMillisecond,\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\n    Decimal,\n    List,\n    Struct,\n    Union, DenseUnion, SparseUnion,\n    Dictionary,\n    Interval, IntervalDayTime, IntervalYearMonth,\n    FixedSizeList,\n    Map_,\n    Table,\n    Column,\n    Schema, Field,\n    Visitor,\n    Vector,\n    BaseVector,\n    BinaryVector,\n    BoolVector,\n    Chunked,\n    DateVector, DateDayVector, DateMillisecondVector,\n    DecimalVector,\n    DictionaryVector,\n    FixedSizeBinaryVector,\n    FixedSizeListVector,\n    FloatVector, Float16Vector, Float32Vector, Float64Vector,\n    IntervalVector, IntervalDayTimeVector, IntervalYearMonthVector,\n    IntVector, Int8Vector, Int16Vector, Int32Vector, Int64Vector, Uint8Vector, Uint16Vector, Uint32Vector, Uint64Vector,\n    ListVector,\n    MapVector,\n    NullVector,\n    StructVector,\n    TimestampVector, TimestampSecondVector, TimestampMillisecondVector, TimestampMicrosecondVector, TimestampNanosecondVector,\n    TimeVector, TimeSecondVector, TimeMillisecondVector, TimeMicrosecondVector, TimeNanosecondVector,\n    UnionVector, DenseUnionVector, SparseUnionVector,\n    Utf8Vector,\n    ByteStream, AsyncByteStream, AsyncByteQueue, ReadableSource, WritableSink,\n    RecordBatchReader, RecordBatchFileReader, RecordBatchStreamReader, AsyncRecordBatchFileReader, AsyncRecordBatchStreamReader,\n    RecordBatchWriter, RecordBatchFileWriter, RecordBatchStreamWriter, RecordBatchJSONWriter,\n    MessageReader, AsyncMessageReader, JSONMessageReader,\n    Message,\n    RecordBatch,\n    ArrowJSONLike, FileHandle, Readable, Writable, ReadableWritable, ReadableDOMStreamOptions,\n    DataFrame, FilteredDataFrame, CountByResult, BindFunc, NextFunc,\n    predicate,\n    util,\n    Builder,\n    BinaryBuilder,\n    BoolBuilder,\n    DateBuilder, DateDayBuilder, DateMillisecondBuilder,\n    DecimalBuilder,\n    DictionaryBuilder,\n    FixedSizeBinaryBuilder,\n    FixedSizeListBuilder,\n    FloatBuilder, Float16Builder, Float32Builder, Float64Builder,\n    IntervalBuilder, IntervalDayTimeBuilder, IntervalYearMonthBuilder,\n    IntBuilder, Int8Builder, Int16Builder, Int32Builder, Int64Builder, Uint8Builder, Uint16Builder, Uint32Builder, Uint64Builder,\n    ListBuilder,\n    MapBuilder,\n    NullBuilder,\n    StructBuilder,\n    TimestampBuilder, TimestampSecondBuilder, TimestampMillisecondBuilder, TimestampMicrosecondBuilder, TimestampNanosecondBuilder,\n    TimeBuilder, TimeSecondBuilder, TimeMillisecondBuilder, TimeMicrosecondBuilder, TimeNanosecondBuilder,\n    UnionBuilder, DenseUnionBuilder, SparseUnionBuilder,\n    Utf8Builder,\n} from './Arrow';\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { toUint8Array } from '../../util/buffer';\nimport { ReadableDOMStreamOptions } from '../../io/interfaces';\nimport { isIterable, isAsyncIterable } from '../../util/compat';\n\n/** @ignore */\nexport function toDOMStream<T>(source: Iterable<T> | AsyncIterable<T>, options?: ReadableDOMStreamOptions): ReadableStream<T> {\n    if (isAsyncIterable<T>(source)) { return asyncIterableAsReadableDOMStream(source, options); }\n    if (isIterable<T>(source)) { return iterableAsReadableDOMStream(source, options); }\n    /* istanbul ignore next */\n    throw new Error(`toDOMStream() must be called with an Iterable or AsyncIterable`);\n}\n\n/** @ignore */\nfunction iterableAsReadableDOMStream<T>(source: Iterable<T>, options?: ReadableDOMStreamOptions) {\n\n    let it: Iterator<T> | null = null;\n    const bm = (options && options.type === 'bytes') || false;\n    const hwm = options && options.highWaterMark || (2 ** 24);\n\n    return new ReadableStream<T>({\n        ...options as any,\n        start(controller) { next(controller, it || (it = source[Symbol.iterator]())); },\n        pull(controller) { it ? (next(controller, it)) : controller.close(); },\n        cancel() { (it && (it.return && it.return()) || true) && (it = null); }\n    }, { highWaterMark: bm ? hwm : undefined, ...options });\n\n    function next(controller: ReadableStreamDefaultController<T>, it: Iterator<T>) {\n        let buf: Uint8Array;\n        let r: IteratorResult<T> | null = null;\n        let size = controller.desiredSize || null;\n        while (!(r = it.next(bm ? size : null)).done) {\n            if (ArrayBuffer.isView(r.value) && (buf = toUint8Array(r.value))) {\n                size != null && bm && (size = size - buf.byteLength + 1);\n                r.value = <any> buf;\n            }\n            controller.enqueue(r.value);\n            if (size != null && --size <= 0) { return; }\n        }\n        controller.close();\n    }\n}\n\n/** @ignore */\nfunction asyncIterableAsReadableDOMStream<T>(source: AsyncIterable<T>, options?: ReadableDOMStreamOptions) {\n\n    let it: AsyncIterator<T> | null = null;\n    const bm = (options && options.type === 'bytes') || false;\n    const hwm = options && options.highWaterMark || (2 ** 24);\n\n    return new ReadableStream<T>({\n        ...options as any,\n        async start(controller) { await next(controller, it || (it = source[Symbol.asyncIterator]())); },\n        async pull(controller) { it ? (await next(controller, it)) : controller.close(); },\n        async cancel() { (it && (it.return && await it.return()) || true) && (it = null); },\n    }, { highWaterMark: bm ? hwm : undefined, ...options });\n\n    async function next(controller: ReadableStreamDefaultController<T>, it: AsyncIterator<T>) {\n        let buf: Uint8Array;\n        let r: IteratorResult<T> | null = null;\n        let size = controller.desiredSize || null;\n        while (!(r = await it.next(bm ? size : null)).done) {\n            if (ArrayBuffer.isView(r.value) && (buf = toUint8Array(r.value))) {\n                size != null && bm && (size = size - buf.byteLength + 1);\n                r.value = <any> buf;\n            }\n            controller.enqueue(r.value);\n            if (size != null && --size <= 0) { return; }\n        }\n        controller.close();\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { DataType } from '../../type';\nimport { RecordBatch } from '../../recordbatch';\nimport { AsyncByteQueue } from '../../io/stream';\nimport { RecordBatchReader } from '../../ipc/reader';\n\n/** @ignore */\nexport function recordBatchReaderThroughDOMStream<T extends { [key: string]: DataType } = any>(writableStrategy?: ByteLengthQueuingStrategy, readableStrategy?: { autoDestroy: boolean }) {\n\n    const queue = new AsyncByteQueue();\n    let reader: RecordBatchReader<T> | null = null;\n\n    const readable = new ReadableStream<RecordBatch<T>>({\n        async cancel() { await queue.close(); },\n        async start(controller) { await next(controller, reader || (reader = await open())); },\n        async pull(controller) { reader ? await next(controller, reader) : controller.close(); }\n    });\n\n    return { writable: new WritableStream(queue, { 'highWaterMark': 2 ** 14, ...writableStrategy }), readable };\n\n    async function open() {\n        return await (await RecordBatchReader.from<T>(queue)).open(readableStrategy);\n    }\n\n    async function next(controller: ReadableStreamDefaultController<RecordBatch<T>>, reader: RecordBatchReader<T>) {\n        let size = controller.desiredSize;\n        let r: IteratorResult<RecordBatch<T>> | null = null;\n        while (!(r = await reader.next()).done) {\n            controller.enqueue(r.value);\n            if (size != null && --size <= 0) {\n                return;\n            }\n        }\n        controller.close();\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { DataType } from '../../type';\nimport { RecordBatch } from '../../recordbatch';\nimport { AsyncByteStream } from '../../io/stream';\nimport { RecordBatchWriter } from '../../ipc/writer';\n\n/** @ignore */\nexport function recordBatchWriterThroughDOMStream<T extends { [key: string]: DataType } = any>(\n    this: typeof RecordBatchWriter,\n    writableStrategy?: QueuingStrategy<RecordBatch<T>> & { autoDestroy: boolean },\n    readableStrategy?: { highWaterMark?: number, size?: any }\n) {\n\n    const writer = new this<T>(writableStrategy);\n    const reader = new AsyncByteStream(writer);\n    const readable = new ReadableStream({\n        type: 'bytes',\n        async cancel() { await reader.cancel(); },\n        async pull(controller) { await next(controller); },\n        async start(controller) { await next(controller); },\n    }, { 'highWaterMark': 2 ** 14, ...readableStrategy });\n\n    return { writable: new WritableStream(writer, writableStrategy), readable };\n\n    async function next(controller: ReadableStreamDefaultController<Uint8Array>) {\n        let buf: Uint8Array | null = null;\n        let size = controller.desiredSize;\n        while (buf = await reader.read(size || null)) {\n            controller.enqueue(buf);\n            if (size != null && (size -= buf.byteLength) <= 0) { return; }\n        }\n        controller.close();\n    }\n}\n","/**\n * @license\n * Copyright 2018-2021 Streamlit Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Table, Type } from \"apache-arrow\";\nvar ArrowTable = /** @class */ (function () {\n    function ArrowTable(dataBuffer, indexBuffer, columnsBuffer, styler) {\n        var _this = this;\n        this.getCell = function (rowIndex, columnIndex) {\n            var isBlankCell = rowIndex < _this.headerRows && columnIndex < _this.headerColumns;\n            var isIndexCell = rowIndex >= _this.headerRows && columnIndex < _this.headerColumns;\n            var isColumnsCell = rowIndex < _this.headerRows && columnIndex >= _this.headerColumns;\n            if (isBlankCell) {\n                var classNames = [\"blank\"];\n                if (columnIndex > 0) {\n                    classNames.push(\"level\" + rowIndex);\n                }\n                return {\n                    type: \"blank\",\n                    classNames: classNames.join(\" \"),\n                    content: \"\"\n                };\n            }\n            else if (isColumnsCell) {\n                var dataColumnIndex = columnIndex - _this.headerColumns;\n                var classNames = [\n                    \"col_heading\",\n                    \"level\" + rowIndex,\n                    \"col\" + dataColumnIndex\n                ];\n                return {\n                    type: \"columns\",\n                    classNames: classNames.join(\" \"),\n                    content: _this.getContent(_this.columnsTable, dataColumnIndex, rowIndex)\n                };\n            }\n            else if (isIndexCell) {\n                var dataRowIndex = rowIndex - _this.headerRows;\n                var classNames = [\n                    \"row_heading\",\n                    \"level\" + columnIndex,\n                    \"row\" + dataRowIndex\n                ];\n                return {\n                    type: \"index\",\n                    id: \"T_\" + _this.uuid + \"level\" + columnIndex + \"_row\" + dataRowIndex,\n                    classNames: classNames.join(\" \"),\n                    content: _this.getContent(_this.indexTable, dataRowIndex, columnIndex)\n                };\n            }\n            else {\n                var dataRowIndex = rowIndex - _this.headerRows;\n                var dataColumnIndex = columnIndex - _this.headerColumns;\n                var classNames = [\n                    \"data\",\n                    \"row\" + dataRowIndex,\n                    \"col\" + dataColumnIndex\n                ];\n                var content = _this.styler\n                    ? _this.getContent(_this.styler.displayValuesTable, dataRowIndex, dataColumnIndex)\n                    : _this.getContent(_this.dataTable, dataRowIndex, dataColumnIndex);\n                return {\n                    type: \"data\",\n                    id: \"T_\" + _this.uuid + \"row\" + dataRowIndex + \"_col\" + dataColumnIndex,\n                    classNames: classNames.join(\" \"),\n                    content: content\n                };\n            }\n        };\n        this.getContent = function (table, rowIndex, columnIndex) {\n            var column = table.getColumnAt(columnIndex);\n            if (column === null) {\n                return \"\";\n            }\n            var columnTypeId = _this.getColumnTypeId(table, columnIndex);\n            switch (columnTypeId) {\n                case Type.Timestamp: {\n                    return _this.nanosToDate(column.get(rowIndex));\n                }\n                default: {\n                    return column.get(rowIndex);\n                }\n            }\n        };\n        this.dataTable = Table.from(dataBuffer);\n        this.indexTable = Table.from(indexBuffer);\n        this.columnsTable = Table.from(columnsBuffer);\n        this.styler = styler\n            ? {\n                caption: styler.caption,\n                displayValuesTable: Table.from(styler.displayValues),\n                styles: styler.styles,\n                uuid: styler.uuid\n            }\n            : undefined;\n    }\n    Object.defineProperty(ArrowTable.prototype, \"rows\", {\n        get: function () {\n            return this.indexTable.length + this.columnsTable.numCols;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ArrowTable.prototype, \"columns\", {\n        get: function () {\n            return this.indexTable.numCols + this.columnsTable.length;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ArrowTable.prototype, \"headerRows\", {\n        get: function () {\n            return this.rows - this.dataRows;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ArrowTable.prototype, \"headerColumns\", {\n        get: function () {\n            return this.columns - this.dataColumns;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ArrowTable.prototype, \"dataRows\", {\n        get: function () {\n            return this.dataTable.length;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ArrowTable.prototype, \"dataColumns\", {\n        get: function () {\n            return this.dataTable.numCols;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ArrowTable.prototype, \"uuid\", {\n        get: function () {\n            return this.styler && this.styler.uuid;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ArrowTable.prototype, \"caption\", {\n        get: function () {\n            return this.styler && this.styler.caption;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ArrowTable.prototype, \"styles\", {\n        get: function () {\n            return this.styler && this.styler.styles;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ArrowTable.prototype, \"table\", {\n        get: function () {\n            return this.dataTable;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ArrowTable.prototype, \"index\", {\n        get: function () {\n            return this.indexTable;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ArrowTable.prototype, \"columnTable\", {\n        get: function () {\n            return this.columnsTable;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Serialize arrow table.\n     */\n    ArrowTable.prototype.serialize = function () {\n        return {\n            data: this.dataTable.serialize(),\n            index: this.indexTable.serialize(),\n            columns: this.columnsTable.serialize()\n        };\n    };\n    /**\n     * Returns apache-arrow specific typeId of column.\n     */\n    ArrowTable.prototype.getColumnTypeId = function (table, columnIndex) {\n        return table.schema.fields[columnIndex].type.typeId;\n    };\n    ArrowTable.prototype.nanosToDate = function (nanos) {\n        return new Date(nanos / 1e6);\n    };\n    return ArrowTable;\n}());\nexport { ArrowTable };\n","/**\n * @license\n * Copyright 2018-2021 Streamlit Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\n// Safari doesn't support the EventTarget class, so we use a shim.\nimport { EventTarget } from \"event-target-shim\";\nimport { ArrowTable } from \"./ArrowTable\";\n/** Messages from Component -> Streamlit */\nvar ComponentMessageType;\n(function (ComponentMessageType) {\n    // A component sends this message when it's ready to receive messages\n    // from Streamlit. Streamlit won't send any messages until it gets this.\n    // Data: { apiVersion: number }\n    ComponentMessageType[\"COMPONENT_READY\"] = \"streamlit:componentReady\";\n    // The component has a new widget value. Send it back to Streamlit, which\n    // will then re-run the app.\n    // Data: { value: any }\n    ComponentMessageType[\"SET_COMPONENT_VALUE\"] = \"streamlit:setComponentValue\";\n    // The component has a new height for its iframe.\n    // Data: { height: number }\n    ComponentMessageType[\"SET_FRAME_HEIGHT\"] = \"streamlit:setFrameHeight\";\n})(ComponentMessageType || (ComponentMessageType = {}));\n/**\n * Streamlit communication API.\n *\n * Components can send data to Streamlit via the functions defined here,\n * and receive data from Streamlit via the `events` property.\n */\nvar Streamlit = /** @class */ (function () {\n    function Streamlit() {\n    }\n    /**\n     * The Streamlit component API version we're targetting.\n     * There's currently only 1!\n     */\n    Streamlit.API_VERSION = 1;\n    Streamlit.RENDER_EVENT = \"streamlit:render\";\n    /** Dispatches events received from Streamlit. */\n    Streamlit.events = new EventTarget();\n    Streamlit.registeredMessageListener = false;\n    /**\n     * Tell Streamlit that the component is ready to start receiving data.\n     * Streamlit will defer emitting RENDER events until it receives the\n     * COMPONENT_READY message.\n     */\n    Streamlit.setComponentReady = function () {\n        if (!Streamlit.registeredMessageListener) {\n            // Register for message events if we haven't already\n            window.addEventListener(\"message\", Streamlit.onMessageEvent);\n            Streamlit.registeredMessageListener = true;\n        }\n        Streamlit.sendBackMsg(ComponentMessageType.COMPONENT_READY, {\n            apiVersion: Streamlit.API_VERSION\n        });\n    };\n    /**\n     * Report the component's height to Streamlit.\n     * This should be called every time the component changes its DOM - that is,\n     * when it's first loaded, and any time it updates.\n     */\n    Streamlit.setFrameHeight = function (height) {\n        if (height === undefined) {\n            // `height` is optional. If undefined, it defaults to scrollHeight,\n            // which is the entire height of the element minus its border,\n            // scrollbar, and margin.\n            height = document.body.scrollHeight;\n        }\n        if (height === Streamlit.lastFrameHeight) {\n            // Don't bother updating if our height hasn't changed.\n            return;\n        }\n        Streamlit.lastFrameHeight = height;\n        Streamlit.sendBackMsg(ComponentMessageType.SET_FRAME_HEIGHT, { height: height });\n    };\n    /**\n     * Set the component's value. This value will be returned to the Python\n     * script, and the script will be re-run.\n     *\n     * For example:\n     *\n     * JavaScript:\n     * Streamlit.setComponentValue(\"ahoy!\")\n     *\n     * Python:\n     * value = st.my_component(...)\n     * st.write(value) # -> \"ahoy!\"\n     *\n     * The value must be an ArrowTable, a typed array, an ArrayBuffer, or be\n     * serializable to JSON.\n     */\n    Streamlit.setComponentValue = function (value) {\n        var dataType;\n        if (value instanceof ArrowTable) {\n            dataType = \"dataframe\";\n            value = value.serialize();\n        }\n        else if (isTypedArray(value)) {\n            // All typed arrays get sent as Uint8Array, because that's what our\n            // protobuf library uses for the \"bytes\" field type.\n            dataType = \"bytes\";\n            value = new Uint8Array(value.buffer);\n        }\n        else if (value instanceof ArrayBuffer) {\n            dataType = \"bytes\";\n            value = new Uint8Array(value);\n        }\n        else {\n            dataType = \"json\";\n        }\n        Streamlit.sendBackMsg(ComponentMessageType.SET_COMPONENT_VALUE, {\n            value: value,\n            dataType: dataType\n        });\n    };\n    /** Receive a ForwardMsg from the Streamlit app */\n    Streamlit.onMessageEvent = function (event) {\n        var type = event.data[\"type\"];\n        switch (type) {\n            case Streamlit.RENDER_EVENT:\n                Streamlit.onRenderMessage(event.data);\n                break;\n        }\n    };\n    /**\n     * Handle an untyped Streamlit render event and redispatch it as a\n     * StreamlitRenderEvent.\n     */\n    Streamlit.onRenderMessage = function (data) {\n        var args = data[\"args\"];\n        if (args == null) {\n            console.error(\"Got null args in onRenderMessage. This should never happen\");\n            args = {};\n        }\n        // Parse our dataframe arguments with arrow, and merge them into our args dict\n        var dataframeArgs = data[\"dfs\"] && data[\"dfs\"].length > 0\n            ? Streamlit.argsDataframeToObject(data[\"dfs\"])\n            : {};\n        args = __assign(__assign({}, args), dataframeArgs);\n        var disabled = Boolean(data[\"disabled\"]);\n        var theme = data[\"theme\"];\n        if (theme) {\n            _injectTheme(theme);\n        }\n        // Dispatch a render event!\n        var eventData = { disabled: disabled, args: args, theme: theme };\n        var event = new CustomEvent(Streamlit.RENDER_EVENT, {\n            detail: eventData\n        });\n        Streamlit.events.dispatchEvent(event);\n    };\n    Streamlit.argsDataframeToObject = function (argsDataframe) {\n        var argsDataframeArrow = argsDataframe.map(function (_a) {\n            var key = _a.key, value = _a.value;\n            return [key, Streamlit.toArrowTable(value)];\n        });\n        return Object.fromEntries(argsDataframeArrow);\n    };\n    Streamlit.toArrowTable = function (df) {\n        var _a = df.data, data = _a.data, index = _a.index, columns = _a.columns, styler = _a.styler;\n        return new ArrowTable(data, index, columns, styler);\n    };\n    /** Post a message to the Streamlit app. */\n    Streamlit.sendBackMsg = function (type, data) {\n        window.parent.postMessage(__assign({ isStreamlitMessage: true, type: type }, data), \"*\");\n    };\n    return Streamlit;\n}());\nexport { Streamlit };\nvar _injectTheme = function (theme) {\n    var style = document.createElement(\"style\");\n    document.head.appendChild(style);\n    style.innerHTML = \"\\n    :root {\\n      --primary-color: \" + theme.primaryColor + \";\\n      --background-color: \" + theme.backgroundColor + \";\\n      --secondary-background-color: \" + theme.secondaryBackgroundColor + \";\\n      --text-color: \" + theme.textColor + \";\\n      --font: \" + theme.font + \";\\n    }\\n\\n    body {\\n      background-color: var(--background-color);\\n      color: var(--text-color);\\n    }\\n  \";\n};\n/** True if the value is a TypedArray. */\nfunction isTypedArray(value) {\n    var isBigIntArray = false;\n    try {\n        isBigIntArray =\n            value instanceof BigInt64Array || value instanceof BigUint64Array;\n    }\n    catch (e) {\n        // Ignore cause Safari does not support this\n        // https://caniuse.com/mdn-javascript_builtins_bigint64array\n    }\n    return (value instanceof Int8Array ||\n        value instanceof Uint8Array ||\n        value instanceof Uint8ClampedArray ||\n        value instanceof Int16Array ||\n        value instanceof Uint16Array ||\n        value instanceof Int32Array ||\n        value instanceof Uint32Array ||\n        value instanceof Float32Array ||\n        value instanceof Float64Array ||\n        isBigIntArray);\n}\n","/**\n * @license\n * Copyright 2018-2021 Streamlit Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport hoistNonReactStatics from \"hoist-non-react-statics\";\nimport React from \"react\";\nimport { Streamlit } from \"./streamlit\";\n/**\n * Optional Streamlit React-based component base class.\n *\n * You are not required to extend this base class to create a Streamlit\n * component. If you decide not to extend it, you should implement the\n * `componentDidMount` and `componentDidUpdate` functions in your own class,\n * so that your plugin properly resizes.\n */\nvar StreamlitComponentBase = /** @class */ (function (_super) {\n    __extends(StreamlitComponentBase, _super);\n    function StreamlitComponentBase() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    StreamlitComponentBase.prototype.componentDidMount = function () {\n        // After we're rendered for the first time, tell Streamlit that our height\n        // has changed.\n        Streamlit.setFrameHeight();\n    };\n    StreamlitComponentBase.prototype.componentDidUpdate = function () {\n        // After we're updated, tell Streamlit that our height may have changed.\n        Streamlit.setFrameHeight();\n    };\n    return StreamlitComponentBase;\n}(React.PureComponent));\nexport { StreamlitComponentBase };\n/**\n * Wrapper for React-based Streamlit components.\n *\n * Bootstraps the communication interface between Streamlit and the component.\n */\nexport function withStreamlitConnection(WrappedComponent) {\n    var ComponentWrapper = /** @class */ (function (_super) {\n        __extends(ComponentWrapper, _super);\n        function ComponentWrapper(props) {\n            var _this = _super.call(this, props) || this;\n            _this.componentDidMount = function () {\n                // Set up event listeners, and signal to Streamlit that we're ready.\n                // We won't render the component until we receive the first RENDER_EVENT.\n                Streamlit.events.addEventListener(Streamlit.RENDER_EVENT, _this.onRenderEvent);\n                Streamlit.setComponentReady();\n            };\n            _this.componentDidUpdate = function () {\n                // If our child threw an error, we display it in render(). In this\n                // case, the child won't be mounted and therefore won't call\n                // `setFrameHeight` on its own. We do it here so that the rendered\n                // error will be visible.\n                if (_this.state.componentError != null) {\n                    Streamlit.setFrameHeight();\n                }\n            };\n            _this.componentWillUnmount = function () {\n                Streamlit.events.removeEventListener(Streamlit.RENDER_EVENT, _this.onRenderEvent);\n            };\n            /**\n             * Streamlit is telling this component to redraw.\n             * We save the render data in State, so that it can be passed to the\n             * component in our own render() function.\n             */\n            _this.onRenderEvent = function (event) {\n                // Update our state with the newest render data\n                var renderEvent = event;\n                _this.setState({ renderData: renderEvent.detail });\n            };\n            _this.render = function () {\n                // If our wrapped component threw an error, display it.\n                if (_this.state.componentError != null) {\n                    return (React.createElement(\"div\", null,\n                        React.createElement(\"h1\", null, \"Component Error\"),\n                        React.createElement(\"span\", null, _this.state.componentError.message)));\n                }\n                // Don't render until we've gotten our first RENDER_EVENT from Streamlit.\n                if (_this.state.renderData == null) {\n                    return null;\n                }\n                return (React.createElement(WrappedComponent, { width: window.innerWidth, disabled: _this.state.renderData.disabled, args: _this.state.renderData.args, theme: _this.state.renderData.theme }));\n            };\n            _this.state = {\n                renderData: undefined,\n                componentError: undefined\n            };\n            return _this;\n        }\n        /**\n         * Error boundary function. This will be called if our wrapped\n         * component throws an error. We store the caught error in our state,\n         * and display it in the next render().\n         */\n        ComponentWrapper.getDerivedStateFromError = function (error) {\n            return { componentError: error };\n        };\n        return ComponentWrapper;\n    }(React.PureComponent));\n    return hoistNonReactStatics(ComponentWrapper, WrappedComponent);\n}\n","'use strict';\n\nvar reactIs = require('react-is');\n\n/**\n * Copyright 2015, Yahoo! Inc.\n * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.\n */\nvar REACT_STATICS = {\n  childContextTypes: true,\n  contextType: true,\n  contextTypes: true,\n  defaultProps: true,\n  displayName: true,\n  getDefaultProps: true,\n  getDerivedStateFromError: true,\n  getDerivedStateFromProps: true,\n  mixins: true,\n  propTypes: true,\n  type: true\n};\nvar KNOWN_STATICS = {\n  name: true,\n  length: true,\n  prototype: true,\n  caller: true,\n  callee: true,\n  arguments: true,\n  arity: true\n};\nvar FORWARD_REF_STATICS = {\n  '$$typeof': true,\n  render: true,\n  defaultProps: true,\n  displayName: true,\n  propTypes: true\n};\nvar MEMO_STATICS = {\n  '$$typeof': true,\n  compare: true,\n  defaultProps: true,\n  displayName: true,\n  propTypes: true,\n  type: true\n};\nvar TYPE_STATICS = {};\nTYPE_STATICS[reactIs.ForwardRef] = FORWARD_REF_STATICS;\nTYPE_STATICS[reactIs.Memo] = MEMO_STATICS;\n\nfunction getStatics(component) {\n  // React v16.11 and below\n  if (reactIs.isMemo(component)) {\n    return MEMO_STATICS;\n  } // React v16.12 and above\n\n\n  return TYPE_STATICS[component['$$typeof']] || REACT_STATICS;\n}\n\nvar defineProperty = Object.defineProperty;\nvar getOwnPropertyNames = Object.getOwnPropertyNames;\nvar getOwnPropertySymbols = Object.getOwnPropertySymbols;\nvar getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;\nvar getPrototypeOf = Object.getPrototypeOf;\nvar objectPrototype = Object.prototype;\nfunction hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {\n  if (typeof sourceComponent !== 'string') {\n    // don't hoist over string (html) components\n    if (objectPrototype) {\n      var inheritedComponent = getPrototypeOf(sourceComponent);\n\n      if (inheritedComponent && inheritedComponent !== objectPrototype) {\n        hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);\n      }\n    }\n\n    var keys = getOwnPropertyNames(sourceComponent);\n\n    if (getOwnPropertySymbols) {\n      keys = keys.concat(getOwnPropertySymbols(sourceComponent));\n    }\n\n    var targetStatics = getStatics(targetComponent);\n    var sourceStatics = getStatics(sourceComponent);\n\n    for (var i = 0; i < keys.length; ++i) {\n      var key = keys[i];\n\n      if (!KNOWN_STATICS[key] && !(blacklist && blacklist[key]) && !(sourceStatics && sourceStatics[key]) && !(targetStatics && targetStatics[key])) {\n        var descriptor = getOwnPropertyDescriptor(sourceComponent, key);\n\n        try {\n          // Avoid failures from read-only properties\n          defineProperty(targetComponent, key, descriptor);\n        } catch (e) {}\n      }\n    }\n  }\n\n  return targetComponent;\n}\n\nmodule.exports = hoistNonReactStatics;\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react-is.production.min.js');\n} else {\n  module.exports = require('./cjs/react-is.development.js');\n}\n","/** @license React v16.13.1\n * react-is.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';var b=\"function\"===typeof Symbol&&Symbol.for,c=b?Symbol.for(\"react.element\"):60103,d=b?Symbol.for(\"react.portal\"):60106,e=b?Symbol.for(\"react.fragment\"):60107,f=b?Symbol.for(\"react.strict_mode\"):60108,g=b?Symbol.for(\"react.profiler\"):60114,h=b?Symbol.for(\"react.provider\"):60109,k=b?Symbol.for(\"react.context\"):60110,l=b?Symbol.for(\"react.async_mode\"):60111,m=b?Symbol.for(\"react.concurrent_mode\"):60111,n=b?Symbol.for(\"react.forward_ref\"):60112,p=b?Symbol.for(\"react.suspense\"):60113,q=b?\nSymbol.for(\"react.suspense_list\"):60120,r=b?Symbol.for(\"react.memo\"):60115,t=b?Symbol.for(\"react.lazy\"):60116,v=b?Symbol.for(\"react.block\"):60121,w=b?Symbol.for(\"react.fundamental\"):60117,x=b?Symbol.for(\"react.responder\"):60118,y=b?Symbol.for(\"react.scope\"):60119;\nfunction z(a){if(\"object\"===typeof a&&null!==a){var u=a.$$typeof;switch(u){case c:switch(a=a.type,a){case l:case m:case e:case g:case f:case p:return a;default:switch(a=a&&a.$$typeof,a){case k:case n:case t:case r:case h:return a;default:return u}}case d:return u}}}function A(a){return z(a)===m}exports.AsyncMode=l;exports.ConcurrentMode=m;exports.ContextConsumer=k;exports.ContextProvider=h;exports.Element=c;exports.ForwardRef=n;exports.Fragment=e;exports.Lazy=t;exports.Memo=r;exports.Portal=d;\nexports.Profiler=g;exports.StrictMode=f;exports.Suspense=p;exports.isAsyncMode=function(a){return A(a)||z(a)===l};exports.isConcurrentMode=A;exports.isContextConsumer=function(a){return z(a)===k};exports.isContextProvider=function(a){return z(a)===h};exports.isElement=function(a){return\"object\"===typeof a&&null!==a&&a.$$typeof===c};exports.isForwardRef=function(a){return z(a)===n};exports.isFragment=function(a){return z(a)===e};exports.isLazy=function(a){return z(a)===t};\nexports.isMemo=function(a){return z(a)===r};exports.isPortal=function(a){return z(a)===d};exports.isProfiler=function(a){return z(a)===g};exports.isStrictMode=function(a){return z(a)===f};exports.isSuspense=function(a){return z(a)===p};\nexports.isValidElementType=function(a){return\"string\"===typeof a||\"function\"===typeof a||a===e||a===m||a===g||a===f||a===p||a===q||\"object\"===typeof a&&null!==a&&(a.$$typeof===t||a.$$typeof===r||a.$$typeof===h||a.$$typeof===k||a.$$typeof===n||a.$$typeof===w||a.$$typeof===x||a.$$typeof===y||a.$$typeof===v)};exports.typeOf=z;\n","/** @license React v16.14.0\n * react.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';var l=require(\"object-assign\"),n=\"function\"===typeof Symbol&&Symbol.for,p=n?Symbol.for(\"react.element\"):60103,q=n?Symbol.for(\"react.portal\"):60106,r=n?Symbol.for(\"react.fragment\"):60107,t=n?Symbol.for(\"react.strict_mode\"):60108,u=n?Symbol.for(\"react.profiler\"):60114,v=n?Symbol.for(\"react.provider\"):60109,w=n?Symbol.for(\"react.context\"):60110,x=n?Symbol.for(\"react.forward_ref\"):60112,y=n?Symbol.for(\"react.suspense\"):60113,z=n?Symbol.for(\"react.memo\"):60115,A=n?Symbol.for(\"react.lazy\"):\n60116,B=\"function\"===typeof Symbol&&Symbol.iterator;function C(a){for(var b=\"https://reactjs.org/docs/error-decoder.html?invariant=\"+a,c=1;c<arguments.length;c++)b+=\"&args[]=\"+encodeURIComponent(arguments[c]);return\"Minified React error #\"+a+\"; visit \"+b+\" for the full message or use the non-minified dev environment for full errors and additional helpful warnings.\"}\nvar D={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},E={};function F(a,b,c){this.props=a;this.context=b;this.refs=E;this.updater=c||D}F.prototype.isReactComponent={};F.prototype.setState=function(a,b){if(\"object\"!==typeof a&&\"function\"!==typeof a&&null!=a)throw Error(C(85));this.updater.enqueueSetState(this,a,b,\"setState\")};F.prototype.forceUpdate=function(a){this.updater.enqueueForceUpdate(this,a,\"forceUpdate\")};\nfunction G(){}G.prototype=F.prototype;function H(a,b,c){this.props=a;this.context=b;this.refs=E;this.updater=c||D}var I=H.prototype=new G;I.constructor=H;l(I,F.prototype);I.isPureReactComponent=!0;var J={current:null},K=Object.prototype.hasOwnProperty,L={key:!0,ref:!0,__self:!0,__source:!0};\nfunction M(a,b,c){var e,d={},g=null,k=null;if(null!=b)for(e in void 0!==b.ref&&(k=b.ref),void 0!==b.key&&(g=\"\"+b.key),b)K.call(b,e)&&!L.hasOwnProperty(e)&&(d[e]=b[e]);var f=arguments.length-2;if(1===f)d.children=c;else if(1<f){for(var h=Array(f),m=0;m<f;m++)h[m]=arguments[m+2];d.children=h}if(a&&a.defaultProps)for(e in f=a.defaultProps,f)void 0===d[e]&&(d[e]=f[e]);return{$$typeof:p,type:a,key:g,ref:k,props:d,_owner:J.current}}\nfunction N(a,b){return{$$typeof:p,type:a.type,key:b,ref:a.ref,props:a.props,_owner:a._owner}}function O(a){return\"object\"===typeof a&&null!==a&&a.$$typeof===p}function escape(a){var b={\"=\":\"=0\",\":\":\"=2\"};return\"$\"+(\"\"+a).replace(/[=:]/g,function(a){return b[a]})}var P=/\\/+/g,Q=[];function R(a,b,c,e){if(Q.length){var d=Q.pop();d.result=a;d.keyPrefix=b;d.func=c;d.context=e;d.count=0;return d}return{result:a,keyPrefix:b,func:c,context:e,count:0}}\nfunction S(a){a.result=null;a.keyPrefix=null;a.func=null;a.context=null;a.count=0;10>Q.length&&Q.push(a)}\nfunction T(a,b,c,e){var d=typeof a;if(\"undefined\"===d||\"boolean\"===d)a=null;var g=!1;if(null===a)g=!0;else switch(d){case \"string\":case \"number\":g=!0;break;case \"object\":switch(a.$$typeof){case p:case q:g=!0}}if(g)return c(e,a,\"\"===b?\".\"+U(a,0):b),1;g=0;b=\"\"===b?\".\":b+\":\";if(Array.isArray(a))for(var k=0;k<a.length;k++){d=a[k];var f=b+U(d,k);g+=T(d,f,c,e)}else if(null===a||\"object\"!==typeof a?f=null:(f=B&&a[B]||a[\"@@iterator\"],f=\"function\"===typeof f?f:null),\"function\"===typeof f)for(a=f.call(a),k=\n0;!(d=a.next()).done;)d=d.value,f=b+U(d,k++),g+=T(d,f,c,e);else if(\"object\"===d)throw c=\"\"+a,Error(C(31,\"[object Object]\"===c?\"object with keys {\"+Object.keys(a).join(\", \")+\"}\":c,\"\"));return g}function V(a,b,c){return null==a?0:T(a,\"\",b,c)}function U(a,b){return\"object\"===typeof a&&null!==a&&null!=a.key?escape(a.key):b.toString(36)}function W(a,b){a.func.call(a.context,b,a.count++)}\nfunction aa(a,b,c){var e=a.result,d=a.keyPrefix;a=a.func.call(a.context,b,a.count++);Array.isArray(a)?X(a,e,c,function(a){return a}):null!=a&&(O(a)&&(a=N(a,d+(!a.key||b&&b.key===a.key?\"\":(\"\"+a.key).replace(P,\"$&/\")+\"/\")+c)),e.push(a))}function X(a,b,c,e,d){var g=\"\";null!=c&&(g=(\"\"+c).replace(P,\"$&/\")+\"/\");b=R(b,g,e,d);V(a,aa,b);S(b)}var Y={current:null};function Z(){var a=Y.current;if(null===a)throw Error(C(321));return a}\nvar ba={ReactCurrentDispatcher:Y,ReactCurrentBatchConfig:{suspense:null},ReactCurrentOwner:J,IsSomeRendererActing:{current:!1},assign:l};exports.Children={map:function(a,b,c){if(null==a)return a;var e=[];X(a,e,null,b,c);return e},forEach:function(a,b,c){if(null==a)return a;b=R(null,null,b,c);V(a,W,b);S(b)},count:function(a){return V(a,function(){return null},null)},toArray:function(a){var b=[];X(a,b,null,function(a){return a});return b},only:function(a){if(!O(a))throw Error(C(143));return a}};\nexports.Component=F;exports.Fragment=r;exports.Profiler=u;exports.PureComponent=H;exports.StrictMode=t;exports.Suspense=y;exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=ba;\nexports.cloneElement=function(a,b,c){if(null===a||void 0===a)throw Error(C(267,a));var e=l({},a.props),d=a.key,g=a.ref,k=a._owner;if(null!=b){void 0!==b.ref&&(g=b.ref,k=J.current);void 0!==b.key&&(d=\"\"+b.key);if(a.type&&a.type.defaultProps)var f=a.type.defaultProps;for(h in b)K.call(b,h)&&!L.hasOwnProperty(h)&&(e[h]=void 0===b[h]&&void 0!==f?f[h]:b[h])}var h=arguments.length-2;if(1===h)e.children=c;else if(1<h){f=Array(h);for(var m=0;m<h;m++)f[m]=arguments[m+2];e.children=f}return{$$typeof:p,type:a.type,\nkey:d,ref:g,props:e,_owner:k}};exports.createContext=function(a,b){void 0===b&&(b=null);a={$$typeof:w,_calculateChangedBits:b,_currentValue:a,_currentValue2:a,_threadCount:0,Provider:null,Consumer:null};a.Provider={$$typeof:v,_context:a};return a.Consumer=a};exports.createElement=M;exports.createFactory=function(a){var b=M.bind(null,a);b.type=a;return b};exports.createRef=function(){return{current:null}};exports.forwardRef=function(a){return{$$typeof:x,render:a}};exports.isValidElement=O;\nexports.lazy=function(a){return{$$typeof:A,_ctor:a,_status:-1,_result:null}};exports.memo=function(a,b){return{$$typeof:z,type:a,compare:void 0===b?null:b}};exports.useCallback=function(a,b){return Z().useCallback(a,b)};exports.useContext=function(a,b){return Z().useContext(a,b)};exports.useDebugValue=function(){};exports.useEffect=function(a,b){return Z().useEffect(a,b)};exports.useImperativeHandle=function(a,b,c){return Z().useImperativeHandle(a,b,c)};\nexports.useLayoutEffect=function(a,b){return Z().useLayoutEffect(a,b)};exports.useMemo=function(a,b){return Z().useMemo(a,b)};exports.useReducer=function(a,b,c){return Z().useReducer(a,b,c)};exports.useRef=function(a){return Z().useRef(a)};exports.useState=function(a){return Z().useState(a)};exports.version=\"16.14.0\";\n","/*\nobject-assign\n(c) Sindre Sorhus\n@license MIT\n*/\n\n'use strict';\n/* eslint-disable no-unused-vars */\nvar getOwnPropertySymbols = Object.getOwnPropertySymbols;\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar propIsEnumerable = Object.prototype.propertyIsEnumerable;\n\nfunction toObject(val) {\n\tif (val === null || val === undefined) {\n\t\tthrow new TypeError('Object.assign cannot be called with null or undefined');\n\t}\n\n\treturn Object(val);\n}\n\nfunction shouldUseNative() {\n\ttry {\n\t\tif (!Object.assign) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Detect buggy property enumeration order in older V8 versions.\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=4118\n\t\tvar test1 = new String('abc');  // eslint-disable-line no-new-wrappers\n\t\ttest1[5] = 'de';\n\t\tif (Object.getOwnPropertyNames(test1)[0] === '5') {\n\t\t\treturn false;\n\t\t}\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\t\tvar test2 = {};\n\t\tfor (var i = 0; i < 10; i++) {\n\t\t\ttest2['_' + String.fromCharCode(i)] = i;\n\t\t}\n\t\tvar order2 = Object.getOwnPropertyNames(test2).map(function (n) {\n\t\t\treturn test2[n];\n\t\t});\n\t\tif (order2.join('') !== '0123456789') {\n\t\t\treturn false;\n\t\t}\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\t\tvar test3 = {};\n\t\t'abcdefghijklmnopqrst'.split('').forEach(function (letter) {\n\t\t\ttest3[letter] = letter;\n\t\t});\n\t\tif (Object.keys(Object.assign({}, test3)).join('') !==\n\t\t\t\t'abcdefghijklmnopqrst') {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t} catch (err) {\n\t\t// We don't expect any of the above to throw, but better to be safe.\n\t\treturn false;\n\t}\n}\n\nmodule.exports = shouldUseNative() ? Object.assign : function (target, source) {\n\tvar from;\n\tvar to = toObject(target);\n\tvar symbols;\n\n\tfor (var s = 1; s < arguments.length; s++) {\n\t\tfrom = Object(arguments[s]);\n\n\t\tfor (var key in from) {\n\t\t\tif (hasOwnProperty.call(from, key)) {\n\t\t\t\tto[key] = from[key];\n\t\t\t}\n\t\t}\n\n\t\tif (getOwnPropertySymbols) {\n\t\t\tsymbols = getOwnPropertySymbols(from);\n\t\t\tfor (var i = 0; i < symbols.length; i++) {\n\t\t\t\tif (propIsEnumerable.call(from, symbols[i])) {\n\t\t\t\t\tto[symbols[i]] = from[symbols[i]];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn to;\n};\n","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function define(obj, key, value) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n    return obj[key];\n  }\n  try {\n    // IE 8 has a broken Object.defineProperty that only works on DOM objects.\n    define({}, \"\");\n  } catch (err) {\n    define = function(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  define(IteratorPrototype, iteratorSymbol, function () {\n    return this;\n  });\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = GeneratorFunctionPrototype;\n  define(Gp, \"constructor\", GeneratorFunctionPrototype);\n  define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction);\n  GeneratorFunction.displayName = define(\n    GeneratorFunctionPrototype,\n    toStringTagSymbol,\n    \"GeneratorFunction\"\n  );\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      define(prototype, method, function(arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      define(genFun, toStringTagSymbol, \"GeneratorFunction\");\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return PromiseImpl.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  define(AsyncIterator.prototype, asyncIteratorSymbol, function () {\n    return this;\n  });\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList),\n      PromiseImpl\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  define(Gp, toStringTagSymbol, \"Generator\");\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  define(Gp, iteratorSymbol, function() {\n    return this;\n  });\n\n  define(Gp, \"toString\", function() {\n    return \"[object Generator]\";\n  });\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n  typeof module === \"object\" ? module.exports : {}\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, in modern engines\n  // we can explicitly access globalThis. In older engines we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  if (typeof globalThis === \"object\") {\n    globalThis.regeneratorRuntime = runtime;\n  } else {\n    Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n  }\n}\n"],"sourceRoot":""}