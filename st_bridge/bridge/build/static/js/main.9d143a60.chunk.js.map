{"version":3,"sources":["index.tsx"],"names":["Bridge","name","sendText","text","Streamlit","setComponentValue","sendData","data","JSON","stringify","this","global","window","top","parent","undefined","stBridges","bridges","events","addEventListener","RENDER_EVENT","event","detail","bridge","args","setComponentReady"],"mappings":"4LAEMA,E,aAGJ,WAAYC,GAAe,yBAFpBA,UAEmB,OAInBC,SAAW,SAACC,GACjBC,IAAUC,kBAAkBF,IALJ,KAQnBG,SAAW,SAACC,GACjBH,IAAUC,kBAAkBG,KAAKC,UAAUF,KAR3CG,KAAKT,KAAOA,KAcVU,EAASC,OAAOC,KAAOD,OAAOE,OACpC,QAAkCC,IAA7BJ,EAAeK,UAAyB,CAC3C,IAAMA,EAAY,CAChBC,QAAS,GACTf,SAAU,SAACD,EAAcE,GACvBa,EAAUC,QAAQhB,GAAMC,SAASC,IAEnCG,SAAU,SAACL,EAAcM,GACvBS,EAAUC,QAAQhB,GAAMK,SAASC,KAGpCI,EAAeK,UAAYA,EA0B9BZ,IAAUc,OAAOC,iBAAiBf,IAAUgB,cAlB5C,SAAkBC,GAEhB,IAAMd,EAAQc,EAAkCC,OAE1CN,EAAaL,EAAeK,UAC5BO,EAAShB,EAAKiB,KAAL,UACmBT,IAA9BC,EAAUC,QAAQM,KACpBP,EAAUC,QAAQM,GAAU,IAAIvB,EAAOuB,OAe3CnB,IAAUqB,sB","file":"static/js/main.9d143a60.chunk.js","sourcesContent":["import { Streamlit, RenderData } from \"streamlit-component-lib\";\n\nclass Bridge {\n  public name: string;\n\n  constructor(name: string) {\n    this.name = name;\n  }\n\n  public sendText = (text: string) => {\n    Streamlit.setComponentValue(text);\n  };\n\n  public sendData = (data: object) => {\n    Streamlit.setComponentValue(JSON.stringify(data));\n  };\n}\n\n// store data in the topmost window in the window hierarchy as the component\n// is rendered inside an iframe.\nconst global = window.top || window.parent;\nif ((global as any).stBridges === undefined) {\n  const stBridges = {\n    bridges: {} as { [key: string]: Bridge },\n    sendText: (name: string, text: string) => {\n      stBridges.bridges[name].sendText(text);\n    },\n    sendData: (name: string, data: object) => {\n      stBridges.bridges[name].sendData(data);\n    },\n  };\n  (global as any).stBridges = stBridges;\n}\n\n/**\n * The component's render function. This will be called immediately after\n * the component is initially loaded, and then again every time the\n * component gets new data from Python.\n */\nfunction onRender(event: Event): void {\n  // Get the RenderData from the event\n  const data = (event as CustomEvent<RenderData>).detail;\n\n  const stBridges = (global as any).stBridges;\n  const bridge = data.args[\"name\"];\n  if (stBridges.bridges[bridge] === undefined) {\n    stBridges.bridges[bridge] = new Bridge(bridge);\n  }\n\n  // We tell Streamlit to update our frameHeight after each render event, in\n  // case it has changed. (This isn't strictly necessary for the example\n  // because our height stays fixed, but this is a low-cost function, so\n  // there's no harm in doing it redundantly.)\n  // Streamlit.setFrameHeight();\n}\n\n// Attach our `onRender` handler to Streamlit's render event.\nStreamlit.events.addEventListener(Streamlit.RENDER_EVENT, onRender);\n\n// Tell Streamlit we're ready to start receiving data. We won't get our\n// first RENDER_EVENT until we call this function.\nStreamlit.setComponentReady();\n\n// Finally, tell Streamlit to update our initial height. We omit the\n// `height` parameter here to have it default to our scrollHeight.\n// Streamlit.setFrameHeight();\n"],"sourceRoot":""}