{"version":3,"sources":["index.tsx"],"names":["Bridge","name","send","data","Streamlit","setComponentValue","this","global","window","top","stBridges","parent","getGlobal","undefined","bridges","events","addEventListener","RENDER_EVENT","event","detail","bridge","args","setComponentReady"],"mappings":"4LAEMA,E,aAGJ,WAAYC,GAAe,yBAFpBA,UAEmB,OAInBC,KAAO,SAACC,GACbC,IAAUC,kBAAkBF,IAJ5BG,KAAKL,KAAOA,KA0BhB,IAAMM,EAfN,WACE,IAAIA,EACJ,IAIqBC,OAAOC,IAAYC,UAEtCH,EAASC,OAAOC,KAAOD,OAAOG,OAC9B,SACAJ,EAASC,OAAOG,OAElB,OAAOJ,EAGMK,GAEf,QAAkCC,IAA7BN,EAAeG,UAAyB,CAC3C,IAAMA,EAAY,CAChBI,QAAS,GACTZ,KAAM,SAACD,EAAcE,GACnBO,EAAUI,QAAQb,GAAMC,KAAKC,KAGhCI,EAAeG,UAAYA,EAoB9BN,IAAUW,OAAOC,iBAAiBZ,IAAUa,cAZ5C,SAAkBC,GAEhB,IAAMf,EAAQe,EAAkCC,OAE1CT,EAAaH,EAAeG,UAC5BU,EAASjB,EAAKkB,KAAL,UACmBR,IAA9BH,EAAUI,QAAQM,KACpBV,EAAUI,QAAQM,GAAU,IAAIpB,EAAOoB,OAS3ChB,IAAUkB,sB","file":"static/js/main.09603bd8.chunk.js","sourcesContent":["import { Streamlit, RenderData } from \"streamlit-component-lib\";\n\nclass Bridge {\n  public name: string;\n\n  constructor(name: string) {\n    this.name = name;\n  }\n\n  public send = (data: any) => {\n    Streamlit.setComponentValue(data);\n  };\n}\n\n// store data in the topmost window in the window hierarchy as the component\n// is rendered inside an iframe.\n\nfunction getGlobal() {\n  let global: Window;\n  try {\n    /* Try to access a property of window.top. This will fail when window.top\n       is unset or cross-origin doesn't allow us to access window.top\n     */\n    const stBridges = (window.top as any).stBridges;\n\n    global = window.top || window.parent;\n  } catch {\n    global = window.parent;\n  }\n  return global;\n}\n\nconst global = getGlobal();\n\nif ((global as any).stBridges === undefined) {\n  const stBridges = {\n    bridges: {} as { [key: string]: Bridge },\n    send: (name: string, data: any) => {\n      stBridges.bridges[name].send(data);\n    },\n  };\n  (global as any).stBridges = stBridges;\n}\n\n/**\n * The component's render function. This will be called immediately after\n * the component is initially loaded, and then again every time the\n * component gets new data from Python.\n */\nfunction onRender(event: Event): void {\n  // Get the RenderData from the event\n  const data = (event as CustomEvent<RenderData>).detail;\n\n  const stBridges = (global as any).stBridges;\n  const bridge = data.args[\"name\"];\n  if (stBridges.bridges[bridge] === undefined) {\n    stBridges.bridges[bridge] = new Bridge(bridge);\n  }\n}\n\n// Attach our `onRender` handler to Streamlit's render event.\nStreamlit.events.addEventListener(Streamlit.RENDER_EVENT, onRender);\n\n// Tell Streamlit we're ready to start receiving data. We won't get our\n// first RENDER_EVENT until we call this function.\nStreamlit.setComponentReady();\n"],"sourceRoot":""}