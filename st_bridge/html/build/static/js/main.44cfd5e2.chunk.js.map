{"version":3,"sources":["index.tsx"],"names":["root","document","body","appendChild","createElement","container","getContainer","iframes","window","parent","getElementsByTagName","i","length","iframe","contentDocument","contentWindow","parentElement","console","error","global","top","getGlobal","stBridges","undefined","Streamlit","events","addEventListener","RENDER_EVENT","event","data","detail","html","args","innerHTML","setFrameHeight","lastElementChild","tagName","toLowerCase","div","firstElementChild","style","display","setComponentReady"],"mappings":"uJAAA,kBAEMA,EAAOC,SAASC,KAAKC,YAAYF,SAASG,cAAc,QAE1DC,EAAmC,KAEvC,SAASC,IACP,GAAkB,OAAdD,EAAoB,OAAOA,EAG/B,IADA,IAAME,EAAUC,OAAOC,OAAOR,SAASS,qBAAqB,UACnDC,EAAI,EAAGA,EAAIJ,EAAQK,OAAQD,IAAK,CAAC,IAAD,EACjCE,EAASN,EAAQI,IAEpBE,EAAOC,kBAAP,UAA0BD,EAAOE,qBAAjC,aAA0B,EAAsBd,aAAcA,WAE/DI,EAAYQ,EAAOG,eAQvB,OAJkB,OAAdX,GACFY,QAAQC,MAAM,0DAGTb,EAgBT,IAAMc,EAZN,WACE,IAAIA,EACJ,IAIEA,EAASX,OAAOY,KAAOZ,OAAOC,OAC9B,SACAU,EAASX,OAAOC,OAElB,OAAOU,EAEME,GAGdb,OAAec,UAAaH,EAAeG,eACbC,IAA1Bf,OAAeC,SACjBD,OAAeC,OAAOa,UAAaH,EAAeG,WAsCrDE,IAAUC,OAAOC,iBAAiBF,IAAUG,cA9B5C,SAAkBC,GAEhB,IAAMC,EAAQD,EAAkCE,OAE1CC,EAAOF,EAAKG,KAAL,KAGb,IAAe,IAFAH,EAAKG,KAAL,OAMb,OAHAhC,EAAKiC,UAAYF,OACjBP,IAAUU,iBAMZ,IAAM7B,EAAYC,IAClB,GAAkB,OAAdD,EAAJ,CAEA,GAA0D,WAAtDA,EAAU8B,iBAAkBC,QAAQC,cAA4B,CAElE,IAAMC,EAAM9B,OAAOC,OAAOR,SAASG,cAAc,OACjDC,EAAUF,YAAYmC,GAErBjC,EAAUkC,kBAAmCC,MAAMC,QAAU,OAGhEpC,EAAU8B,iBAAkBF,UAAYF,MAQ1CP,IAAUkB,oBAIVlB,IAAUU,mB","file":"static/js/main.44cfd5e2.chunk.js","sourcesContent":["import { Streamlit, RenderData } from \"streamlit-component-lib\";\n\nconst root = document.body.appendChild(document.createElement(\"div\"));\n\nlet container: HTMLDivElement | null = null;\n\nfunction getContainer() {\n  if (container !== null) return container;\n\n  const iframes = window.parent.document.getElementsByTagName(\"iframe\");\n  for (let i = 0; i < iframes.length; i++) {\n    const iframe = iframes[i];\n    if (\n      (iframe.contentDocument || iframe.contentWindow?.document) === document\n    ) {\n      container = iframe.parentElement! as HTMLDivElement;\n    }\n  }\n\n  if (container === null) {\n    console.error(\"Failed to identify the container of the HTML component\");\n  }\n\n  return container;\n}\n\n// get the global where stBridges stores data\nfunction getGlobal() {\n  let global: Window;\n  try {\n    /* Try to access a property of window.top. This will fail when window.top\n       is unset or cross-origin doesn't allow us to access window.top\n     */\n    global = window.top || window.parent;\n  } catch {\n    global = window.parent;\n  }\n  return global;\n}\nconst global = getGlobal();\n\n// create a reference to the stBridges object in the topmost window so we can access it from nested iframes.\n(window as any).stBridges = (global as any).stBridges;\nif ((window as any).parent !== undefined) {\n  (window as any).parent.stBridges = (global as any).stBridges;\n}\n\n/**\n * The component's render function. This will be called immediately after\n * the component is initially loaded, and then again every time the\n * component gets new data from Python.\n */\nfunction onRender(event: Event): void {\n  // Get the RenderData from the event\n  const data = (event as CustomEvent<RenderData>).detail;\n\n  const html = data.args[\"html\"];\n  const iframe = data.args[\"iframe\"];\n\n  if (iframe === true) {\n    root.innerHTML = html;\n    Streamlit.setFrameHeight();\n\n    return;\n  }\n\n  // not render inside iframe, we create a div sibling and render it there\n  const container = getContainer();\n  if (container === null) return;\n\n  if (container.lastElementChild!.tagName.toLowerCase() === \"iframe\") {\n    // need to create a new div to render the html\n    const div = window.parent.document.createElement(\"div\");\n    container.appendChild(div);\n    // hide the iframe\n    (container.firstElementChild! as HTMLElement).style.display = \"none\";\n  }\n\n  container.lastElementChild!.innerHTML = html;\n}\n\n// Attach our `onRender` handler to Streamlit's render event.\nStreamlit.events.addEventListener(Streamlit.RENDER_EVENT, onRender);\n\n// Tell Streamlit we're ready to start receiving data. We won't get our\n// first RENDER_EVENT until we call this function.\nStreamlit.setComponentReady();\n\n// Finally, tell Streamlit to update our initial height. We omit the\n// `height` parameter here to have it default to our scrollHeight.\nStreamlit.setFrameHeight();\n"],"sourceRoot":""}